
RTOS LAB2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006710  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080068a0  080068a0  000168a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800699c  0800699c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800699c  0800699c  0001699c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069a4  080069a4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069a4  080069a4  000169a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069a8  080069a8  000169a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080069ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004b24  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004b98  20004b98  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016c3a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f69  00000000  00000000  00036cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a8  00000000  00000000  00039c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001170  00000000  00000000  0003aef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003103  00000000  00000000  0003c060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013c86  00000000  00000000  0003f163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df266  00000000  00000000  00052de9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013204f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052a8  00000000  00000000  001320a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006888 	.word	0x08006888

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006888 	.word	0x08006888

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b974 	b.w	8000d0c <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9d08      	ldr	r5, [sp, #32]
 8000a42:	4604      	mov	r4, r0
 8000a44:	468e      	mov	lr, r1
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d14d      	bne.n	8000ae6 <__udivmoddi4+0xaa>
 8000a4a:	428a      	cmp	r2, r1
 8000a4c:	4694      	mov	ip, r2
 8000a4e:	d969      	bls.n	8000b24 <__udivmoddi4+0xe8>
 8000a50:	fab2 f282 	clz	r2, r2
 8000a54:	b152      	cbz	r2, 8000a6c <__udivmoddi4+0x30>
 8000a56:	fa01 f302 	lsl.w	r3, r1, r2
 8000a5a:	f1c2 0120 	rsb	r1, r2, #32
 8000a5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a66:	ea41 0e03 	orr.w	lr, r1, r3
 8000a6a:	4094      	lsls	r4, r2
 8000a6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a70:	0c21      	lsrs	r1, r4, #16
 8000a72:	fbbe f6f8 	udiv	r6, lr, r8
 8000a76:	fa1f f78c 	uxth.w	r7, ip
 8000a7a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a82:	fb06 f107 	mul.w	r1, r6, r7
 8000a86:	4299      	cmp	r1, r3
 8000a88:	d90a      	bls.n	8000aa0 <__udivmoddi4+0x64>
 8000a8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a92:	f080 811f 	bcs.w	8000cd4 <__udivmoddi4+0x298>
 8000a96:	4299      	cmp	r1, r3
 8000a98:	f240 811c 	bls.w	8000cd4 <__udivmoddi4+0x298>
 8000a9c:	3e02      	subs	r6, #2
 8000a9e:	4463      	add	r3, ip
 8000aa0:	1a5b      	subs	r3, r3, r1
 8000aa2:	b2a4      	uxth	r4, r4
 8000aa4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa8:	fb08 3310 	mls	r3, r8, r0, r3
 8000aac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab0:	fb00 f707 	mul.w	r7, r0, r7
 8000ab4:	42a7      	cmp	r7, r4
 8000ab6:	d90a      	bls.n	8000ace <__udivmoddi4+0x92>
 8000ab8:	eb1c 0404 	adds.w	r4, ip, r4
 8000abc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac0:	f080 810a 	bcs.w	8000cd8 <__udivmoddi4+0x29c>
 8000ac4:	42a7      	cmp	r7, r4
 8000ac6:	f240 8107 	bls.w	8000cd8 <__udivmoddi4+0x29c>
 8000aca:	4464      	add	r4, ip
 8000acc:	3802      	subs	r0, #2
 8000ace:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ad2:	1be4      	subs	r4, r4, r7
 8000ad4:	2600      	movs	r6, #0
 8000ad6:	b11d      	cbz	r5, 8000ae0 <__udivmoddi4+0xa4>
 8000ad8:	40d4      	lsrs	r4, r2
 8000ada:	2300      	movs	r3, #0
 8000adc:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d909      	bls.n	8000afe <__udivmoddi4+0xc2>
 8000aea:	2d00      	cmp	r5, #0
 8000aec:	f000 80ef 	beq.w	8000cce <__udivmoddi4+0x292>
 8000af0:	2600      	movs	r6, #0
 8000af2:	e9c5 0100 	strd	r0, r1, [r5]
 8000af6:	4630      	mov	r0, r6
 8000af8:	4631      	mov	r1, r6
 8000afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afe:	fab3 f683 	clz	r6, r3
 8000b02:	2e00      	cmp	r6, #0
 8000b04:	d14a      	bne.n	8000b9c <__udivmoddi4+0x160>
 8000b06:	428b      	cmp	r3, r1
 8000b08:	d302      	bcc.n	8000b10 <__udivmoddi4+0xd4>
 8000b0a:	4282      	cmp	r2, r0
 8000b0c:	f200 80f9 	bhi.w	8000d02 <__udivmoddi4+0x2c6>
 8000b10:	1a84      	subs	r4, r0, r2
 8000b12:	eb61 0303 	sbc.w	r3, r1, r3
 8000b16:	2001      	movs	r0, #1
 8000b18:	469e      	mov	lr, r3
 8000b1a:	2d00      	cmp	r5, #0
 8000b1c:	d0e0      	beq.n	8000ae0 <__udivmoddi4+0xa4>
 8000b1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b22:	e7dd      	b.n	8000ae0 <__udivmoddi4+0xa4>
 8000b24:	b902      	cbnz	r2, 8000b28 <__udivmoddi4+0xec>
 8000b26:	deff      	udf	#255	; 0xff
 8000b28:	fab2 f282 	clz	r2, r2
 8000b2c:	2a00      	cmp	r2, #0
 8000b2e:	f040 8092 	bne.w	8000c56 <__udivmoddi4+0x21a>
 8000b32:	eba1 010c 	sub.w	r1, r1, ip
 8000b36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b3a:	fa1f fe8c 	uxth.w	lr, ip
 8000b3e:	2601      	movs	r6, #1
 8000b40:	0c20      	lsrs	r0, r4, #16
 8000b42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b46:	fb07 1113 	mls	r1, r7, r3, r1
 8000b4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b4e:	fb0e f003 	mul.w	r0, lr, r3
 8000b52:	4288      	cmp	r0, r1
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0x12c>
 8000b56:	eb1c 0101 	adds.w	r1, ip, r1
 8000b5a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x12a>
 8000b60:	4288      	cmp	r0, r1
 8000b62:	f200 80cb 	bhi.w	8000cfc <__udivmoddi4+0x2c0>
 8000b66:	4643      	mov	r3, r8
 8000b68:	1a09      	subs	r1, r1, r0
 8000b6a:	b2a4      	uxth	r4, r4
 8000b6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b70:	fb07 1110 	mls	r1, r7, r0, r1
 8000b74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b78:	fb0e fe00 	mul.w	lr, lr, r0
 8000b7c:	45a6      	cmp	lr, r4
 8000b7e:	d908      	bls.n	8000b92 <__udivmoddi4+0x156>
 8000b80:	eb1c 0404 	adds.w	r4, ip, r4
 8000b84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b88:	d202      	bcs.n	8000b90 <__udivmoddi4+0x154>
 8000b8a:	45a6      	cmp	lr, r4
 8000b8c:	f200 80bb 	bhi.w	8000d06 <__udivmoddi4+0x2ca>
 8000b90:	4608      	mov	r0, r1
 8000b92:	eba4 040e 	sub.w	r4, r4, lr
 8000b96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b9a:	e79c      	b.n	8000ad6 <__udivmoddi4+0x9a>
 8000b9c:	f1c6 0720 	rsb	r7, r6, #32
 8000ba0:	40b3      	lsls	r3, r6
 8000ba2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ba6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000baa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bae:	fa01 f306 	lsl.w	r3, r1, r6
 8000bb2:	431c      	orrs	r4, r3
 8000bb4:	40f9      	lsrs	r1, r7
 8000bb6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bba:	fa00 f306 	lsl.w	r3, r0, r6
 8000bbe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bc2:	0c20      	lsrs	r0, r4, #16
 8000bc4:	fa1f fe8c 	uxth.w	lr, ip
 8000bc8:	fb09 1118 	mls	r1, r9, r8, r1
 8000bcc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd0:	fb08 f00e 	mul.w	r0, r8, lr
 8000bd4:	4288      	cmp	r0, r1
 8000bd6:	fa02 f206 	lsl.w	r2, r2, r6
 8000bda:	d90b      	bls.n	8000bf4 <__udivmoddi4+0x1b8>
 8000bdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000be0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000be4:	f080 8088 	bcs.w	8000cf8 <__udivmoddi4+0x2bc>
 8000be8:	4288      	cmp	r0, r1
 8000bea:	f240 8085 	bls.w	8000cf8 <__udivmoddi4+0x2bc>
 8000bee:	f1a8 0802 	sub.w	r8, r8, #2
 8000bf2:	4461      	add	r1, ip
 8000bf4:	1a09      	subs	r1, r1, r0
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bfc:	fb09 1110 	mls	r1, r9, r0, r1
 8000c00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c08:	458e      	cmp	lr, r1
 8000c0a:	d908      	bls.n	8000c1e <__udivmoddi4+0x1e2>
 8000c0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c10:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c14:	d26c      	bcs.n	8000cf0 <__udivmoddi4+0x2b4>
 8000c16:	458e      	cmp	lr, r1
 8000c18:	d96a      	bls.n	8000cf0 <__udivmoddi4+0x2b4>
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	4461      	add	r1, ip
 8000c1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c22:	fba0 9402 	umull	r9, r4, r0, r2
 8000c26:	eba1 010e 	sub.w	r1, r1, lr
 8000c2a:	42a1      	cmp	r1, r4
 8000c2c:	46c8      	mov	r8, r9
 8000c2e:	46a6      	mov	lr, r4
 8000c30:	d356      	bcc.n	8000ce0 <__udivmoddi4+0x2a4>
 8000c32:	d053      	beq.n	8000cdc <__udivmoddi4+0x2a0>
 8000c34:	b15d      	cbz	r5, 8000c4e <__udivmoddi4+0x212>
 8000c36:	ebb3 0208 	subs.w	r2, r3, r8
 8000c3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c42:	fa22 f306 	lsr.w	r3, r2, r6
 8000c46:	40f1      	lsrs	r1, r6
 8000c48:	431f      	orrs	r7, r3
 8000c4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c4e:	2600      	movs	r6, #0
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	f1c2 0320 	rsb	r3, r2, #32
 8000c5a:	40d8      	lsrs	r0, r3
 8000c5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c60:	fa21 f303 	lsr.w	r3, r1, r3
 8000c64:	4091      	lsls	r1, r2
 8000c66:	4301      	orrs	r1, r0
 8000c68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6c:	fa1f fe8c 	uxth.w	lr, ip
 8000c70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c74:	fb07 3610 	mls	r6, r7, r0, r3
 8000c78:	0c0b      	lsrs	r3, r1, #16
 8000c7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c82:	429e      	cmp	r6, r3
 8000c84:	fa04 f402 	lsl.w	r4, r4, r2
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x260>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c92:	d22f      	bcs.n	8000cf4 <__udivmoddi4+0x2b8>
 8000c94:	429e      	cmp	r6, r3
 8000c96:	d92d      	bls.n	8000cf4 <__udivmoddi4+0x2b8>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	b289      	uxth	r1, r1
 8000ca0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ca4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ca8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cac:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb0:	428b      	cmp	r3, r1
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x28a>
 8000cb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cbc:	d216      	bcs.n	8000cec <__udivmoddi4+0x2b0>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d914      	bls.n	8000cec <__udivmoddi4+0x2b0>
 8000cc2:	3e02      	subs	r6, #2
 8000cc4:	4461      	add	r1, ip
 8000cc6:	1ac9      	subs	r1, r1, r3
 8000cc8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ccc:	e738      	b.n	8000b40 <__udivmoddi4+0x104>
 8000cce:	462e      	mov	r6, r5
 8000cd0:	4628      	mov	r0, r5
 8000cd2:	e705      	b.n	8000ae0 <__udivmoddi4+0xa4>
 8000cd4:	4606      	mov	r6, r0
 8000cd6:	e6e3      	b.n	8000aa0 <__udivmoddi4+0x64>
 8000cd8:	4618      	mov	r0, r3
 8000cda:	e6f8      	b.n	8000ace <__udivmoddi4+0x92>
 8000cdc:	454b      	cmp	r3, r9
 8000cde:	d2a9      	bcs.n	8000c34 <__udivmoddi4+0x1f8>
 8000ce0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ce4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ce8:	3801      	subs	r0, #1
 8000cea:	e7a3      	b.n	8000c34 <__udivmoddi4+0x1f8>
 8000cec:	4646      	mov	r6, r8
 8000cee:	e7ea      	b.n	8000cc6 <__udivmoddi4+0x28a>
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	e794      	b.n	8000c1e <__udivmoddi4+0x1e2>
 8000cf4:	4640      	mov	r0, r8
 8000cf6:	e7d1      	b.n	8000c9c <__udivmoddi4+0x260>
 8000cf8:	46d0      	mov	r8, sl
 8000cfa:	e77b      	b.n	8000bf4 <__udivmoddi4+0x1b8>
 8000cfc:	3b02      	subs	r3, #2
 8000cfe:	4461      	add	r1, ip
 8000d00:	e732      	b.n	8000b68 <__udivmoddi4+0x12c>
 8000d02:	4630      	mov	r0, r6
 8000d04:	e709      	b.n	8000b1a <__udivmoddi4+0xde>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	e742      	b.n	8000b92 <__udivmoddi4+0x156>

08000d0c <__aeabi_idiv0>:
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d14:	f000 fd6c 	bl	80017f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d18:	f000 f83a 	bl	8000d90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1c:	f000 f928 	bl	8000f70 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d20:	f000 f8a0 	bl	8000e64 <MX_ADC1_Init>
  MX_TIM10_Init();
 8000d24:	f000 f900 	bl	8000f28 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d28:	f002 fba6 	bl	8003478 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of ADCTimer */
  ADCTimerHandle = osTimerNew(Callback01, osTimerPeriodic, NULL, &ADCTimer_attributes);
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <main+0x5c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2101      	movs	r1, #1
 8000d32:	480f      	ldr	r0, [pc, #60]	; (8000d70 <main+0x60>)
 8000d34:	f002 fcac 	bl	8003690 <osTimerNew>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <main+0x64>)
 8000d3c:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of BestQueue */
  BestQueueHandle = osMessageQueueNew (16, sizeof(AdcVals_t), &BestQueue_attributes);
 8000d3e:	4a0e      	ldr	r2, [pc, #56]	; (8000d78 <main+0x68>)
 8000d40:	2104      	movs	r1, #4
 8000d42:	2010      	movs	r0, #16
 8000d44:	f002 fd20 	bl	8003788 <osMessageQueueNew>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	4a0c      	ldr	r2, [pc, #48]	; (8000d7c <main+0x6c>)
 8000d4c:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Start_IT(&htim10);
 8000d4e:	480c      	ldr	r0, [pc, #48]	; (8000d80 <main+0x70>)
 8000d50:	f002 f8fa 	bl	8002f48 <HAL_TIM_Base_Start_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_A */
  Task_AHandle = osThreadNew(StartTask_A, NULL, &Task_A_attributes);
 8000d54:	4a0b      	ldr	r2, [pc, #44]	; (8000d84 <main+0x74>)
 8000d56:	2100      	movs	r1, #0
 8000d58:	480b      	ldr	r0, [pc, #44]	; (8000d88 <main+0x78>)
 8000d5a:	f002 fbd7 	bl	800350c <osThreadNew>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <main+0x7c>)
 8000d62:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d64:	f002 fbac 	bl	80034c0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <main+0x58>
 8000d6a:	bf00      	nop
 8000d6c:	08006914 	.word	0x08006914
 8000d70:	080013f9 	.word	0x080013f9
 8000d74:	20000128 	.word	0x20000128
 8000d78:	080068fc 	.word	0x080068fc
 8000d7c:	20000124 	.word	0x20000124
 8000d80:	200000d8 	.word	0x200000d8
 8000d84:	080068d8 	.word	0x080068d8
 8000d88:	0800136d 	.word	0x0800136d
 8000d8c:	20000120 	.word	0x20000120

08000d90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b094      	sub	sp, #80	; 0x50
 8000d94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d96:	f107 0320 	add.w	r3, r7, #32
 8000d9a:	2230      	movs	r2, #48	; 0x30
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f005 fca8 	bl	80066f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db4:	2300      	movs	r3, #0
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	4b28      	ldr	r3, [pc, #160]	; (8000e5c <SystemClock_Config+0xcc>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	4a27      	ldr	r2, [pc, #156]	; (8000e5c <SystemClock_Config+0xcc>)
 8000dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc4:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <SystemClock_Config+0xcc>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	4b22      	ldr	r3, [pc, #136]	; (8000e60 <SystemClock_Config+0xd0>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a21      	ldr	r2, [pc, #132]	; (8000e60 <SystemClock_Config+0xd0>)
 8000dda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <SystemClock_Config+0xd0>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dec:	2301      	movs	r3, #1
 8000dee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000df0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df6:	2302      	movs	r3, #2
 8000df8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dfa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e00:	2304      	movs	r3, #4
 8000e02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e04:	23a8      	movs	r3, #168	; 0xa8
 8000e06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e0c:	2307      	movs	r3, #7
 8000e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e10:	f107 0320 	add.w	r3, r7, #32
 8000e14:	4618      	mov	r0, r3
 8000e16:	f001 fb91 	bl	800253c <HAL_RCC_OscConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e20:	f000 fb66 	bl	80014f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e24:	230f      	movs	r3, #15
 8000e26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e30:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e3c:	f107 030c 	add.w	r3, r7, #12
 8000e40:	2105      	movs	r1, #5
 8000e42:	4618      	mov	r0, r3
 8000e44:	f001 fdf2 	bl	8002a2c <HAL_RCC_ClockConfig>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e4e:	f000 fb4f 	bl	80014f0 <Error_Handler>
  }
}
 8000e52:	bf00      	nop
 8000e54:	3750      	adds	r7, #80	; 0x50
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40007000 	.word	0x40007000

08000e64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e76:	4b29      	ldr	r3, [pc, #164]	; (8000f1c <MX_ADC1_Init+0xb8>)
 8000e78:	4a29      	ldr	r2, [pc, #164]	; (8000f20 <MX_ADC1_Init+0xbc>)
 8000e7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e7c:	4b27      	ldr	r3, [pc, #156]	; (8000f1c <MX_ADC1_Init+0xb8>)
 8000e7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e84:	4b25      	ldr	r3, [pc, #148]	; (8000f1c <MX_ADC1_Init+0xb8>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e8a:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <MX_ADC1_Init+0xb8>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e90:	4b22      	ldr	r3, [pc, #136]	; (8000f1c <MX_ADC1_Init+0xb8>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e96:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <MX_ADC1_Init+0xb8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e9e:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <MX_ADC1_Init+0xb8>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <MX_ADC1_Init+0xb8>)
 8000ea6:	4a1f      	ldr	r2, [pc, #124]	; (8000f24 <MX_ADC1_Init+0xc0>)
 8000ea8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eaa:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <MX_ADC1_Init+0xb8>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <MX_ADC1_Init+0xb8>)
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eb6:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <MX_ADC1_Init+0xb8>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ebe:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <MX_ADC1_Init+0xb8>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ec4:	4815      	ldr	r0, [pc, #84]	; (8000f1c <MX_ADC1_Init+0xb8>)
 8000ec6:	f000 fcd5 	bl	8001874 <HAL_ADC_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ed0:	f000 fb0e 	bl	80014f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000edc:	2303      	movs	r3, #3
 8000ede:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	480d      	ldr	r0, [pc, #52]	; (8000f1c <MX_ADC1_Init+0xb8>)
 8000ee6:	f000 fe73 	bl	8001bd0 <HAL_ADC_ConfigChannel>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ef0:	f000 fafe 	bl	80014f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000ef4:	2310      	movs	r3, #16
 8000ef6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000efc:	2307      	movs	r3, #7
 8000efe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f00:	463b      	mov	r3, r7
 8000f02:	4619      	mov	r1, r3
 8000f04:	4805      	ldr	r0, [pc, #20]	; (8000f1c <MX_ADC1_Init+0xb8>)
 8000f06:	f000 fe63 	bl	8001bd0 <HAL_ADC_ConfigChannel>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000f10:	f000 faee 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000090 	.word	0x20000090
 8000f20:	40012000 	.word	0x40012000
 8000f24:	0f000001 	.word	0x0f000001

08000f28 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_TIM10_Init+0x40>)
 8000f2e:	4a0f      	ldr	r2, [pc, #60]	; (8000f6c <MX_TIM10_Init+0x44>)
 8000f30:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 60000;
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <MX_TIM10_Init+0x40>)
 8000f34:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000f38:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <MX_TIM10_Init+0x40>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 732;
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_TIM10_Init+0x40>)
 8000f42:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8000f46:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <MX_TIM10_Init+0x40>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_TIM10_Init+0x40>)
 8000f50:	2280      	movs	r2, #128	; 0x80
 8000f52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <MX_TIM10_Init+0x40>)
 8000f56:	f001 ffa7 	bl	8002ea8 <HAL_TIM_Base_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000f60:	f000 fac6 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	200000d8 	.word	0x200000d8
 8000f6c:	40014400 	.word	0x40014400

08000f70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08c      	sub	sp, #48	; 0x30
 8000f74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f76:	f107 031c 	add.w	r3, r7, #28
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
 8000f84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	61bb      	str	r3, [r7, #24]
 8000f8a:	4ba2      	ldr	r3, [pc, #648]	; (8001214 <MX_GPIO_Init+0x2a4>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4aa1      	ldr	r2, [pc, #644]	; (8001214 <MX_GPIO_Init+0x2a4>)
 8000f90:	f043 0310 	orr.w	r3, r3, #16
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b9f      	ldr	r3, [pc, #636]	; (8001214 <MX_GPIO_Init+0x2a4>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0310 	and.w	r3, r3, #16
 8000f9e:	61bb      	str	r3, [r7, #24]
 8000fa0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
 8000fa6:	4b9b      	ldr	r3, [pc, #620]	; (8001214 <MX_GPIO_Init+0x2a4>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a9a      	ldr	r2, [pc, #616]	; (8001214 <MX_GPIO_Init+0x2a4>)
 8000fac:	f043 0304 	orr.w	r3, r3, #4
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b98      	ldr	r3, [pc, #608]	; (8001214 <MX_GPIO_Init+0x2a4>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	4b94      	ldr	r3, [pc, #592]	; (8001214 <MX_GPIO_Init+0x2a4>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a93      	ldr	r2, [pc, #588]	; (8001214 <MX_GPIO_Init+0x2a4>)
 8000fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b91      	ldr	r3, [pc, #580]	; (8001214 <MX_GPIO_Init+0x2a4>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	4b8d      	ldr	r3, [pc, #564]	; (8001214 <MX_GPIO_Init+0x2a4>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a8c      	ldr	r2, [pc, #560]	; (8001214 <MX_GPIO_Init+0x2a4>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b8a      	ldr	r3, [pc, #552]	; (8001214 <MX_GPIO_Init+0x2a4>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	4b86      	ldr	r3, [pc, #536]	; (8001214 <MX_GPIO_Init+0x2a4>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a85      	ldr	r2, [pc, #532]	; (8001214 <MX_GPIO_Init+0x2a4>)
 8001000:	f043 0302 	orr.w	r3, r3, #2
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b83      	ldr	r3, [pc, #524]	; (8001214 <MX_GPIO_Init+0x2a4>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	4b7f      	ldr	r3, [pc, #508]	; (8001214 <MX_GPIO_Init+0x2a4>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a7e      	ldr	r2, [pc, #504]	; (8001214 <MX_GPIO_Init+0x2a4>)
 800101c:	f043 0308 	orr.w	r3, r3, #8
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b7c      	ldr	r3, [pc, #496]	; (8001214 <MX_GPIO_Init+0x2a4>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0308 	and.w	r3, r3, #8
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	2108      	movs	r1, #8
 8001032:	4879      	ldr	r0, [pc, #484]	; (8001218 <MX_GPIO_Init+0x2a8>)
 8001034:	f001 fa68 	bl	8002508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2101      	movs	r1, #1
 800103c:	4877      	ldr	r0, [pc, #476]	; (800121c <MX_GPIO_Init+0x2ac>)
 800103e:	f001 fa63 	bl	8002508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001042:	2200      	movs	r2, #0
 8001044:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001048:	4875      	ldr	r0, [pc, #468]	; (8001220 <MX_GPIO_Init+0x2b0>)
 800104a:	f001 fa5d 	bl	8002508 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800104e:	2308      	movs	r3, #8
 8001050:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	2301      	movs	r3, #1
 8001054:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800105e:	f107 031c 	add.w	r3, r7, #28
 8001062:	4619      	mov	r1, r3
 8001064:	486c      	ldr	r0, [pc, #432]	; (8001218 <MX_GPIO_Init+0x2a8>)
 8001066:	f001 f8b3 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800106a:	2301      	movs	r3, #1
 800106c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106e:	2301      	movs	r3, #1
 8001070:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	4619      	mov	r1, r3
 8001080:	4866      	ldr	r0, [pc, #408]	; (800121c <MX_GPIO_Init+0x2ac>)
 8001082:	f001 f8a5 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001086:	2308      	movs	r3, #8
 8001088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001096:	2305      	movs	r3, #5
 8001098:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800109a:	f107 031c 	add.w	r3, r7, #28
 800109e:	4619      	mov	r1, r3
 80010a0:	485e      	ldr	r0, [pc, #376]	; (800121c <MX_GPIO_Init+0x2ac>)
 80010a2:	f001 f895 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010a6:	2301      	movs	r3, #1
 80010a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	4619      	mov	r1, r3
 80010ba:	485a      	ldr	r0, [pc, #360]	; (8001224 <MX_GPIO_Init+0x2b4>)
 80010bc:	f001 f888 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80010c0:	2310      	movs	r3, #16
 80010c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010d0:	2306      	movs	r3, #6
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80010d4:	f107 031c 	add.w	r3, r7, #28
 80010d8:	4619      	mov	r1, r3
 80010da:	4852      	ldr	r0, [pc, #328]	; (8001224 <MX_GPIO_Init+0x2b4>)
 80010dc:	f001 f878 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80010e0:	23e0      	movs	r3, #224	; 0xe0
 80010e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010f0:	2305      	movs	r3, #5
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	4619      	mov	r1, r3
 80010fa:	484a      	ldr	r0, [pc, #296]	; (8001224 <MX_GPIO_Init+0x2b4>)
 80010fc:	f001 f868 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001100:	2304      	movs	r3, #4
 8001102:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	4619      	mov	r1, r3
 8001112:	4845      	ldr	r0, [pc, #276]	; (8001228 <MX_GPIO_Init+0x2b8>)
 8001114:	f001 f85c 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001118:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800111c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2300      	movs	r3, #0
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800112a:	2305      	movs	r3, #5
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	4619      	mov	r1, r3
 8001134:	483c      	ldr	r0, [pc, #240]	; (8001228 <MX_GPIO_Init+0x2b8>)
 8001136:	f001 f84b 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800113a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800113e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001140:	2301      	movs	r3, #1
 8001142:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800114c:	f107 031c 	add.w	r3, r7, #28
 8001150:	4619      	mov	r1, r3
 8001152:	4833      	ldr	r0, [pc, #204]	; (8001220 <MX_GPIO_Init+0x2b0>)
 8001154:	f001 f83c 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001158:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800115c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800116a:	2306      	movs	r3, #6
 800116c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	4619      	mov	r1, r3
 8001174:	4829      	ldr	r0, [pc, #164]	; (800121c <MX_GPIO_Init+0x2ac>)
 8001176:	f001 f82b 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800117a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800117e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	4619      	mov	r1, r3
 800118e:	4825      	ldr	r0, [pc, #148]	; (8001224 <MX_GPIO_Init+0x2b4>)
 8001190:	f001 f81e 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001194:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011a6:	230a      	movs	r3, #10
 80011a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011aa:	f107 031c 	add.w	r3, r7, #28
 80011ae:	4619      	mov	r1, r3
 80011b0:	481c      	ldr	r0, [pc, #112]	; (8001224 <MX_GPIO_Init+0x2b4>)
 80011b2:	f001 f80d 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80011b6:	2320      	movs	r3, #32
 80011b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ba:	2300      	movs	r3, #0
 80011bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	4619      	mov	r1, r3
 80011c8:	4815      	ldr	r0, [pc, #84]	; (8001220 <MX_GPIO_Init+0x2b0>)
 80011ca:	f001 f801 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80011ce:	f44f 7310 	mov.w	r3, #576	; 0x240
 80011d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d4:	2312      	movs	r3, #18
 80011d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011e0:	2304      	movs	r3, #4
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4619      	mov	r1, r3
 80011ea:	480f      	ldr	r0, [pc, #60]	; (8001228 <MX_GPIO_Init+0x2b8>)
 80011ec:	f000 fff0 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80011f0:	2302      	movs	r3, #2
 80011f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011f4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80011f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	4619      	mov	r1, r3
 8001204:	4804      	ldr	r0, [pc, #16]	; (8001218 <MX_GPIO_Init+0x2a8>)
 8001206:	f000 ffe3 	bl	80021d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800120a:	bf00      	nop
 800120c:	3730      	adds	r7, #48	; 0x30
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800
 8001218:	40021000 	.word	0x40021000
 800121c:	40020800 	.word	0x40020800
 8001220:	40020c00 	.word	0x40020c00
 8001224:	40020000 	.word	0x40020000
 8001228:	40020400 	.word	0x40020400

0800122c <AverageTempCalculate>:

/* USER CODE BEGIN 4 */
void AverageTempCalculate(Temp_t* temp)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	uint8_t i;
	temp->avg = 0;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	for(i = 0; i < 32; i++)
 800123e:	2300      	movs	r3, #0
 8001240:	73fb      	strb	r3, [r7, #15]
 8001242:	e01b      	b.n	800127c <AverageTempCalculate+0x50>
	{
		if(temp->buff[i] == 0) break;
 8001244:	7bfb      	ldrb	r3, [r7, #15]
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	edd3 7a00 	vldr	s15, [r3]
 8001250:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001258:	d014      	beq.n	8001284 <AverageTempCalculate+0x58>
		temp->avg += temp->buff[i];
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	edd3 7a00 	vldr	s15, [r3]
 800126c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	for(i = 0; i < 32; i++)
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	3301      	adds	r3, #1
 800127a:	73fb      	strb	r3, [r7, #15]
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	2b1f      	cmp	r3, #31
 8001280:	d9e0      	bls.n	8001244 <AverageTempCalculate+0x18>
 8001282:	e000      	b.n	8001286 <AverageTempCalculate+0x5a>
		if(temp->buff[i] == 0) break;
 8001284:	bf00      	nop
	}

	temp->avg /= i;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	ee07 3a90 	vmov	s15, r3
 8001292:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	0000      	movs	r0, r0
	...

080012b0 <TempCalculate>:

float TempCalculate(uint16_t ADC_value)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	80fb      	strh	r3, [r7, #6]
	float temp = ((((ADC_value * V_REFF / 4095 - V25) / AVG_SLOP) + 25)/2);
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f8d9 	bl	8000474 <__aeabi_i2d>
 80012c2:	a322      	add	r3, pc, #136	; (adr r3, 800134c <TempCalculate+0x9c>)
 80012c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c8:	f7ff f93e 	bl	8000548 <__aeabi_dmul>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	a31f      	add	r3, pc, #124	; (adr r3, 8001354 <TempCalculate+0xa4>)
 80012d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012da:	f7ff fa5f 	bl	800079c <__aeabi_ddiv>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4610      	mov	r0, r2
 80012e4:	4619      	mov	r1, r3
 80012e6:	a31d      	add	r3, pc, #116	; (adr r3, 800135c <TempCalculate+0xac>)
 80012e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ec:	f7fe ff74 	bl	80001d8 <__aeabi_dsub>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	a31a      	add	r3, pc, #104	; (adr r3, 8001364 <TempCalculate+0xb4>)
 80012fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fe:	f7ff fa4d 	bl	800079c <__aeabi_ddiv>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4610      	mov	r0, r2
 8001308:	4619      	mov	r1, r3
 800130a:	f04f 0200 	mov.w	r2, #0
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <TempCalculate+0x98>)
 8001310:	f7fe ff64 	bl	80001dc <__adddf3>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4610      	mov	r0, r2
 800131a:	4619      	mov	r1, r3
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001324:	f7ff fa3a 	bl	800079c <__aeabi_ddiv>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	f7ff fb1c 	bl	800096c <__aeabi_d2f>
 8001334:	4603      	mov	r3, r0
 8001336:	60fb      	str	r3, [r7, #12]

	return temp;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	ee07 3a90 	vmov	s15, r3

}
 800133e:	eeb0 0a67 	vmov.f32	s0, s15
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40390000 	.word	0x40390000
 800134c:	66666666 	.word	0x66666666
 8001350:	400a6666 	.word	0x400a6666
 8001354:	00000000 	.word	0x00000000
 8001358:	40affe00 	.word	0x40affe00
 800135c:	851eb852 	.word	0x851eb852
 8001360:	3fe851eb 	.word	0x3fe851eb
 8001364:	47ae147b 	.word	0x47ae147b
 8001368:	3f647ae1 	.word	0x3f647ae1

0800136c <StartTask_A>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask_A */
void StartTask_A(void *argument)
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b0a7      	sub	sp, #156	; 0x9c
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	AdcVals_t raw;
	Temp_t temp = {0};
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	2288      	movs	r2, #136	; 0x88
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f005 f9b9 	bl	80066f4 <memset>

	/* Infinite loop */

	for(;;)
	{
		  if(osMessageQueueGetCount(BestQueueHandle)) {
 8001382:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <StartTask_A+0x88>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f002 fb30 	bl	80039ec <osMessageQueueGetCount>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d02c      	beq.n	80013ec <StartTask_A+0x80>

			  if(osMessageQueueGet(BestQueueHandle, (void*)&raw, 0, 0) != osOK) Error_Handler();
 8001392:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <StartTask_A+0x88>)
 8001394:	6818      	ldr	r0, [r3, #0]
 8001396:	f107 0194 	add.w	r1, r7, #148	; 0x94
 800139a:	2300      	movs	r3, #0
 800139c:	2200      	movs	r2, #0
 800139e:	f002 fac7 	bl	8003930 <osMessageQueueGet>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <StartTask_A+0x40>
 80013a8:	f000 f8a2 	bl	80014f0 <Error_Handler>

			  if(temp.count == 31) temp.count = 0;
 80013ac:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80013b0:	2b1f      	cmp	r3, #31
 80013b2:	d102      	bne.n	80013ba <StartTask_A+0x4e>
 80013b4:	2300      	movs	r3, #0
 80013b6:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
			  temp.buff[temp.count++] = TempCalculate(raw.temp);
 80013ba:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80013be:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80013c2:	1c59      	adds	r1, r3, #1
 80013c4:	b2c9      	uxtb	r1, r1
 80013c6:	f887 108c 	strb.w	r1, [r7, #140]	; 0x8c
 80013ca:	461c      	mov	r4, r3
 80013cc:	4610      	mov	r0, r2
 80013ce:	f7ff ff6f 	bl	80012b0 <TempCalculate>
 80013d2:	eef0 7a40 	vmov.f32	s15, s0
 80013d6:	00a3      	lsls	r3, r4, #2
 80013d8:	3398      	adds	r3, #152	; 0x98
 80013da:	443b      	add	r3, r7
 80013dc:	3b8c      	subs	r3, #140	; 0x8c
 80013de:	edc3 7a00 	vstr	s15, [r3]
			  AverageTempCalculate(&temp);
 80013e2:	f107 030c 	add.w	r3, r7, #12
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ff20 	bl	800122c <AverageTempCalculate>
		  }

	  osDelay(1);
 80013ec:	2001      	movs	r0, #1
 80013ee:	f002 f91f 	bl	8003630 <osDelay>
		  if(osMessageQueueGetCount(BestQueueHandle)) {
 80013f2:	e7c6      	b.n	8001382 <StartTask_A+0x16>
 80013f4:	20000124 	.word	0x20000124

080013f8 <Callback01>:
  /* USER CODE END 5 */
}

/* Callback01 function */
void Callback01(void *argument)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
//	HAL_ADC_PollForConversion(&hadc1, 500);
//	adc_vals.temp = HAL_ADC_GetValue(&hadc1);
//
//	if(osMessageQueuePut(BestQueueHandle, (void*)&adc_vals, 0, 0) != osOK) Error_Handler();
  /* USER CODE END Callback01 */
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a2e      	ldr	r2, [pc, #184]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d102      	bne.n	8001424 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 800141e:	f000 fa09 	bl	8001834 <HAL_IncTick>
//	        HAL_TIM_Base_Start_IT(&htim10);
	    	}
	    }
  }
  /* USER CODE END Callback 1 */
}
 8001422:	e053      	b.n	80014cc <HAL_TIM_PeriodElapsedCallback+0xc0>
  else if(htim->Instance == TIM10)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a2b      	ldr	r2, [pc, #172]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d14e      	bne.n	80014cc <HAL_TIM_PeriodElapsedCallback+0xc0>
	  HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 800142e:	2201      	movs	r2, #1
 8001430:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001434:	4829      	ldr	r0, [pc, #164]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001436:	f001 f867 	bl	8002508 <HAL_GPIO_WritePin>
	  if (adc_conversion_in_progress == 0) {
 800143a:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d105      	bne.n	800144e <HAL_TIM_PeriodElapsedCallback+0x42>
	    	HAL_ADC_Start(&hadc1);
 8001442:	4828      	ldr	r0, [pc, #160]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001444:	f000 fa5a 	bl	80018fc <HAL_ADC_Start>
	    	adc_conversion_in_progress = 1;
 8001448:	4b25      	ldr	r3, [pc, #148]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800144a:	2201      	movs	r2, #1
 800144c:	701a      	strb	r2, [r3, #0]
	    }  if (adc_conversion_in_progress == 1) {
 800144e:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d113      	bne.n	800147e <HAL_TIM_PeriodElapsedCallback+0x72>
	    	if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 8001456:	2164      	movs	r1, #100	; 0x64
 8001458:	4822      	ldr	r0, [pc, #136]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800145a:	f000 fb21 	bl	8001aa0 <HAL_ADC_PollForConversion>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d10c      	bne.n	800147e <HAL_TIM_PeriodElapsedCallback+0x72>
	    	        adc_vals.volt = HAL_ADC_GetValue(&hadc1);
 8001464:	481f      	ldr	r0, [pc, #124]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001466:	f000 fba6 	bl	8001bb6 <HAL_ADC_GetValue>
 800146a:	4603      	mov	r3, r0
 800146c:	b29a      	uxth	r2, r3
 800146e:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001470:	801a      	strh	r2, [r3, #0]
	    	         HAL_ADC_Start(&hadc1);
 8001472:	481c      	ldr	r0, [pc, #112]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001474:	f000 fa42 	bl	80018fc <HAL_ADC_Start>
	    	         adc_conversion_in_progress = 2;
 8001478:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800147a:	2202      	movs	r2, #2
 800147c:	701a      	strb	r2, [r3, #0]
	    }  if (adc_conversion_in_progress == 2) {
 800147e:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b02      	cmp	r3, #2
 8001484:	d122      	bne.n	80014cc <HAL_TIM_PeriodElapsedCallback+0xc0>
	    	if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 8001486:	2164      	movs	r1, #100	; 0x64
 8001488:	4816      	ldr	r0, [pc, #88]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800148a:	f000 fb09 	bl	8001aa0 <HAL_ADC_PollForConversion>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d11b      	bne.n	80014cc <HAL_TIM_PeriodElapsedCallback+0xc0>
	    	        adc_vals.temp = HAL_ADC_GetValue(&hadc1);
 8001494:	4813      	ldr	r0, [pc, #76]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001496:	f000 fb8e 	bl	8001bb6 <HAL_ADC_GetValue>
 800149a:	4603      	mov	r3, r0
 800149c:	b29a      	uxth	r2, r3
 800149e:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80014a0:	805a      	strh	r2, [r3, #2]
	    	        adc_conversion_in_progress = 0;
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
	    	if(osMessageQueuePut(BestQueueHandle, &adc_vals, 0, 0) != osOK){
 80014a8:	4b10      	ldr	r3, [pc, #64]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80014aa:	6818      	ldr	r0, [r3, #0]
 80014ac:	2300      	movs	r3, #0
 80014ae:	2200      	movs	r2, #0
 80014b0:	490d      	ldr	r1, [pc, #52]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80014b2:	f002 f9dd 	bl	8003870 <osMessageQueuePut>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <HAL_TIM_PeriodElapsedCallback+0xb4>
	    		Error_Handler();
 80014bc:	f000 f818 	bl	80014f0 <Error_Handler>
	        HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 80014c0:	2200      	movs	r2, #0
 80014c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014c6:	4805      	ldr	r0, [pc, #20]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80014c8:	f001 f81e 	bl	8002508 <HAL_GPIO_WritePin>
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40000400 	.word	0x40000400
 80014d8:	40014400 	.word	0x40014400
 80014dc:	40020c00 	.word	0x40020c00
 80014e0:	2000012c 	.word	0x2000012c
 80014e4:	20000090 	.word	0x20000090
 80014e8:	20000130 	.word	0x20000130
 80014ec:	20000124 	.word	0x20000124

080014f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f4:	b672      	cpsid	i
}
 80014f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <Error_Handler+0x8>
	...

080014fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_MspInit+0x54>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	4a11      	ldr	r2, [pc, #68]	; (8001550 <HAL_MspInit+0x54>)
 800150c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001510:	6453      	str	r3, [r2, #68]	; 0x44
 8001512:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <HAL_MspInit+0x54>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	603b      	str	r3, [r7, #0]
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <HAL_MspInit+0x54>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <HAL_MspInit+0x54>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152c:	6413      	str	r3, [r2, #64]	; 0x40
 800152e:	4b08      	ldr	r3, [pc, #32]	; (8001550 <HAL_MspInit+0x54>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	210f      	movs	r1, #15
 800153e:	f06f 0001 	mvn.w	r0, #1
 8001542:	f000 fe1b 	bl	800217c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40023800 	.word	0x40023800

08001554 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a17      	ldr	r2, [pc, #92]	; (80015d0 <HAL_ADC_MspInit+0x7c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d127      	bne.n	80015c6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <HAL_ADC_MspInit+0x80>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	4a15      	ldr	r2, [pc, #84]	; (80015d4 <HAL_ADC_MspInit+0x80>)
 8001580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001584:	6453      	str	r3, [r2, #68]	; 0x44
 8001586:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <HAL_ADC_MspInit+0x80>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <HAL_ADC_MspInit+0x80>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <HAL_ADC_MspInit+0x80>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <HAL_ADC_MspInit+0x80>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015ae:	2302      	movs	r3, #2
 80015b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b2:	2303      	movs	r3, #3
 80015b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4619      	mov	r1, r3
 80015c0:	4805      	ldr	r0, [pc, #20]	; (80015d8 <HAL_ADC_MspInit+0x84>)
 80015c2:	f000 fe05 	bl	80021d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015c6:	bf00      	nop
 80015c8:	3728      	adds	r7, #40	; 0x28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40012000 	.word	0x40012000
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40020000 	.word	0x40020000

080015dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a0e      	ldr	r2, [pc, #56]	; (8001624 <HAL_TIM_Base_MspInit+0x48>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d115      	bne.n	800161a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <HAL_TIM_Base_MspInit+0x4c>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f6:	4a0c      	ldr	r2, [pc, #48]	; (8001628 <HAL_TIM_Base_MspInit+0x4c>)
 80015f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015fc:	6453      	str	r3, [r2, #68]	; 0x44
 80015fe:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <HAL_TIM_Base_MspInit+0x4c>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2105      	movs	r1, #5
 800160e:	2019      	movs	r0, #25
 8001610:	f000 fdb4 	bl	800217c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001614:	2019      	movs	r0, #25
 8001616:	f000 fdcd 	bl	80021b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40014400 	.word	0x40014400
 8001628:	40023800 	.word	0x40023800

0800162c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08e      	sub	sp, #56	; 0x38
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800163c:	2300      	movs	r3, #0
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	4b33      	ldr	r3, [pc, #204]	; (8001710 <HAL_InitTick+0xe4>)
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	4a32      	ldr	r2, [pc, #200]	; (8001710 <HAL_InitTick+0xe4>)
 8001646:	f043 0302 	orr.w	r3, r3, #2
 800164a:	6413      	str	r3, [r2, #64]	; 0x40
 800164c:	4b30      	ldr	r3, [pc, #192]	; (8001710 <HAL_InitTick+0xe4>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001658:	f107 0210 	add.w	r2, r7, #16
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	4611      	mov	r1, r2
 8001662:	4618      	mov	r0, r3
 8001664:	f001 fbee 	bl	8002e44 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001668:	6a3b      	ldr	r3, [r7, #32]
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800166c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800166e:	2b00      	cmp	r3, #0
 8001670:	d103      	bne.n	800167a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001672:	f001 fbd3 	bl	8002e1c <HAL_RCC_GetPCLK1Freq>
 8001676:	6378      	str	r0, [r7, #52]	; 0x34
 8001678:	e004      	b.n	8001684 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800167a:	f001 fbcf 	bl	8002e1c <HAL_RCC_GetPCLK1Freq>
 800167e:	4603      	mov	r3, r0
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001686:	4a23      	ldr	r2, [pc, #140]	; (8001714 <HAL_InitTick+0xe8>)
 8001688:	fba2 2303 	umull	r2, r3, r2, r3
 800168c:	0c9b      	lsrs	r3, r3, #18
 800168e:	3b01      	subs	r3, #1
 8001690:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001692:	4b21      	ldr	r3, [pc, #132]	; (8001718 <HAL_InitTick+0xec>)
 8001694:	4a21      	ldr	r2, [pc, #132]	; (800171c <HAL_InitTick+0xf0>)
 8001696:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001698:	4b1f      	ldr	r3, [pc, #124]	; (8001718 <HAL_InitTick+0xec>)
 800169a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800169e:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80016a0:	4a1d      	ldr	r2, [pc, #116]	; (8001718 <HAL_InitTick+0xec>)
 80016a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a4:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80016a6:	4b1c      	ldr	r3, [pc, #112]	; (8001718 <HAL_InitTick+0xec>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ac:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <HAL_InitTick+0xec>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b2:	4b19      	ldr	r3, [pc, #100]	; (8001718 <HAL_InitTick+0xec>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80016b8:	4817      	ldr	r0, [pc, #92]	; (8001718 <HAL_InitTick+0xec>)
 80016ba:	f001 fbf5 	bl	8002ea8 <HAL_TIM_Base_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80016c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d11b      	bne.n	8001704 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80016cc:	4812      	ldr	r0, [pc, #72]	; (8001718 <HAL_InitTick+0xec>)
 80016ce:	f001 fc3b 	bl	8002f48 <HAL_TIM_Base_Start_IT>
 80016d2:	4603      	mov	r3, r0
 80016d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80016d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d111      	bne.n	8001704 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016e0:	201d      	movs	r0, #29
 80016e2:	f000 fd67 	bl	80021b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b0f      	cmp	r3, #15
 80016ea:	d808      	bhi.n	80016fe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80016ec:	2200      	movs	r2, #0
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	201d      	movs	r0, #29
 80016f2:	f000 fd43 	bl	800217c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016f6:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <HAL_InitTick+0xf4>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6013      	str	r3, [r2, #0]
 80016fc:	e002      	b.n	8001704 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001704:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001708:	4618      	mov	r0, r3
 800170a:	3738      	adds	r7, #56	; 0x38
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40023800 	.word	0x40023800
 8001714:	431bde83 	.word	0x431bde83
 8001718:	20000134 	.word	0x20000134
 800171c:	40000400 	.word	0x40000400
 8001720:	20000004 	.word	0x20000004

08001724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <NMI_Handler+0x4>

0800172a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172e:	e7fe      	b.n	800172e <HardFault_Handler+0x4>

08001730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <MemManage_Handler+0x4>

08001736 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800173a:	e7fe      	b.n	800173a <BusFault_Handler+0x4>

0800173c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <UsageFault_Handler+0x4>

08001742 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001756:	f001 fc67 	bl	8003028 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200000d8 	.word	0x200000d8

08001764 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <TIM3_IRQHandler+0x10>)
 800176a:	f001 fc5d 	bl	8003028 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000134 	.word	0x20000134

08001778 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <SystemInit+0x20>)
 800177e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001782:	4a05      	ldr	r2, [pc, #20]	; (8001798 <SystemInit+0x20>)
 8001784:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001788:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800179c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017a0:	480d      	ldr	r0, [pc, #52]	; (80017d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017a2:	490e      	ldr	r1, [pc, #56]	; (80017dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017a4:	4a0e      	ldr	r2, [pc, #56]	; (80017e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a8:	e002      	b.n	80017b0 <LoopCopyDataInit>

080017aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ae:	3304      	adds	r3, #4

080017b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b4:	d3f9      	bcc.n	80017aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b6:	4a0b      	ldr	r2, [pc, #44]	; (80017e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017b8:	4c0b      	ldr	r4, [pc, #44]	; (80017e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017bc:	e001      	b.n	80017c2 <LoopFillZerobss>

080017be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c0:	3204      	adds	r2, #4

080017c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c4:	d3fb      	bcc.n	80017be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017c6:	f7ff ffd7 	bl	8001778 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ca:	f004 ff5f 	bl	800668c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ce:	f7ff fa9f 	bl	8000d10 <main>
  bx  lr    
 80017d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017dc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80017e0:	080069ac 	.word	0x080069ac
  ldr r2, =_sbss
 80017e4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80017e8:	20004b98 	.word	0x20004b98

080017ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017ec:	e7fe      	b.n	80017ec <ADC_IRQHandler>
	...

080017f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017f4:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <HAL_Init+0x40>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a0d      	ldr	r2, [pc, #52]	; (8001830 <HAL_Init+0x40>)
 80017fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001800:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <HAL_Init+0x40>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <HAL_Init+0x40>)
 8001806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800180a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800180c:	4b08      	ldr	r3, [pc, #32]	; (8001830 <HAL_Init+0x40>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a07      	ldr	r2, [pc, #28]	; (8001830 <HAL_Init+0x40>)
 8001812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001816:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001818:	2003      	movs	r0, #3
 800181a:	f000 fca4 	bl	8002166 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800181e:	200f      	movs	r0, #15
 8001820:	f7ff ff04 	bl	800162c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001824:	f7ff fe6a 	bl	80014fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40023c00 	.word	0x40023c00

08001834 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HAL_IncTick+0x20>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	461a      	mov	r2, r3
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_IncTick+0x24>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4413      	add	r3, r2
 8001844:	4a04      	ldr	r2, [pc, #16]	; (8001858 <HAL_IncTick+0x24>)
 8001846:	6013      	str	r3, [r2, #0]
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	20000008 	.word	0x20000008
 8001858:	2000017c 	.word	0x2000017c

0800185c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return uwTick;
 8001860:	4b03      	ldr	r3, [pc, #12]	; (8001870 <HAL_GetTick+0x14>)
 8001862:	681b      	ldr	r3, [r3, #0]
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	2000017c 	.word	0x2000017c

08001874 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800187c:	2300      	movs	r3, #0
 800187e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e033      	b.n	80018f2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	2b00      	cmp	r3, #0
 8001890:	d109      	bne.n	80018a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff fe5e 	bl	8001554 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f003 0310 	and.w	r3, r3, #16
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d118      	bne.n	80018e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018ba:	f023 0302 	bic.w	r3, r3, #2
 80018be:	f043 0202 	orr.w	r2, r3, #2
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 faa4 	bl	8001e14 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	f023 0303 	bic.w	r3, r3, #3
 80018da:	f043 0201 	orr.w	r2, r3, #1
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	641a      	str	r2, [r3, #64]	; 0x40
 80018e2:	e001      	b.n	80018e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800190e:	2b01      	cmp	r3, #1
 8001910:	d101      	bne.n	8001916 <HAL_ADC_Start+0x1a>
 8001912:	2302      	movs	r3, #2
 8001914:	e0b2      	b.n	8001a7c <HAL_ADC_Start+0x180>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b01      	cmp	r3, #1
 800192a:	d018      	beq.n	800195e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f042 0201 	orr.w	r2, r2, #1
 800193a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800193c:	4b52      	ldr	r3, [pc, #328]	; (8001a88 <HAL_ADC_Start+0x18c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a52      	ldr	r2, [pc, #328]	; (8001a8c <HAL_ADC_Start+0x190>)
 8001942:	fba2 2303 	umull	r2, r3, r2, r3
 8001946:	0c9a      	lsrs	r2, r3, #18
 8001948:	4613      	mov	r3, r2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4413      	add	r3, r2
 800194e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001950:	e002      	b.n	8001958 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	3b01      	subs	r3, #1
 8001956:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f9      	bne.n	8001952 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b01      	cmp	r3, #1
 800196a:	d17a      	bne.n	8001a62 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001974:	f023 0301 	bic.w	r3, r3, #1
 8001978:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800198a:	2b00      	cmp	r3, #0
 800198c:	d007      	beq.n	800199e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001996:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019aa:	d106      	bne.n	80019ba <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b0:	f023 0206 	bic.w	r2, r3, #6
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	645a      	str	r2, [r3, #68]	; 0x44
 80019b8:	e002      	b.n	80019c0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019c8:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <HAL_ADC_Start+0x194>)
 80019ca:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80019d4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 031f 	and.w	r3, r3, #31
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d12a      	bne.n	8001a38 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a2b      	ldr	r2, [pc, #172]	; (8001a94 <HAL_ADC_Start+0x198>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d015      	beq.n	8001a18 <HAL_ADC_Start+0x11c>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a29      	ldr	r2, [pc, #164]	; (8001a98 <HAL_ADC_Start+0x19c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d105      	bne.n	8001a02 <HAL_ADC_Start+0x106>
 80019f6:	4b26      	ldr	r3, [pc, #152]	; (8001a90 <HAL_ADC_Start+0x194>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 031f 	and.w	r3, r3, #31
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00a      	beq.n	8001a18 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a25      	ldr	r2, [pc, #148]	; (8001a9c <HAL_ADC_Start+0x1a0>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d136      	bne.n	8001a7a <HAL_ADC_Start+0x17e>
 8001a0c:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <HAL_ADC_Start+0x194>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0310 	and.w	r3, r3, #16
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d130      	bne.n	8001a7a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d129      	bne.n	8001a7a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	e020      	b.n	8001a7a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a15      	ldr	r2, [pc, #84]	; (8001a94 <HAL_ADC_Start+0x198>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d11b      	bne.n	8001a7a <HAL_ADC_Start+0x17e>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d114      	bne.n	8001a7a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689a      	ldr	r2, [r3, #8]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	e00b      	b.n	8001a7a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f043 0210 	orr.w	r2, r3, #16
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	f043 0201 	orr.w	r2, r3, #1
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	20000000 	.word	0x20000000
 8001a8c:	431bde83 	.word	0x431bde83
 8001a90:	40012300 	.word	0x40012300
 8001a94:	40012000 	.word	0x40012000
 8001a98:	40012100 	.word	0x40012100
 8001a9c:	40012200 	.word	0x40012200

08001aa0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001abc:	d113      	bne.n	8001ae6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001acc:	d10b      	bne.n	8001ae6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f043 0220 	orr.w	r2, r3, #32
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e063      	b.n	8001bae <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001ae6:	f7ff feb9 	bl	800185c <HAL_GetTick>
 8001aea:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001aec:	e021      	b.n	8001b32 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af4:	d01d      	beq.n	8001b32 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d007      	beq.n	8001b0c <HAL_ADC_PollForConversion+0x6c>
 8001afc:	f7ff feae 	bl	800185c <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d212      	bcs.n	8001b32 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d00b      	beq.n	8001b32 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f043 0204 	orr.w	r2, r3, #4
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e03d      	b.n	8001bae <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d1d6      	bne.n	8001aee <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f06f 0212 	mvn.w	r2, #18
 8001b48:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d123      	bne.n	8001bac <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d11f      	bne.n	8001bac <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b72:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d006      	beq.n	8001b88 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d111      	bne.n	8001bac <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d105      	bne.n	8001bac <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	f043 0201 	orr.w	r2, r3, #1
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d101      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x1c>
 8001be8:	2302      	movs	r3, #2
 8001bea:	e105      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x228>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b09      	cmp	r3, #9
 8001bfa:	d925      	bls.n	8001c48 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68d9      	ldr	r1, [r3, #12]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	4413      	add	r3, r2
 8001c10:	3b1e      	subs	r3, #30
 8001c12:	2207      	movs	r2, #7
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43da      	mvns	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	400a      	ands	r2, r1
 8001c20:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68d9      	ldr	r1, [r3, #12]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	4618      	mov	r0, r3
 8001c34:	4603      	mov	r3, r0
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4403      	add	r3, r0
 8001c3a:	3b1e      	subs	r3, #30
 8001c3c:	409a      	lsls	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	e022      	b.n	8001c8e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6919      	ldr	r1, [r3, #16]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	461a      	mov	r2, r3
 8001c56:	4613      	mov	r3, r2
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	4413      	add	r3, r2
 8001c5c:	2207      	movs	r2, #7
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43da      	mvns	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	400a      	ands	r2, r1
 8001c6a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6919      	ldr	r1, [r3, #16]
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	4603      	mov	r3, r0
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	4403      	add	r3, r0
 8001c84:	409a      	lsls	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b06      	cmp	r3, #6
 8001c94:	d824      	bhi.n	8001ce0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3b05      	subs	r3, #5
 8001ca8:	221f      	movs	r2, #31
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	400a      	ands	r2, r1
 8001cb6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	3b05      	subs	r3, #5
 8001cd2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	635a      	str	r2, [r3, #52]	; 0x34
 8001cde:	e04c      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b0c      	cmp	r3, #12
 8001ce6:	d824      	bhi.n	8001d32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3b23      	subs	r3, #35	; 0x23
 8001cfa:	221f      	movs	r2, #31
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43da      	mvns	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	400a      	ands	r2, r1
 8001d08:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	4618      	mov	r0, r3
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	3b23      	subs	r3, #35	; 0x23
 8001d24:	fa00 f203 	lsl.w	r2, r0, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	631a      	str	r2, [r3, #48]	; 0x30
 8001d30:	e023      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	3b41      	subs	r3, #65	; 0x41
 8001d44:	221f      	movs	r2, #31
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	400a      	ands	r2, r1
 8001d52:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	4618      	mov	r0, r3
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3b41      	subs	r3, #65	; 0x41
 8001d6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d7a:	4b22      	ldr	r3, [pc, #136]	; (8001e04 <HAL_ADC_ConfigChannel+0x234>)
 8001d7c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a21      	ldr	r2, [pc, #132]	; (8001e08 <HAL_ADC_ConfigChannel+0x238>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d109      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x1cc>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b12      	cmp	r3, #18
 8001d8e:	d105      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a19      	ldr	r2, [pc, #100]	; (8001e08 <HAL_ADC_ConfigChannel+0x238>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d123      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x21e>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2b10      	cmp	r3, #16
 8001dac:	d003      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x1e6>
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2b11      	cmp	r3, #17
 8001db4:	d11b      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2b10      	cmp	r3, #16
 8001dc8:	d111      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <HAL_ADC_ConfigChannel+0x23c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a10      	ldr	r2, [pc, #64]	; (8001e10 <HAL_ADC_ConfigChannel+0x240>)
 8001dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd4:	0c9a      	lsrs	r2, r3, #18
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001de0:	e002      	b.n	8001de8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	3b01      	subs	r3, #1
 8001de6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f9      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	40012300 	.word	0x40012300
 8001e08:	40012000 	.word	0x40012000
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	431bde83 	.word	0x431bde83

08001e14 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e1c:	4b79      	ldr	r3, [pc, #484]	; (8002004 <ADC_Init+0x1f0>)
 8001e1e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	431a      	orrs	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6859      	ldr	r1, [r3, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	021a      	lsls	r2, r3, #8
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6859      	ldr	r1, [r3, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6899      	ldr	r1, [r3, #8]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea6:	4a58      	ldr	r2, [pc, #352]	; (8002008 <ADC_Init+0x1f4>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d022      	beq.n	8001ef2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001eba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6899      	ldr	r1, [r3, #8]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001edc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6899      	ldr	r1, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	e00f      	b.n	8001f12 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f10:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0202 	bic.w	r2, r2, #2
 8001f20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6899      	ldr	r1, [r3, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	7e1b      	ldrb	r3, [r3, #24]
 8001f2c:	005a      	lsls	r2, r3, #1
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d01b      	beq.n	8001f78 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f4e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6859      	ldr	r1, [r3, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	035a      	lsls	r2, r3, #13
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	e007      	b.n	8001f88 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f86:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	051a      	lsls	r2, r3, #20
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6899      	ldr	r1, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fca:	025a      	lsls	r2, r3, #9
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fe2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6899      	ldr	r1, [r3, #8]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	029a      	lsls	r2, r3, #10
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	609a      	str	r2, [r3, #8]
}
 8001ff8:	bf00      	nop
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	40012300 	.word	0x40012300
 8002008:	0f000001 	.word	0x0f000001

0800200c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800201c:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <__NVIC_SetPriorityGrouping+0x44>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002028:	4013      	ands	r3, r2
 800202a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800203c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800203e:	4a04      	ldr	r2, [pc, #16]	; (8002050 <__NVIC_SetPriorityGrouping+0x44>)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	60d3      	str	r3, [r2, #12]
}
 8002044:	bf00      	nop
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002058:	4b04      	ldr	r3, [pc, #16]	; (800206c <__NVIC_GetPriorityGrouping+0x18>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	0a1b      	lsrs	r3, r3, #8
 800205e:	f003 0307 	and.w	r3, r3, #7
}
 8002062:	4618      	mov	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	2b00      	cmp	r3, #0
 8002080:	db0b      	blt.n	800209a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	f003 021f 	and.w	r2, r3, #31
 8002088:	4907      	ldr	r1, [pc, #28]	; (80020a8 <__NVIC_EnableIRQ+0x38>)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	095b      	lsrs	r3, r3, #5
 8002090:	2001      	movs	r0, #1
 8002092:	fa00 f202 	lsl.w	r2, r0, r2
 8002096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000e100 	.word	0xe000e100

080020ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	6039      	str	r1, [r7, #0]
 80020b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	db0a      	blt.n	80020d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	490c      	ldr	r1, [pc, #48]	; (80020f8 <__NVIC_SetPriority+0x4c>)
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	0112      	lsls	r2, r2, #4
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	440b      	add	r3, r1
 80020d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d4:	e00a      	b.n	80020ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	4908      	ldr	r1, [pc, #32]	; (80020fc <__NVIC_SetPriority+0x50>)
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	3b04      	subs	r3, #4
 80020e4:	0112      	lsls	r2, r2, #4
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	440b      	add	r3, r1
 80020ea:	761a      	strb	r2, [r3, #24]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000e100 	.word	0xe000e100
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002100:	b480      	push	{r7}
 8002102:	b089      	sub	sp, #36	; 0x24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f1c3 0307 	rsb	r3, r3, #7
 800211a:	2b04      	cmp	r3, #4
 800211c:	bf28      	it	cs
 800211e:	2304      	movcs	r3, #4
 8002120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3304      	adds	r3, #4
 8002126:	2b06      	cmp	r3, #6
 8002128:	d902      	bls.n	8002130 <NVIC_EncodePriority+0x30>
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3b03      	subs	r3, #3
 800212e:	e000      	b.n	8002132 <NVIC_EncodePriority+0x32>
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002134:	f04f 32ff 	mov.w	r2, #4294967295
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43da      	mvns	r2, r3
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	401a      	ands	r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002148:	f04f 31ff 	mov.w	r1, #4294967295
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	fa01 f303 	lsl.w	r3, r1, r3
 8002152:	43d9      	mvns	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002158:	4313      	orrs	r3, r2
         );
}
 800215a:	4618      	mov	r0, r3
 800215c:	3724      	adds	r7, #36	; 0x24
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff ff4c 	bl	800200c <__NVIC_SetPriorityGrouping>
}
 8002174:	bf00      	nop
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
 8002188:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800218e:	f7ff ff61 	bl	8002054 <__NVIC_GetPriorityGrouping>
 8002192:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	68b9      	ldr	r1, [r7, #8]
 8002198:	6978      	ldr	r0, [r7, #20]
 800219a:	f7ff ffb1 	bl	8002100 <NVIC_EncodePriority>
 800219e:	4602      	mov	r2, r0
 80021a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021a4:	4611      	mov	r1, r2
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff ff80 	bl	80020ac <__NVIC_SetPriority>
}
 80021ac:	bf00      	nop
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff ff54 	bl	8002070 <__NVIC_EnableIRQ>
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b089      	sub	sp, #36	; 0x24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021de:	2300      	movs	r3, #0
 80021e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
 80021ea:	e16b      	b.n	80024c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021ec:	2201      	movs	r2, #1
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	4013      	ands	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	429a      	cmp	r2, r3
 8002206:	f040 815a 	bne.w	80024be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	2b01      	cmp	r3, #1
 8002214:	d005      	beq.n	8002222 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800221e:	2b02      	cmp	r3, #2
 8002220:	d130      	bne.n	8002284 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	2203      	movs	r2, #3
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4313      	orrs	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002258:	2201      	movs	r2, #1
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	091b      	lsrs	r3, r3, #4
 800226e:	f003 0201 	and.w	r2, r3, #1
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	2b03      	cmp	r3, #3
 800228e:	d017      	beq.n	80022c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	2203      	movs	r2, #3
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d123      	bne.n	8002314 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	08da      	lsrs	r2, r3, #3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3208      	adds	r2, #8
 80022d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	220f      	movs	r2, #15
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	691a      	ldr	r2, [r3, #16]
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	08da      	lsrs	r2, r3, #3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3208      	adds	r2, #8
 800230e:	69b9      	ldr	r1, [r7, #24]
 8002310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	2203      	movs	r2, #3
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4013      	ands	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 0203 	and.w	r2, r3, #3
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 80b4 	beq.w	80024be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	4b60      	ldr	r3, [pc, #384]	; (80024dc <HAL_GPIO_Init+0x30c>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	4a5f      	ldr	r2, [pc, #380]	; (80024dc <HAL_GPIO_Init+0x30c>)
 8002360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002364:	6453      	str	r3, [r2, #68]	; 0x44
 8002366:	4b5d      	ldr	r3, [pc, #372]	; (80024dc <HAL_GPIO_Init+0x30c>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002372:	4a5b      	ldr	r2, [pc, #364]	; (80024e0 <HAL_GPIO_Init+0x310>)
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	089b      	lsrs	r3, r3, #2
 8002378:	3302      	adds	r3, #2
 800237a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	220f      	movs	r2, #15
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a52      	ldr	r2, [pc, #328]	; (80024e4 <HAL_GPIO_Init+0x314>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d02b      	beq.n	80023f6 <HAL_GPIO_Init+0x226>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a51      	ldr	r2, [pc, #324]	; (80024e8 <HAL_GPIO_Init+0x318>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d025      	beq.n	80023f2 <HAL_GPIO_Init+0x222>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a50      	ldr	r2, [pc, #320]	; (80024ec <HAL_GPIO_Init+0x31c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d01f      	beq.n	80023ee <HAL_GPIO_Init+0x21e>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a4f      	ldr	r2, [pc, #316]	; (80024f0 <HAL_GPIO_Init+0x320>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d019      	beq.n	80023ea <HAL_GPIO_Init+0x21a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a4e      	ldr	r2, [pc, #312]	; (80024f4 <HAL_GPIO_Init+0x324>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d013      	beq.n	80023e6 <HAL_GPIO_Init+0x216>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a4d      	ldr	r2, [pc, #308]	; (80024f8 <HAL_GPIO_Init+0x328>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d00d      	beq.n	80023e2 <HAL_GPIO_Init+0x212>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a4c      	ldr	r2, [pc, #304]	; (80024fc <HAL_GPIO_Init+0x32c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d007      	beq.n	80023de <HAL_GPIO_Init+0x20e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a4b      	ldr	r2, [pc, #300]	; (8002500 <HAL_GPIO_Init+0x330>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d101      	bne.n	80023da <HAL_GPIO_Init+0x20a>
 80023d6:	2307      	movs	r3, #7
 80023d8:	e00e      	b.n	80023f8 <HAL_GPIO_Init+0x228>
 80023da:	2308      	movs	r3, #8
 80023dc:	e00c      	b.n	80023f8 <HAL_GPIO_Init+0x228>
 80023de:	2306      	movs	r3, #6
 80023e0:	e00a      	b.n	80023f8 <HAL_GPIO_Init+0x228>
 80023e2:	2305      	movs	r3, #5
 80023e4:	e008      	b.n	80023f8 <HAL_GPIO_Init+0x228>
 80023e6:	2304      	movs	r3, #4
 80023e8:	e006      	b.n	80023f8 <HAL_GPIO_Init+0x228>
 80023ea:	2303      	movs	r3, #3
 80023ec:	e004      	b.n	80023f8 <HAL_GPIO_Init+0x228>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e002      	b.n	80023f8 <HAL_GPIO_Init+0x228>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <HAL_GPIO_Init+0x228>
 80023f6:	2300      	movs	r3, #0
 80023f8:	69fa      	ldr	r2, [r7, #28]
 80023fa:	f002 0203 	and.w	r2, r2, #3
 80023fe:	0092      	lsls	r2, r2, #2
 8002400:	4093      	lsls	r3, r2
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002408:	4935      	ldr	r1, [pc, #212]	; (80024e0 <HAL_GPIO_Init+0x310>)
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	089b      	lsrs	r3, r3, #2
 800240e:	3302      	adds	r3, #2
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002416:	4b3b      	ldr	r3, [pc, #236]	; (8002504 <HAL_GPIO_Init+0x334>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800243a:	4a32      	ldr	r2, [pc, #200]	; (8002504 <HAL_GPIO_Init+0x334>)
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002440:	4b30      	ldr	r3, [pc, #192]	; (8002504 <HAL_GPIO_Init+0x334>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002464:	4a27      	ldr	r2, [pc, #156]	; (8002504 <HAL_GPIO_Init+0x334>)
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800246a:	4b26      	ldr	r3, [pc, #152]	; (8002504 <HAL_GPIO_Init+0x334>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800248e:	4a1d      	ldr	r2, [pc, #116]	; (8002504 <HAL_GPIO_Init+0x334>)
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002494:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <HAL_GPIO_Init+0x334>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024b8:	4a12      	ldr	r2, [pc, #72]	; (8002504 <HAL_GPIO_Init+0x334>)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3301      	adds	r3, #1
 80024c2:	61fb      	str	r3, [r7, #28]
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	2b0f      	cmp	r3, #15
 80024c8:	f67f ae90 	bls.w	80021ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024cc:	bf00      	nop
 80024ce:	bf00      	nop
 80024d0:	3724      	adds	r7, #36	; 0x24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40013800 	.word	0x40013800
 80024e4:	40020000 	.word	0x40020000
 80024e8:	40020400 	.word	0x40020400
 80024ec:	40020800 	.word	0x40020800
 80024f0:	40020c00 	.word	0x40020c00
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40021400 	.word	0x40021400
 80024fc:	40021800 	.word	0x40021800
 8002500:	40021c00 	.word	0x40021c00
 8002504:	40013c00 	.word	0x40013c00

08002508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	460b      	mov	r3, r1
 8002512:	807b      	strh	r3, [r7, #2]
 8002514:	4613      	mov	r3, r2
 8002516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002518:	787b      	ldrb	r3, [r7, #1]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800251e:	887a      	ldrh	r2, [r7, #2]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002524:	e003      	b.n	800252e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002526:	887b      	ldrh	r3, [r7, #2]
 8002528:	041a      	lsls	r2, r3, #16
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	619a      	str	r2, [r3, #24]
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
	...

0800253c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e267      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d075      	beq.n	8002646 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800255a:	4b88      	ldr	r3, [pc, #544]	; (800277c <HAL_RCC_OscConfig+0x240>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 030c 	and.w	r3, r3, #12
 8002562:	2b04      	cmp	r3, #4
 8002564:	d00c      	beq.n	8002580 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002566:	4b85      	ldr	r3, [pc, #532]	; (800277c <HAL_RCC_OscConfig+0x240>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800256e:	2b08      	cmp	r3, #8
 8002570:	d112      	bne.n	8002598 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002572:	4b82      	ldr	r3, [pc, #520]	; (800277c <HAL_RCC_OscConfig+0x240>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800257a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800257e:	d10b      	bne.n	8002598 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002580:	4b7e      	ldr	r3, [pc, #504]	; (800277c <HAL_RCC_OscConfig+0x240>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d05b      	beq.n	8002644 <HAL_RCC_OscConfig+0x108>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d157      	bne.n	8002644 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e242      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a0:	d106      	bne.n	80025b0 <HAL_RCC_OscConfig+0x74>
 80025a2:	4b76      	ldr	r3, [pc, #472]	; (800277c <HAL_RCC_OscConfig+0x240>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a75      	ldr	r2, [pc, #468]	; (800277c <HAL_RCC_OscConfig+0x240>)
 80025a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	e01d      	b.n	80025ec <HAL_RCC_OscConfig+0xb0>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025b8:	d10c      	bne.n	80025d4 <HAL_RCC_OscConfig+0x98>
 80025ba:	4b70      	ldr	r3, [pc, #448]	; (800277c <HAL_RCC_OscConfig+0x240>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a6f      	ldr	r2, [pc, #444]	; (800277c <HAL_RCC_OscConfig+0x240>)
 80025c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	4b6d      	ldr	r3, [pc, #436]	; (800277c <HAL_RCC_OscConfig+0x240>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a6c      	ldr	r2, [pc, #432]	; (800277c <HAL_RCC_OscConfig+0x240>)
 80025cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	e00b      	b.n	80025ec <HAL_RCC_OscConfig+0xb0>
 80025d4:	4b69      	ldr	r3, [pc, #420]	; (800277c <HAL_RCC_OscConfig+0x240>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a68      	ldr	r2, [pc, #416]	; (800277c <HAL_RCC_OscConfig+0x240>)
 80025da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025de:	6013      	str	r3, [r2, #0]
 80025e0:	4b66      	ldr	r3, [pc, #408]	; (800277c <HAL_RCC_OscConfig+0x240>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a65      	ldr	r2, [pc, #404]	; (800277c <HAL_RCC_OscConfig+0x240>)
 80025e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d013      	beq.n	800261c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f4:	f7ff f932 	bl	800185c <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025fc:	f7ff f92e 	bl	800185c <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b64      	cmp	r3, #100	; 0x64
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e207      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260e:	4b5b      	ldr	r3, [pc, #364]	; (800277c <HAL_RCC_OscConfig+0x240>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0xc0>
 800261a:	e014      	b.n	8002646 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261c:	f7ff f91e 	bl	800185c <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002624:	f7ff f91a 	bl	800185c <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b64      	cmp	r3, #100	; 0x64
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e1f3      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002636:	4b51      	ldr	r3, [pc, #324]	; (800277c <HAL_RCC_OscConfig+0x240>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0xe8>
 8002642:	e000      	b.n	8002646 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d063      	beq.n	800271a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002652:	4b4a      	ldr	r3, [pc, #296]	; (800277c <HAL_RCC_OscConfig+0x240>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 030c 	and.w	r3, r3, #12
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00b      	beq.n	8002676 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800265e:	4b47      	ldr	r3, [pc, #284]	; (800277c <HAL_RCC_OscConfig+0x240>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002666:	2b08      	cmp	r3, #8
 8002668:	d11c      	bne.n	80026a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800266a:	4b44      	ldr	r3, [pc, #272]	; (800277c <HAL_RCC_OscConfig+0x240>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d116      	bne.n	80026a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002676:	4b41      	ldr	r3, [pc, #260]	; (800277c <HAL_RCC_OscConfig+0x240>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d005      	beq.n	800268e <HAL_RCC_OscConfig+0x152>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d001      	beq.n	800268e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e1c7      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800268e:	4b3b      	ldr	r3, [pc, #236]	; (800277c <HAL_RCC_OscConfig+0x240>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	4937      	ldr	r1, [pc, #220]	; (800277c <HAL_RCC_OscConfig+0x240>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a2:	e03a      	b.n	800271a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d020      	beq.n	80026ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ac:	4b34      	ldr	r3, [pc, #208]	; (8002780 <HAL_RCC_OscConfig+0x244>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b2:	f7ff f8d3 	bl	800185c <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ba:	f7ff f8cf 	bl	800185c <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e1a8      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026cc:	4b2b      	ldr	r3, [pc, #172]	; (800277c <HAL_RCC_OscConfig+0x240>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0f0      	beq.n	80026ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d8:	4b28      	ldr	r3, [pc, #160]	; (800277c <HAL_RCC_OscConfig+0x240>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4925      	ldr	r1, [pc, #148]	; (800277c <HAL_RCC_OscConfig+0x240>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	600b      	str	r3, [r1, #0]
 80026ec:	e015      	b.n	800271a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ee:	4b24      	ldr	r3, [pc, #144]	; (8002780 <HAL_RCC_OscConfig+0x244>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f7ff f8b2 	bl	800185c <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026fc:	f7ff f8ae 	bl	800185c <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e187      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270e:	4b1b      	ldr	r3, [pc, #108]	; (800277c <HAL_RCC_OscConfig+0x240>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d036      	beq.n	8002794 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d016      	beq.n	800275c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800272e:	4b15      	ldr	r3, [pc, #84]	; (8002784 <HAL_RCC_OscConfig+0x248>)
 8002730:	2201      	movs	r2, #1
 8002732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002734:	f7ff f892 	bl	800185c <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800273c:	f7ff f88e 	bl	800185c <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e167      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274e:	4b0b      	ldr	r3, [pc, #44]	; (800277c <HAL_RCC_OscConfig+0x240>)
 8002750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0x200>
 800275a:	e01b      	b.n	8002794 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800275c:	4b09      	ldr	r3, [pc, #36]	; (8002784 <HAL_RCC_OscConfig+0x248>)
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002762:	f7ff f87b 	bl	800185c <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002768:	e00e      	b.n	8002788 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800276a:	f7ff f877 	bl	800185c <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d907      	bls.n	8002788 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e150      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
 800277c:	40023800 	.word	0x40023800
 8002780:	42470000 	.word	0x42470000
 8002784:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002788:	4b88      	ldr	r3, [pc, #544]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 800278a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1ea      	bne.n	800276a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 8097 	beq.w	80028d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027a2:	2300      	movs	r3, #0
 80027a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027a6:	4b81      	ldr	r3, [pc, #516]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10f      	bne.n	80027d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	4b7d      	ldr	r3, [pc, #500]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	4a7c      	ldr	r2, [pc, #496]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 80027bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c0:	6413      	str	r3, [r2, #64]	; 0x40
 80027c2:	4b7a      	ldr	r3, [pc, #488]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ca:	60bb      	str	r3, [r7, #8]
 80027cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ce:	2301      	movs	r3, #1
 80027d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d2:	4b77      	ldr	r3, [pc, #476]	; (80029b0 <HAL_RCC_OscConfig+0x474>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d118      	bne.n	8002810 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027de:	4b74      	ldr	r3, [pc, #464]	; (80029b0 <HAL_RCC_OscConfig+0x474>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a73      	ldr	r2, [pc, #460]	; (80029b0 <HAL_RCC_OscConfig+0x474>)
 80027e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ea:	f7ff f837 	bl	800185c <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f2:	f7ff f833 	bl	800185c <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e10c      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002804:	4b6a      	ldr	r3, [pc, #424]	; (80029b0 <HAL_RCC_OscConfig+0x474>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0f0      	beq.n	80027f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d106      	bne.n	8002826 <HAL_RCC_OscConfig+0x2ea>
 8002818:	4b64      	ldr	r3, [pc, #400]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 800281a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281c:	4a63      	ldr	r2, [pc, #396]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 800281e:	f043 0301 	orr.w	r3, r3, #1
 8002822:	6713      	str	r3, [r2, #112]	; 0x70
 8002824:	e01c      	b.n	8002860 <HAL_RCC_OscConfig+0x324>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	2b05      	cmp	r3, #5
 800282c:	d10c      	bne.n	8002848 <HAL_RCC_OscConfig+0x30c>
 800282e:	4b5f      	ldr	r3, [pc, #380]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 8002830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002832:	4a5e      	ldr	r2, [pc, #376]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 8002834:	f043 0304 	orr.w	r3, r3, #4
 8002838:	6713      	str	r3, [r2, #112]	; 0x70
 800283a:	4b5c      	ldr	r3, [pc, #368]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 800283c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283e:	4a5b      	ldr	r2, [pc, #364]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6713      	str	r3, [r2, #112]	; 0x70
 8002846:	e00b      	b.n	8002860 <HAL_RCC_OscConfig+0x324>
 8002848:	4b58      	ldr	r3, [pc, #352]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 800284a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284c:	4a57      	ldr	r2, [pc, #348]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 800284e:	f023 0301 	bic.w	r3, r3, #1
 8002852:	6713      	str	r3, [r2, #112]	; 0x70
 8002854:	4b55      	ldr	r3, [pc, #340]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 8002856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002858:	4a54      	ldr	r2, [pc, #336]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 800285a:	f023 0304 	bic.w	r3, r3, #4
 800285e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d015      	beq.n	8002894 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002868:	f7fe fff8 	bl	800185c <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286e:	e00a      	b.n	8002886 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002870:	f7fe fff4 	bl	800185c <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	f241 3288 	movw	r2, #5000	; 0x1388
 800287e:	4293      	cmp	r3, r2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e0cb      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002886:	4b49      	ldr	r3, [pc, #292]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 8002888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0ee      	beq.n	8002870 <HAL_RCC_OscConfig+0x334>
 8002892:	e014      	b.n	80028be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002894:	f7fe ffe2 	bl	800185c <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800289a:	e00a      	b.n	80028b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800289c:	f7fe ffde 	bl	800185c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e0b5      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b2:	4b3e      	ldr	r3, [pc, #248]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 80028b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1ee      	bne.n	800289c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028be:	7dfb      	ldrb	r3, [r7, #23]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d105      	bne.n	80028d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c4:	4b39      	ldr	r3, [pc, #228]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	4a38      	ldr	r2, [pc, #224]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 80028ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80a1 	beq.w	8002a1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028da:	4b34      	ldr	r3, [pc, #208]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 030c 	and.w	r3, r3, #12
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d05c      	beq.n	80029a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d141      	bne.n	8002972 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ee:	4b31      	ldr	r3, [pc, #196]	; (80029b4 <HAL_RCC_OscConfig+0x478>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7fe ffb2 	bl	800185c <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028fc:	f7fe ffae 	bl	800185c <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e087      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290e:	4b27      	ldr	r3, [pc, #156]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69da      	ldr	r2, [r3, #28]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	019b      	lsls	r3, r3, #6
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002930:	085b      	lsrs	r3, r3, #1
 8002932:	3b01      	subs	r3, #1
 8002934:	041b      	lsls	r3, r3, #16
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293c:	061b      	lsls	r3, r3, #24
 800293e:	491b      	ldr	r1, [pc, #108]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 8002940:	4313      	orrs	r3, r2
 8002942:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002944:	4b1b      	ldr	r3, [pc, #108]	; (80029b4 <HAL_RCC_OscConfig+0x478>)
 8002946:	2201      	movs	r2, #1
 8002948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294a:	f7fe ff87 	bl	800185c <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002952:	f7fe ff83 	bl	800185c <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e05c      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002964:	4b11      	ldr	r3, [pc, #68]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCC_OscConfig+0x416>
 8002970:	e054      	b.n	8002a1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002972:	4b10      	ldr	r3, [pc, #64]	; (80029b4 <HAL_RCC_OscConfig+0x478>)
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002978:	f7fe ff70 	bl	800185c <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002980:	f7fe ff6c 	bl	800185c <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e045      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002992:	4b06      	ldr	r3, [pc, #24]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0x444>
 800299e:	e03d      	b.n	8002a1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d107      	bne.n	80029b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e038      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
 80029ac:	40023800 	.word	0x40023800
 80029b0:	40007000 	.word	0x40007000
 80029b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029b8:	4b1b      	ldr	r3, [pc, #108]	; (8002a28 <HAL_RCC_OscConfig+0x4ec>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d028      	beq.n	8002a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d121      	bne.n	8002a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029de:	429a      	cmp	r2, r3
 80029e0:	d11a      	bne.n	8002a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029e8:	4013      	ands	r3, r2
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d111      	bne.n	8002a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fe:	085b      	lsrs	r3, r3, #1
 8002a00:	3b01      	subs	r3, #1
 8002a02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d107      	bne.n	8002a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e000      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40023800 	.word	0x40023800

08002a2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e0cc      	b.n	8002bda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a40:	4b68      	ldr	r3, [pc, #416]	; (8002be4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d90c      	bls.n	8002a68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4e:	4b65      	ldr	r3, [pc, #404]	; (8002be4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a56:	4b63      	ldr	r3, [pc, #396]	; (8002be4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d001      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e0b8      	b.n	8002bda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d020      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0304 	and.w	r3, r3, #4
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a80:	4b59      	ldr	r3, [pc, #356]	; (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	4a58      	ldr	r2, [pc, #352]	; (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0308 	and.w	r3, r3, #8
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a98:	4b53      	ldr	r3, [pc, #332]	; (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	4a52      	ldr	r2, [pc, #328]	; (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002aa2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aa4:	4b50      	ldr	r3, [pc, #320]	; (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	494d      	ldr	r1, [pc, #308]	; (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d044      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d107      	bne.n	8002ada <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aca:	4b47      	ldr	r3, [pc, #284]	; (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d119      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e07f      	b.n	8002bda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d003      	beq.n	8002aea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d107      	bne.n	8002afa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aea:	4b3f      	ldr	r3, [pc, #252]	; (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d109      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e06f      	b.n	8002bda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afa:	4b3b      	ldr	r3, [pc, #236]	; (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e067      	b.n	8002bda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b0a:	4b37      	ldr	r3, [pc, #220]	; (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f023 0203 	bic.w	r2, r3, #3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	4934      	ldr	r1, [pc, #208]	; (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b1c:	f7fe fe9e 	bl	800185c <HAL_GetTick>
 8002b20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b22:	e00a      	b.n	8002b3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b24:	f7fe fe9a 	bl	800185c <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e04f      	b.n	8002bda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3a:	4b2b      	ldr	r3, [pc, #172]	; (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 020c 	and.w	r2, r3, #12
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d1eb      	bne.n	8002b24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b4c:	4b25      	ldr	r3, [pc, #148]	; (8002be4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d20c      	bcs.n	8002b74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5a:	4b22      	ldr	r3, [pc, #136]	; (8002be4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b62:	4b20      	ldr	r3, [pc, #128]	; (8002be4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d001      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e032      	b.n	8002bda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d008      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b80:	4b19      	ldr	r3, [pc, #100]	; (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	4916      	ldr	r1, [pc, #88]	; (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d009      	beq.n	8002bb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b9e:	4b12      	ldr	r3, [pc, #72]	; (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	490e      	ldr	r1, [pc, #56]	; (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bb2:	f000 f821 	bl	8002bf8 <HAL_RCC_GetSysClockFreq>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	091b      	lsrs	r3, r3, #4
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	490a      	ldr	r1, [pc, #40]	; (8002bec <HAL_RCC_ClockConfig+0x1c0>)
 8002bc4:	5ccb      	ldrb	r3, [r1, r3]
 8002bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bca:	4a09      	ldr	r2, [pc, #36]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bce:	4b09      	ldr	r3, [pc, #36]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fe fd2a 	bl	800162c <HAL_InitTick>

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40023c00 	.word	0x40023c00
 8002be8:	40023800 	.word	0x40023800
 8002bec:	08006924 	.word	0x08006924
 8002bf0:	20000000 	.word	0x20000000
 8002bf4:	20000004 	.word	0x20000004

08002bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bfc:	b094      	sub	sp, #80	; 0x50
 8002bfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	647b      	str	r3, [r7, #68]	; 0x44
 8002c04:	2300      	movs	r3, #0
 8002c06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c08:	2300      	movs	r3, #0
 8002c0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c10:	4b79      	ldr	r3, [pc, #484]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 030c 	and.w	r3, r3, #12
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d00d      	beq.n	8002c38 <HAL_RCC_GetSysClockFreq+0x40>
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	f200 80e1 	bhi.w	8002de4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0x34>
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d003      	beq.n	8002c32 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c2a:	e0db      	b.n	8002de4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c2c:	4b73      	ldr	r3, [pc, #460]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x204>)
 8002c2e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c30:	e0db      	b.n	8002dea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c32:	4b73      	ldr	r3, [pc, #460]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c36:	e0d8      	b.n	8002dea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c38:	4b6f      	ldr	r3, [pc, #444]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c40:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c42:	4b6d      	ldr	r3, [pc, #436]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d063      	beq.n	8002d16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c4e:	4b6a      	ldr	r3, [pc, #424]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	099b      	lsrs	r3, r3, #6
 8002c54:	2200      	movs	r2, #0
 8002c56:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c60:	633b      	str	r3, [r7, #48]	; 0x30
 8002c62:	2300      	movs	r3, #0
 8002c64:	637b      	str	r3, [r7, #52]	; 0x34
 8002c66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c6a:	4622      	mov	r2, r4
 8002c6c:	462b      	mov	r3, r5
 8002c6e:	f04f 0000 	mov.w	r0, #0
 8002c72:	f04f 0100 	mov.w	r1, #0
 8002c76:	0159      	lsls	r1, r3, #5
 8002c78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c7c:	0150      	lsls	r0, r2, #5
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	4621      	mov	r1, r4
 8002c84:	1a51      	subs	r1, r2, r1
 8002c86:	6139      	str	r1, [r7, #16]
 8002c88:	4629      	mov	r1, r5
 8002c8a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c9c:	4659      	mov	r1, fp
 8002c9e:	018b      	lsls	r3, r1, #6
 8002ca0:	4651      	mov	r1, sl
 8002ca2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ca6:	4651      	mov	r1, sl
 8002ca8:	018a      	lsls	r2, r1, #6
 8002caa:	4651      	mov	r1, sl
 8002cac:	ebb2 0801 	subs.w	r8, r2, r1
 8002cb0:	4659      	mov	r1, fp
 8002cb2:	eb63 0901 	sbc.w	r9, r3, r1
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	f04f 0300 	mov.w	r3, #0
 8002cbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cca:	4690      	mov	r8, r2
 8002ccc:	4699      	mov	r9, r3
 8002cce:	4623      	mov	r3, r4
 8002cd0:	eb18 0303 	adds.w	r3, r8, r3
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	462b      	mov	r3, r5
 8002cd8:	eb49 0303 	adc.w	r3, r9, r3
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cea:	4629      	mov	r1, r5
 8002cec:	024b      	lsls	r3, r1, #9
 8002cee:	4621      	mov	r1, r4
 8002cf0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cf4:	4621      	mov	r1, r4
 8002cf6:	024a      	lsls	r2, r1, #9
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cfe:	2200      	movs	r2, #0
 8002d00:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d08:	f7fd fe80 	bl	8000a0c <__aeabi_uldivmod>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	4613      	mov	r3, r2
 8002d12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d14:	e058      	b.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d16:	4b38      	ldr	r3, [pc, #224]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	099b      	lsrs	r3, r3, #6
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	4618      	mov	r0, r3
 8002d20:	4611      	mov	r1, r2
 8002d22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d26:	623b      	str	r3, [r7, #32]
 8002d28:	2300      	movs	r3, #0
 8002d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d30:	4642      	mov	r2, r8
 8002d32:	464b      	mov	r3, r9
 8002d34:	f04f 0000 	mov.w	r0, #0
 8002d38:	f04f 0100 	mov.w	r1, #0
 8002d3c:	0159      	lsls	r1, r3, #5
 8002d3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d42:	0150      	lsls	r0, r2, #5
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	4641      	mov	r1, r8
 8002d4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d4e:	4649      	mov	r1, r9
 8002d50:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	f04f 0300 	mov.w	r3, #0
 8002d5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d68:	ebb2 040a 	subs.w	r4, r2, sl
 8002d6c:	eb63 050b 	sbc.w	r5, r3, fp
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	00eb      	lsls	r3, r5, #3
 8002d7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d7e:	00e2      	lsls	r2, r4, #3
 8002d80:	4614      	mov	r4, r2
 8002d82:	461d      	mov	r5, r3
 8002d84:	4643      	mov	r3, r8
 8002d86:	18e3      	adds	r3, r4, r3
 8002d88:	603b      	str	r3, [r7, #0]
 8002d8a:	464b      	mov	r3, r9
 8002d8c:	eb45 0303 	adc.w	r3, r5, r3
 8002d90:	607b      	str	r3, [r7, #4]
 8002d92:	f04f 0200 	mov.w	r2, #0
 8002d96:	f04f 0300 	mov.w	r3, #0
 8002d9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d9e:	4629      	mov	r1, r5
 8002da0:	028b      	lsls	r3, r1, #10
 8002da2:	4621      	mov	r1, r4
 8002da4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002da8:	4621      	mov	r1, r4
 8002daa:	028a      	lsls	r2, r1, #10
 8002dac:	4610      	mov	r0, r2
 8002dae:	4619      	mov	r1, r3
 8002db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002db2:	2200      	movs	r2, #0
 8002db4:	61bb      	str	r3, [r7, #24]
 8002db6:	61fa      	str	r2, [r7, #28]
 8002db8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dbc:	f7fd fe26 	bl	8000a0c <__aeabi_uldivmod>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	0c1b      	lsrs	r3, r3, #16
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002dd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002de2:	e002      	b.n	8002dea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002de4:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x204>)
 8002de6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002de8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3750      	adds	r7, #80	; 0x50
 8002df0:	46bd      	mov	sp, r7
 8002df2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002df6:	bf00      	nop
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	00f42400 	.word	0x00f42400
 8002e00:	007a1200 	.word	0x007a1200

08002e04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e08:	4b03      	ldr	r3, [pc, #12]	; (8002e18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	20000000 	.word	0x20000000

08002e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e20:	f7ff fff0 	bl	8002e04 <HAL_RCC_GetHCLKFreq>
 8002e24:	4602      	mov	r2, r0
 8002e26:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	0a9b      	lsrs	r3, r3, #10
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	4903      	ldr	r1, [pc, #12]	; (8002e40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e32:	5ccb      	ldrb	r3, [r1, r3]
 8002e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	08006934 	.word	0x08006934

08002e44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	220f      	movs	r2, #15
 8002e52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e54:	4b12      	ldr	r3, [pc, #72]	; (8002ea0 <HAL_RCC_GetClockConfig+0x5c>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 0203 	and.w	r2, r3, #3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e60:	4b0f      	ldr	r3, [pc, #60]	; (8002ea0 <HAL_RCC_GetClockConfig+0x5c>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <HAL_RCC_GetClockConfig+0x5c>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e78:	4b09      	ldr	r3, [pc, #36]	; (8002ea0 <HAL_RCC_GetClockConfig+0x5c>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	08db      	lsrs	r3, r3, #3
 8002e7e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e86:	4b07      	ldr	r3, [pc, #28]	; (8002ea4 <HAL_RCC_GetClockConfig+0x60>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0207 	and.w	r2, r3, #7
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	601a      	str	r2, [r3, #0]
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	40023c00 	.word	0x40023c00

08002ea8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e041      	b.n	8002f3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d106      	bne.n	8002ed4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7fe fb84 	bl	80015dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4610      	mov	r0, r2
 8002ee8:	f000 f9ce 	bl	8003288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d001      	beq.n	8002f60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e04e      	b.n	8002ffe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0201 	orr.w	r2, r2, #1
 8002f76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a23      	ldr	r2, [pc, #140]	; (800300c <HAL_TIM_Base_Start_IT+0xc4>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d022      	beq.n	8002fc8 <HAL_TIM_Base_Start_IT+0x80>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f8a:	d01d      	beq.n	8002fc8 <HAL_TIM_Base_Start_IT+0x80>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a1f      	ldr	r2, [pc, #124]	; (8003010 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d018      	beq.n	8002fc8 <HAL_TIM_Base_Start_IT+0x80>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a1e      	ldr	r2, [pc, #120]	; (8003014 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d013      	beq.n	8002fc8 <HAL_TIM_Base_Start_IT+0x80>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a1c      	ldr	r2, [pc, #112]	; (8003018 <HAL_TIM_Base_Start_IT+0xd0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d00e      	beq.n	8002fc8 <HAL_TIM_Base_Start_IT+0x80>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a1b      	ldr	r2, [pc, #108]	; (800301c <HAL_TIM_Base_Start_IT+0xd4>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d009      	beq.n	8002fc8 <HAL_TIM_Base_Start_IT+0x80>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a19      	ldr	r2, [pc, #100]	; (8003020 <HAL_TIM_Base_Start_IT+0xd8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d004      	beq.n	8002fc8 <HAL_TIM_Base_Start_IT+0x80>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a18      	ldr	r2, [pc, #96]	; (8003024 <HAL_TIM_Base_Start_IT+0xdc>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d111      	bne.n	8002fec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2b06      	cmp	r3, #6
 8002fd8:	d010      	beq.n	8002ffc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f042 0201 	orr.w	r2, r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fea:	e007      	b.n	8002ffc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0201 	orr.w	r2, r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40010000 	.word	0x40010000
 8003010:	40000400 	.word	0x40000400
 8003014:	40000800 	.word	0x40000800
 8003018:	40000c00 	.word	0x40000c00
 800301c:	40010400 	.word	0x40010400
 8003020:	40014000 	.word	0x40014000
 8003024:	40001800 	.word	0x40001800

08003028 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b02      	cmp	r3, #2
 800303c:	d122      	bne.n	8003084 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b02      	cmp	r3, #2
 800304a:	d11b      	bne.n	8003084 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0202 	mvn.w	r2, #2
 8003054:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f8ee 	bl	800324c <HAL_TIM_IC_CaptureCallback>
 8003070:	e005      	b.n	800307e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f8e0 	bl	8003238 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f8f1 	bl	8003260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	f003 0304 	and.w	r3, r3, #4
 800308e:	2b04      	cmp	r3, #4
 8003090:	d122      	bne.n	80030d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b04      	cmp	r3, #4
 800309e:	d11b      	bne.n	80030d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f06f 0204 	mvn.w	r2, #4
 80030a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2202      	movs	r2, #2
 80030ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f8c4 	bl	800324c <HAL_TIM_IC_CaptureCallback>
 80030c4:	e005      	b.n	80030d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f8b6 	bl	8003238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f8c7 	bl	8003260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	2b08      	cmp	r3, #8
 80030e4:	d122      	bne.n	800312c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f003 0308 	and.w	r3, r3, #8
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d11b      	bne.n	800312c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f06f 0208 	mvn.w	r2, #8
 80030fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2204      	movs	r2, #4
 8003102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f89a 	bl	800324c <HAL_TIM_IC_CaptureCallback>
 8003118:	e005      	b.n	8003126 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f88c 	bl	8003238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f89d 	bl	8003260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f003 0310 	and.w	r3, r3, #16
 8003136:	2b10      	cmp	r3, #16
 8003138:	d122      	bne.n	8003180 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f003 0310 	and.w	r3, r3, #16
 8003144:	2b10      	cmp	r3, #16
 8003146:	d11b      	bne.n	8003180 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f06f 0210 	mvn.w	r2, #16
 8003150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2208      	movs	r2, #8
 8003156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f870 	bl	800324c <HAL_TIM_IC_CaptureCallback>
 800316c:	e005      	b.n	800317a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f862 	bl	8003238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f873 	bl	8003260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b01      	cmp	r3, #1
 800318c:	d10e      	bne.n	80031ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b01      	cmp	r3, #1
 800319a:	d107      	bne.n	80031ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f06f 0201 	mvn.w	r2, #1
 80031a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7fe f930 	bl	800140c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b6:	2b80      	cmp	r3, #128	; 0x80
 80031b8:	d10e      	bne.n	80031d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c4:	2b80      	cmp	r3, #128	; 0x80
 80031c6:	d107      	bne.n	80031d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f902 	bl	80033dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e2:	2b40      	cmp	r3, #64	; 0x40
 80031e4:	d10e      	bne.n	8003204 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f0:	2b40      	cmp	r3, #64	; 0x40
 80031f2:	d107      	bne.n	8003204 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f838 	bl	8003274 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	f003 0320 	and.w	r3, r3, #32
 800320e:	2b20      	cmp	r3, #32
 8003210:	d10e      	bne.n	8003230 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f003 0320 	and.w	r3, r3, #32
 800321c:	2b20      	cmp	r3, #32
 800321e:	d107      	bne.n	8003230 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f06f 0220 	mvn.w	r2, #32
 8003228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f8cc 	bl	80033c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003230:	bf00      	nop
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a40      	ldr	r2, [pc, #256]	; (800339c <TIM_Base_SetConfig+0x114>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d013      	beq.n	80032c8 <TIM_Base_SetConfig+0x40>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a6:	d00f      	beq.n	80032c8 <TIM_Base_SetConfig+0x40>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a3d      	ldr	r2, [pc, #244]	; (80033a0 <TIM_Base_SetConfig+0x118>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d00b      	beq.n	80032c8 <TIM_Base_SetConfig+0x40>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a3c      	ldr	r2, [pc, #240]	; (80033a4 <TIM_Base_SetConfig+0x11c>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d007      	beq.n	80032c8 <TIM_Base_SetConfig+0x40>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a3b      	ldr	r2, [pc, #236]	; (80033a8 <TIM_Base_SetConfig+0x120>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d003      	beq.n	80032c8 <TIM_Base_SetConfig+0x40>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a3a      	ldr	r2, [pc, #232]	; (80033ac <TIM_Base_SetConfig+0x124>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d108      	bne.n	80032da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a2f      	ldr	r2, [pc, #188]	; (800339c <TIM_Base_SetConfig+0x114>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d02b      	beq.n	800333a <TIM_Base_SetConfig+0xb2>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e8:	d027      	beq.n	800333a <TIM_Base_SetConfig+0xb2>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a2c      	ldr	r2, [pc, #176]	; (80033a0 <TIM_Base_SetConfig+0x118>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d023      	beq.n	800333a <TIM_Base_SetConfig+0xb2>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a2b      	ldr	r2, [pc, #172]	; (80033a4 <TIM_Base_SetConfig+0x11c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d01f      	beq.n	800333a <TIM_Base_SetConfig+0xb2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a2a      	ldr	r2, [pc, #168]	; (80033a8 <TIM_Base_SetConfig+0x120>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d01b      	beq.n	800333a <TIM_Base_SetConfig+0xb2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a29      	ldr	r2, [pc, #164]	; (80033ac <TIM_Base_SetConfig+0x124>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d017      	beq.n	800333a <TIM_Base_SetConfig+0xb2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a28      	ldr	r2, [pc, #160]	; (80033b0 <TIM_Base_SetConfig+0x128>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d013      	beq.n	800333a <TIM_Base_SetConfig+0xb2>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a27      	ldr	r2, [pc, #156]	; (80033b4 <TIM_Base_SetConfig+0x12c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d00f      	beq.n	800333a <TIM_Base_SetConfig+0xb2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a26      	ldr	r2, [pc, #152]	; (80033b8 <TIM_Base_SetConfig+0x130>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d00b      	beq.n	800333a <TIM_Base_SetConfig+0xb2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a25      	ldr	r2, [pc, #148]	; (80033bc <TIM_Base_SetConfig+0x134>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d007      	beq.n	800333a <TIM_Base_SetConfig+0xb2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a24      	ldr	r2, [pc, #144]	; (80033c0 <TIM_Base_SetConfig+0x138>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d003      	beq.n	800333a <TIM_Base_SetConfig+0xb2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a23      	ldr	r2, [pc, #140]	; (80033c4 <TIM_Base_SetConfig+0x13c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d108      	bne.n	800334c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	4313      	orrs	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	4313      	orrs	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a0a      	ldr	r2, [pc, #40]	; (800339c <TIM_Base_SetConfig+0x114>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d003      	beq.n	8003380 <TIM_Base_SetConfig+0xf8>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a0c      	ldr	r2, [pc, #48]	; (80033ac <TIM_Base_SetConfig+0x124>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d103      	bne.n	8003388 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	615a      	str	r2, [r3, #20]
}
 800338e:	bf00      	nop
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40010000 	.word	0x40010000
 80033a0:	40000400 	.word	0x40000400
 80033a4:	40000800 	.word	0x40000800
 80033a8:	40000c00 	.word	0x40000c00
 80033ac:	40010400 	.word	0x40010400
 80033b0:	40014000 	.word	0x40014000
 80033b4:	40014400 	.word	0x40014400
 80033b8:	40014800 	.word	0x40014800
 80033bc:	40001800 	.word	0x40001800
 80033c0:	40001c00 	.word	0x40001c00
 80033c4:	40002000 	.word	0x40002000

080033c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <__NVIC_SetPriority>:
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	6039      	str	r1, [r7, #0]
 80033fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003400:	2b00      	cmp	r3, #0
 8003402:	db0a      	blt.n	800341a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	b2da      	uxtb	r2, r3
 8003408:	490c      	ldr	r1, [pc, #48]	; (800343c <__NVIC_SetPriority+0x4c>)
 800340a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340e:	0112      	lsls	r2, r2, #4
 8003410:	b2d2      	uxtb	r2, r2
 8003412:	440b      	add	r3, r1
 8003414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003418:	e00a      	b.n	8003430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	b2da      	uxtb	r2, r3
 800341e:	4908      	ldr	r1, [pc, #32]	; (8003440 <__NVIC_SetPriority+0x50>)
 8003420:	79fb      	ldrb	r3, [r7, #7]
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	3b04      	subs	r3, #4
 8003428:	0112      	lsls	r2, r2, #4
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	440b      	add	r3, r1
 800342e:	761a      	strb	r2, [r3, #24]
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	e000e100 	.word	0xe000e100
 8003440:	e000ed00 	.word	0xe000ed00

08003444 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003448:	4b05      	ldr	r3, [pc, #20]	; (8003460 <SysTick_Handler+0x1c>)
 800344a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800344c:	f002 f800 	bl	8005450 <xTaskGetSchedulerState>
 8003450:	4603      	mov	r3, r0
 8003452:	2b01      	cmp	r3, #1
 8003454:	d001      	beq.n	800345a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003456:	f002 fe9f 	bl	8006198 <xPortSysTickHandler>
  }
}
 800345a:	bf00      	nop
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	e000e010 	.word	0xe000e010

08003464 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003468:	2100      	movs	r1, #0
 800346a:	f06f 0004 	mvn.w	r0, #4
 800346e:	f7ff ffbf 	bl	80033f0 <__NVIC_SetPriority>
#endif
}
 8003472:	bf00      	nop
 8003474:	bd80      	pop	{r7, pc}
	...

08003478 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800347e:	f3ef 8305 	mrs	r3, IPSR
 8003482:	603b      	str	r3, [r7, #0]
  return(result);
 8003484:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800348a:	f06f 0305 	mvn.w	r3, #5
 800348e:	607b      	str	r3, [r7, #4]
 8003490:	e00c      	b.n	80034ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003492:	4b0a      	ldr	r3, [pc, #40]	; (80034bc <osKernelInitialize+0x44>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d105      	bne.n	80034a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800349a:	4b08      	ldr	r3, [pc, #32]	; (80034bc <osKernelInitialize+0x44>)
 800349c:	2201      	movs	r2, #1
 800349e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80034a0:	2300      	movs	r3, #0
 80034a2:	607b      	str	r3, [r7, #4]
 80034a4:	e002      	b.n	80034ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80034a6:	f04f 33ff 	mov.w	r3, #4294967295
 80034aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80034ac:	687b      	ldr	r3, [r7, #4]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	20000180 	.word	0x20000180

080034c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034c6:	f3ef 8305 	mrs	r3, IPSR
 80034ca:	603b      	str	r3, [r7, #0]
  return(result);
 80034cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <osKernelStart+0x1a>
    stat = osErrorISR;
 80034d2:	f06f 0305 	mvn.w	r3, #5
 80034d6:	607b      	str	r3, [r7, #4]
 80034d8:	e010      	b.n	80034fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80034da:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <osKernelStart+0x48>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d109      	bne.n	80034f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80034e2:	f7ff ffbf 	bl	8003464 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80034e6:	4b08      	ldr	r3, [pc, #32]	; (8003508 <osKernelStart+0x48>)
 80034e8:	2202      	movs	r2, #2
 80034ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80034ec:	f001 fb54 	bl	8004b98 <vTaskStartScheduler>
      stat = osOK;
 80034f0:	2300      	movs	r3, #0
 80034f2:	607b      	str	r3, [r7, #4]
 80034f4:	e002      	b.n	80034fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80034f6:	f04f 33ff 	mov.w	r3, #4294967295
 80034fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80034fc:	687b      	ldr	r3, [r7, #4]
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	20000180 	.word	0x20000180

0800350c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800350c:	b580      	push	{r7, lr}
 800350e:	b08e      	sub	sp, #56	; 0x38
 8003510:	af04      	add	r7, sp, #16
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003518:	2300      	movs	r3, #0
 800351a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800351c:	f3ef 8305 	mrs	r3, IPSR
 8003520:	617b      	str	r3, [r7, #20]
  return(result);
 8003522:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003524:	2b00      	cmp	r3, #0
 8003526:	d17e      	bne.n	8003626 <osThreadNew+0x11a>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d07b      	beq.n	8003626 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800352e:	2380      	movs	r3, #128	; 0x80
 8003530:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003532:	2318      	movs	r3, #24
 8003534:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003536:	2300      	movs	r3, #0
 8003538:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800353a:	f04f 33ff 	mov.w	r3, #4294967295
 800353e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d045      	beq.n	80035d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <osThreadNew+0x48>
        name = attr->name;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <osThreadNew+0x6e>
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	2b38      	cmp	r3, #56	; 0x38
 800356c:	d805      	bhi.n	800357a <osThreadNew+0x6e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <osThreadNew+0x72>
        return (NULL);
 800357a:	2300      	movs	r3, #0
 800357c:	e054      	b.n	8003628 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	089b      	lsrs	r3, r3, #2
 800358c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00e      	beq.n	80035b4 <osThreadNew+0xa8>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	2bbb      	cmp	r3, #187	; 0xbb
 800359c:	d90a      	bls.n	80035b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d006      	beq.n	80035b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d002      	beq.n	80035b4 <osThreadNew+0xa8>
        mem = 1;
 80035ae:	2301      	movs	r3, #1
 80035b0:	61bb      	str	r3, [r7, #24]
 80035b2:	e010      	b.n	80035d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10c      	bne.n	80035d6 <osThreadNew+0xca>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d108      	bne.n	80035d6 <osThreadNew+0xca>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d104      	bne.n	80035d6 <osThreadNew+0xca>
          mem = 0;
 80035cc:	2300      	movs	r3, #0
 80035ce:	61bb      	str	r3, [r7, #24]
 80035d0:	e001      	b.n	80035d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80035d2:	2300      	movs	r3, #0
 80035d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d110      	bne.n	80035fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80035e4:	9202      	str	r2, [sp, #8]
 80035e6:	9301      	str	r3, [sp, #4]
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	6a3a      	ldr	r2, [r7, #32]
 80035f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f001 f8e4 	bl	80047c0 <xTaskCreateStatic>
 80035f8:	4603      	mov	r3, r0
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	e013      	b.n	8003626 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d110      	bne.n	8003626 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	b29a      	uxth	r2, r3
 8003608:	f107 0310 	add.w	r3, r7, #16
 800360c:	9301      	str	r3, [sp, #4]
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f001 f92f 	bl	800487a <xTaskCreate>
 800361c:	4603      	mov	r3, r0
 800361e:	2b01      	cmp	r3, #1
 8003620:	d001      	beq.n	8003626 <osThreadNew+0x11a>
            hTask = NULL;
 8003622:	2300      	movs	r3, #0
 8003624:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003626:	693b      	ldr	r3, [r7, #16]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3728      	adds	r7, #40	; 0x28
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003638:	f3ef 8305 	mrs	r3, IPSR
 800363c:	60bb      	str	r3, [r7, #8]
  return(result);
 800363e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003640:	2b00      	cmp	r3, #0
 8003642:	d003      	beq.n	800364c <osDelay+0x1c>
    stat = osErrorISR;
 8003644:	f06f 0305 	mvn.w	r3, #5
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	e007      	b.n	800365c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800364c:	2300      	movs	r3, #0
 800364e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f001 fa6a 	bl	8004b30 <vTaskDelay>
    }
  }

  return (stat);
 800365c:	68fb      	ldr	r3, [r7, #12]
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f002 fbb6 	bl	8005de0 <pvTimerGetTimerID>
 8003674:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d005      	beq.n	8003688 <TimerCallback+0x22>
    callb->func (callb->arg);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	6852      	ldr	r2, [r2, #4]
 8003684:	4610      	mov	r0, r2
 8003686:	4798      	blx	r3
  }
}
 8003688:	bf00      	nop
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8003690:	b580      	push	{r7, lr}
 8003692:	b08c      	sub	sp, #48	; 0x30
 8003694:	af02      	add	r7, sp, #8
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	607a      	str	r2, [r7, #4]
 800369a:	603b      	str	r3, [r7, #0]
 800369c:	460b      	mov	r3, r1
 800369e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036a4:	f3ef 8305 	mrs	r3, IPSR
 80036a8:	613b      	str	r3, [r7, #16]
  return(result);
 80036aa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d163      	bne.n	8003778 <osTimerNew+0xe8>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d060      	beq.n	8003778 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80036b6:	2008      	movs	r0, #8
 80036b8:	f002 fdfe 	bl	80062b8 <pvPortMalloc>
 80036bc:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d059      	beq.n	8003778 <osTimerNew+0xe8>
      callb->func = func;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80036d0:	7afb      	ldrb	r3, [r7, #11]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d102      	bne.n	80036dc <osTimerNew+0x4c>
        reload = pdFALSE;
 80036d6:	2300      	movs	r3, #0
 80036d8:	61fb      	str	r3, [r7, #28]
 80036da:	e001      	b.n	80036e0 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80036dc:	2301      	movs	r3, #1
 80036de:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80036e0:	f04f 33ff 	mov.w	r3, #4294967295
 80036e4:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d01c      	beq.n	800372a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d002      	beq.n	80036fe <osTimerNew+0x6e>
          name = attr->name;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d006      	beq.n	8003714 <osTimerNew+0x84>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	2b2b      	cmp	r3, #43	; 0x2b
 800370c:	d902      	bls.n	8003714 <osTimerNew+0x84>
          mem = 1;
 800370e:	2301      	movs	r3, #1
 8003710:	61bb      	str	r3, [r7, #24]
 8003712:	e00c      	b.n	800372e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d108      	bne.n	800372e <osTimerNew+0x9e>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d104      	bne.n	800372e <osTimerNew+0x9e>
            mem = 0;
 8003724:	2300      	movs	r3, #0
 8003726:	61bb      	str	r3, [r7, #24]
 8003728:	e001      	b.n	800372e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800372a:	2300      	movs	r3, #0
 800372c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d10c      	bne.n	800374e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	9301      	str	r3, [sp, #4]
 800373a:	4b12      	ldr	r3, [pc, #72]	; (8003784 <osTimerNew+0xf4>)
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	69fa      	ldr	r2, [r7, #28]
 8003742:	2101      	movs	r1, #1
 8003744:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003746:	f001 ffcc 	bl	80056e2 <xTimerCreateStatic>
 800374a:	6238      	str	r0, [r7, #32]
 800374c:	e00b      	b.n	8003766 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d108      	bne.n	8003766 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8003754:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <osTimerNew+0xf4>)
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	69fa      	ldr	r2, [r7, #28]
 800375c:	2101      	movs	r1, #1
 800375e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003760:	f001 ff9e 	bl	80056a0 <xTimerCreate>
 8003764:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d105      	bne.n	8003778 <osTimerNew+0xe8>
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <osTimerNew+0xe8>
        vPortFree (callb);
 8003772:	6978      	ldr	r0, [r7, #20]
 8003774:	f002 fe6c 	bl	8006450 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8003778:	6a3b      	ldr	r3, [r7, #32]
}
 800377a:	4618      	mov	r0, r3
 800377c:	3728      	adds	r7, #40	; 0x28
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	08003667 	.word	0x08003667

08003788 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003788:	b580      	push	{r7, lr}
 800378a:	b08a      	sub	sp, #40	; 0x28
 800378c:	af02      	add	r7, sp, #8
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003794:	2300      	movs	r3, #0
 8003796:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003798:	f3ef 8305 	mrs	r3, IPSR
 800379c:	613b      	str	r3, [r7, #16]
  return(result);
 800379e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d15f      	bne.n	8003864 <osMessageQueueNew+0xdc>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d05c      	beq.n	8003864 <osMessageQueueNew+0xdc>
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d059      	beq.n	8003864 <osMessageQueueNew+0xdc>
    mem = -1;
 80037b0:	f04f 33ff 	mov.w	r3, #4294967295
 80037b4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d029      	beq.n	8003810 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d012      	beq.n	80037ea <osMessageQueueNew+0x62>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	2b4f      	cmp	r3, #79	; 0x4f
 80037ca:	d90e      	bls.n	80037ea <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00a      	beq.n	80037ea <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	695a      	ldr	r2, [r3, #20]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	68b9      	ldr	r1, [r7, #8]
 80037dc:	fb01 f303 	mul.w	r3, r1, r3
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d302      	bcc.n	80037ea <osMessageQueueNew+0x62>
        mem = 1;
 80037e4:	2301      	movs	r3, #1
 80037e6:	61bb      	str	r3, [r7, #24]
 80037e8:	e014      	b.n	8003814 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d110      	bne.n	8003814 <osMessageQueueNew+0x8c>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10c      	bne.n	8003814 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d108      	bne.n	8003814 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d104      	bne.n	8003814 <osMessageQueueNew+0x8c>
          mem = 0;
 800380a:	2300      	movs	r3, #0
 800380c:	61bb      	str	r3, [r7, #24]
 800380e:	e001      	b.n	8003814 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003810:	2300      	movs	r3, #0
 8003812:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d10b      	bne.n	8003832 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691a      	ldr	r2, [r3, #16]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	2100      	movs	r1, #0
 8003824:	9100      	str	r1, [sp, #0]
 8003826:	68b9      	ldr	r1, [r7, #8]
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 fa4f 	bl	8003ccc <xQueueGenericCreateStatic>
 800382e:	61f8      	str	r0, [r7, #28]
 8003830:	e008      	b.n	8003844 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d105      	bne.n	8003844 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003838:	2200      	movs	r2, #0
 800383a:	68b9      	ldr	r1, [r7, #8]
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 fabd 	bl	8003dbc <xQueueGenericCreate>
 8003842:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00c      	beq.n	8003864 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <osMessageQueueNew+0xd0>
        name = attr->name;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	e001      	b.n	800385c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003858:	2300      	movs	r3, #0
 800385a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800385c:	6979      	ldr	r1, [r7, #20]
 800385e:	69f8      	ldr	r0, [r7, #28]
 8003860:	f000 ff50 	bl	8004704 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003864:	69fb      	ldr	r3, [r7, #28]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3720      	adds	r7, #32
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
	...

08003870 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	603b      	str	r3, [r7, #0]
 800387c:	4613      	mov	r3, r2
 800387e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003884:	2300      	movs	r3, #0
 8003886:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003888:	f3ef 8305 	mrs	r3, IPSR
 800388c:	617b      	str	r3, [r7, #20]
  return(result);
 800388e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003890:	2b00      	cmp	r3, #0
 8003892:	d028      	beq.n	80038e6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d005      	beq.n	80038a6 <osMessageQueuePut+0x36>
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <osMessageQueuePut+0x36>
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80038a6:	f06f 0303 	mvn.w	r3, #3
 80038aa:	61fb      	str	r3, [r7, #28]
 80038ac:	e038      	b.n	8003920 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80038ae:	2300      	movs	r3, #0
 80038b0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80038b2:	f107 0210 	add.w	r2, r7, #16
 80038b6:	2300      	movs	r3, #0
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	69b8      	ldr	r0, [r7, #24]
 80038bc:	f000 fbda 	bl	8004074 <xQueueGenericSendFromISR>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d003      	beq.n	80038ce <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80038c6:	f06f 0302 	mvn.w	r3, #2
 80038ca:	61fb      	str	r3, [r7, #28]
 80038cc:	e028      	b.n	8003920 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d025      	beq.n	8003920 <osMessageQueuePut+0xb0>
 80038d4:	4b15      	ldr	r3, [pc, #84]	; (800392c <osMessageQueuePut+0xbc>)
 80038d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	f3bf 8f4f 	dsb	sy
 80038e0:	f3bf 8f6f 	isb	sy
 80038e4:	e01c      	b.n	8003920 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d002      	beq.n	80038f2 <osMessageQueuePut+0x82>
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d103      	bne.n	80038fa <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80038f2:	f06f 0303 	mvn.w	r3, #3
 80038f6:	61fb      	str	r3, [r7, #28]
 80038f8:	e012      	b.n	8003920 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80038fa:	2300      	movs	r3, #0
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	68b9      	ldr	r1, [r7, #8]
 8003900:	69b8      	ldr	r0, [r7, #24]
 8003902:	f000 fab9 	bl	8003e78 <xQueueGenericSend>
 8003906:	4603      	mov	r3, r0
 8003908:	2b01      	cmp	r3, #1
 800390a:	d009      	beq.n	8003920 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003912:	f06f 0301 	mvn.w	r3, #1
 8003916:	61fb      	str	r3, [r7, #28]
 8003918:	e002      	b.n	8003920 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800391a:	f06f 0302 	mvn.w	r3, #2
 800391e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003920:	69fb      	ldr	r3, [r7, #28]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3720      	adds	r7, #32
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	e000ed04 	.word	0xe000ed04

08003930 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003930:	b580      	push	{r7, lr}
 8003932:	b088      	sub	sp, #32
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
 800393c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003942:	2300      	movs	r3, #0
 8003944:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003946:	f3ef 8305 	mrs	r3, IPSR
 800394a:	617b      	str	r3, [r7, #20]
  return(result);
 800394c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800394e:	2b00      	cmp	r3, #0
 8003950:	d028      	beq.n	80039a4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d005      	beq.n	8003964 <osMessageQueueGet+0x34>
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <osMessageQueueGet+0x34>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003964:	f06f 0303 	mvn.w	r3, #3
 8003968:	61fb      	str	r3, [r7, #28]
 800396a:	e037      	b.n	80039dc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800396c:	2300      	movs	r3, #0
 800396e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003970:	f107 0310 	add.w	r3, r7, #16
 8003974:	461a      	mov	r2, r3
 8003976:	68b9      	ldr	r1, [r7, #8]
 8003978:	69b8      	ldr	r0, [r7, #24]
 800397a:	f000 fcf7 	bl	800436c <xQueueReceiveFromISR>
 800397e:	4603      	mov	r3, r0
 8003980:	2b01      	cmp	r3, #1
 8003982:	d003      	beq.n	800398c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003984:	f06f 0302 	mvn.w	r3, #2
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	e027      	b.n	80039dc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d024      	beq.n	80039dc <osMessageQueueGet+0xac>
 8003992:	4b15      	ldr	r3, [pc, #84]	; (80039e8 <osMessageQueueGet+0xb8>)
 8003994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	f3bf 8f6f 	isb	sy
 80039a2:	e01b      	b.n	80039dc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <osMessageQueueGet+0x80>
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d103      	bne.n	80039b8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80039b0:	f06f 0303 	mvn.w	r3, #3
 80039b4:	61fb      	str	r3, [r7, #28]
 80039b6:	e011      	b.n	80039dc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	68b9      	ldr	r1, [r7, #8]
 80039bc:	69b8      	ldr	r0, [r7, #24]
 80039be:	f000 fbf5 	bl	80041ac <xQueueReceive>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d009      	beq.n	80039dc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80039ce:	f06f 0301 	mvn.w	r3, #1
 80039d2:	61fb      	str	r3, [r7, #28]
 80039d4:	e002      	b.n	80039dc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80039d6:	f06f 0302 	mvn.w	r3, #2
 80039da:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80039dc:	69fb      	ldr	r3, [r7, #28]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3720      	adds	r7, #32
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	e000ed04 	.word	0xe000ed04

080039ec <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d102      	bne.n	8003a04 <osMessageQueueGetCount+0x18>
    count = 0U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	e00e      	b.n	8003a22 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a04:	f3ef 8305 	mrs	r3, IPSR
 8003a08:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d004      	beq.n	8003a1a <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8003a10:	6938      	ldr	r0, [r7, #16]
 8003a12:	f000 fd49 	bl	80044a8 <uxQueueMessagesWaitingFromISR>
 8003a16:	6178      	str	r0, [r7, #20]
 8003a18:	e003      	b.n	8003a22 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8003a1a:	6938      	ldr	r0, [r7, #16]
 8003a1c:	f000 fd26 	bl	800446c <uxQueueMessagesWaiting>
 8003a20:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8003a22:	697b      	ldr	r3, [r7, #20]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4a07      	ldr	r2, [pc, #28]	; (8003a58 <vApplicationGetIdleTaskMemory+0x2c>)
 8003a3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	4a06      	ldr	r2, [pc, #24]	; (8003a5c <vApplicationGetIdleTaskMemory+0x30>)
 8003a42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2280      	movs	r2, #128	; 0x80
 8003a48:	601a      	str	r2, [r3, #0]
}
 8003a4a:	bf00      	nop
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	20000184 	.word	0x20000184
 8003a5c:	20000240 	.word	0x20000240

08003a60 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4a07      	ldr	r2, [pc, #28]	; (8003a8c <vApplicationGetTimerTaskMemory+0x2c>)
 8003a70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	4a06      	ldr	r2, [pc, #24]	; (8003a90 <vApplicationGetTimerTaskMemory+0x30>)
 8003a76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a7e:	601a      	str	r2, [r3, #0]
}
 8003a80:	bf00      	nop
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	20000440 	.word	0x20000440
 8003a90:	200004fc 	.word	0x200004fc

08003a94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f103 0208 	add.w	r2, r3, #8
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8003aac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f103 0208 	add.w	r2, r3, #8
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f103 0208 	add.w	r2, r3, #8
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003aee:	b480      	push	{r7}
 8003af0:	b085      	sub	sp, #20
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	601a      	str	r2, [r3, #0]
}
 8003b2a:	bf00      	nop
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b36:	b480      	push	{r7}
 8003b38:	b085      	sub	sp, #20
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4c:	d103      	bne.n	8003b56 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	e00c      	b.n	8003b70 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3308      	adds	r3, #8
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	e002      	b.n	8003b64 <vListInsert+0x2e>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d2f6      	bcs.n	8003b5e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	1c5a      	adds	r2, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	601a      	str	r2, [r3, #0]
}
 8003b9c:	bf00      	nop
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6892      	ldr	r2, [r2, #8]
 8003bbe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6852      	ldr	r2, [r2, #4]
 8003bc8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d103      	bne.n	8003bdc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	1e5a      	subs	r2, r3, #1
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10a      	bne.n	8003c26 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c14:	f383 8811 	msr	BASEPRI, r3
 8003c18:	f3bf 8f6f 	isb	sy
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c22:	bf00      	nop
 8003c24:	e7fe      	b.n	8003c24 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003c26:	f002 fa25 	bl	8006074 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c32:	68f9      	ldr	r1, [r7, #12]
 8003c34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c36:	fb01 f303 	mul.w	r3, r1, r3
 8003c3a:	441a      	add	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c56:	3b01      	subs	r3, #1
 8003c58:	68f9      	ldr	r1, [r7, #12]
 8003c5a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c5c:	fb01 f303 	mul.w	r3, r1, r3
 8003c60:	441a      	add	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	22ff      	movs	r2, #255	; 0xff
 8003c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	22ff      	movs	r2, #255	; 0xff
 8003c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d114      	bne.n	8003ca6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d01a      	beq.n	8003cba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	3310      	adds	r3, #16
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f001 fa1f 	bl	80050cc <xTaskRemoveFromEventList>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d012      	beq.n	8003cba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c94:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <xQueueGenericReset+0xcc>)
 8003c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	f3bf 8f6f 	isb	sy
 8003ca4:	e009      	b.n	8003cba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	3310      	adds	r3, #16
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff fef2 	bl	8003a94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	3324      	adds	r3, #36	; 0x24
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff feed 	bl	8003a94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003cba:	f002 fa0b 	bl	80060d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003cbe:	2301      	movs	r3, #1
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	e000ed04 	.word	0xe000ed04

08003ccc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08e      	sub	sp, #56	; 0x38
 8003cd0:	af02      	add	r7, sp, #8
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
 8003cd8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10a      	bne.n	8003cf6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce4:	f383 8811 	msr	BASEPRI, r3
 8003ce8:	f3bf 8f6f 	isb	sy
 8003cec:	f3bf 8f4f 	dsb	sy
 8003cf0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003cf2:	bf00      	nop
 8003cf4:	e7fe      	b.n	8003cf4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10a      	bne.n	8003d12 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d00:	f383 8811 	msr	BASEPRI, r3
 8003d04:	f3bf 8f6f 	isb	sy
 8003d08:	f3bf 8f4f 	dsb	sy
 8003d0c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d0e:	bf00      	nop
 8003d10:	e7fe      	b.n	8003d10 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d002      	beq.n	8003d1e <xQueueGenericCreateStatic+0x52>
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <xQueueGenericCreateStatic+0x56>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <xQueueGenericCreateStatic+0x58>
 8003d22:	2300      	movs	r3, #0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10a      	bne.n	8003d3e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2c:	f383 8811 	msr	BASEPRI, r3
 8003d30:	f3bf 8f6f 	isb	sy
 8003d34:	f3bf 8f4f 	dsb	sy
 8003d38:	623b      	str	r3, [r7, #32]
}
 8003d3a:	bf00      	nop
 8003d3c:	e7fe      	b.n	8003d3c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d102      	bne.n	8003d4a <xQueueGenericCreateStatic+0x7e>
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <xQueueGenericCreateStatic+0x82>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e000      	b.n	8003d50 <xQueueGenericCreateStatic+0x84>
 8003d4e:	2300      	movs	r3, #0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10a      	bne.n	8003d6a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d58:	f383 8811 	msr	BASEPRI, r3
 8003d5c:	f3bf 8f6f 	isb	sy
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	61fb      	str	r3, [r7, #28]
}
 8003d66:	bf00      	nop
 8003d68:	e7fe      	b.n	8003d68 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003d6a:	2350      	movs	r3, #80	; 0x50
 8003d6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2b50      	cmp	r3, #80	; 0x50
 8003d72:	d00a      	beq.n	8003d8a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	61bb      	str	r3, [r7, #24]
}
 8003d86:	bf00      	nop
 8003d88:	e7fe      	b.n	8003d88 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003d8a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00d      	beq.n	8003db2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d9e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	4613      	mov	r3, r2
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	68b9      	ldr	r1, [r7, #8]
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 f83f 	bl	8003e30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3730      	adds	r7, #48	; 0x30
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08a      	sub	sp, #40	; 0x28
 8003dc0:	af02      	add	r7, sp, #8
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10a      	bne.n	8003de6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd4:	f383 8811 	msr	BASEPRI, r3
 8003dd8:	f3bf 8f6f 	isb	sy
 8003ddc:	f3bf 8f4f 	dsb	sy
 8003de0:	613b      	str	r3, [r7, #16]
}
 8003de2:	bf00      	nop
 8003de4:	e7fe      	b.n	8003de4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	fb02 f303 	mul.w	r3, r2, r3
 8003dee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	3350      	adds	r3, #80	; 0x50
 8003df4:	4618      	mov	r0, r3
 8003df6:	f002 fa5f 	bl	80062b8 <pvPortMalloc>
 8003dfa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d011      	beq.n	8003e26 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	3350      	adds	r3, #80	; 0x50
 8003e0a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e14:	79fa      	ldrb	r2, [r7, #7]
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	68b9      	ldr	r1, [r7, #8]
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 f805 	bl	8003e30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e26:	69bb      	ldr	r3, [r7, #24]
	}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3720      	adds	r7, #32
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
 8003e3c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d103      	bne.n	8003e4c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	e002      	b.n	8003e52 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e5e:	2101      	movs	r1, #1
 8003e60:	69b8      	ldr	r0, [r7, #24]
 8003e62:	f7ff fecb 	bl	8003bfc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	78fa      	ldrb	r2, [r7, #3]
 8003e6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003e6e:	bf00      	nop
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08e      	sub	sp, #56	; 0x38
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
 8003e84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003e86:	2300      	movs	r3, #0
 8003e88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10a      	bne.n	8003eaa <xQueueGenericSend+0x32>
	__asm volatile
 8003e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e98:	f383 8811 	msr	BASEPRI, r3
 8003e9c:	f3bf 8f6f 	isb	sy
 8003ea0:	f3bf 8f4f 	dsb	sy
 8003ea4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003ea6:	bf00      	nop
 8003ea8:	e7fe      	b.n	8003ea8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d103      	bne.n	8003eb8 <xQueueGenericSend+0x40>
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <xQueueGenericSend+0x44>
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e000      	b.n	8003ebe <xQueueGenericSend+0x46>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10a      	bne.n	8003ed8 <xQueueGenericSend+0x60>
	__asm volatile
 8003ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec6:	f383 8811 	msr	BASEPRI, r3
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ed4:	bf00      	nop
 8003ed6:	e7fe      	b.n	8003ed6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d103      	bne.n	8003ee6 <xQueueGenericSend+0x6e>
 8003ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d101      	bne.n	8003eea <xQueueGenericSend+0x72>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <xQueueGenericSend+0x74>
 8003eea:	2300      	movs	r3, #0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10a      	bne.n	8003f06 <xQueueGenericSend+0x8e>
	__asm volatile
 8003ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef4:	f383 8811 	msr	BASEPRI, r3
 8003ef8:	f3bf 8f6f 	isb	sy
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	623b      	str	r3, [r7, #32]
}
 8003f02:	bf00      	nop
 8003f04:	e7fe      	b.n	8003f04 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f06:	f001 faa3 	bl	8005450 <xTaskGetSchedulerState>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d102      	bne.n	8003f16 <xQueueGenericSend+0x9e>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <xQueueGenericSend+0xa2>
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <xQueueGenericSend+0xa4>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10a      	bne.n	8003f36 <xQueueGenericSend+0xbe>
	__asm volatile
 8003f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	61fb      	str	r3, [r7, #28]
}
 8003f32:	bf00      	nop
 8003f34:	e7fe      	b.n	8003f34 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f36:	f002 f89d 	bl	8006074 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d302      	bcc.n	8003f4c <xQueueGenericSend+0xd4>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d129      	bne.n	8003fa0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	68b9      	ldr	r1, [r7, #8]
 8003f50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f52:	f000 fac7 	bl	80044e4 <prvCopyDataToQueue>
 8003f56:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d010      	beq.n	8003f82 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f62:	3324      	adds	r3, #36	; 0x24
 8003f64:	4618      	mov	r0, r3
 8003f66:	f001 f8b1 	bl	80050cc <xTaskRemoveFromEventList>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d013      	beq.n	8003f98 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003f70:	4b3f      	ldr	r3, [pc, #252]	; (8004070 <xQueueGenericSend+0x1f8>)
 8003f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	f3bf 8f4f 	dsb	sy
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	e00a      	b.n	8003f98 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d007      	beq.n	8003f98 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003f88:	4b39      	ldr	r3, [pc, #228]	; (8004070 <xQueueGenericSend+0x1f8>)
 8003f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003f98:	f002 f89c 	bl	80060d4 <vPortExitCritical>
				return pdPASS;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e063      	b.n	8004068 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d103      	bne.n	8003fae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003fa6:	f002 f895 	bl	80060d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	e05c      	b.n	8004068 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d106      	bne.n	8003fc2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fb4:	f107 0314 	add.w	r3, r7, #20
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f001 f8eb 	bl	8005194 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003fc2:	f002 f887 	bl	80060d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003fc6:	f000 fe57 	bl	8004c78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003fca:	f002 f853 	bl	8006074 <vPortEnterCritical>
 8003fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fd4:	b25b      	sxtb	r3, r3
 8003fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fda:	d103      	bne.n	8003fe4 <xQueueGenericSend+0x16c>
 8003fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fea:	b25b      	sxtb	r3, r3
 8003fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff0:	d103      	bne.n	8003ffa <xQueueGenericSend+0x182>
 8003ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ffa:	f002 f86b 	bl	80060d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ffe:	1d3a      	adds	r2, r7, #4
 8004000:	f107 0314 	add.w	r3, r7, #20
 8004004:	4611      	mov	r1, r2
 8004006:	4618      	mov	r0, r3
 8004008:	f001 f8da 	bl	80051c0 <xTaskCheckForTimeOut>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d124      	bne.n	800405c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004012:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004014:	f000 fb5e 	bl	80046d4 <prvIsQueueFull>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d018      	beq.n	8004050 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800401e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004020:	3310      	adds	r3, #16
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	4611      	mov	r1, r2
 8004026:	4618      	mov	r0, r3
 8004028:	f001 f800 	bl	800502c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800402c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800402e:	f000 fae9 	bl	8004604 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004032:	f000 fe2f 	bl	8004c94 <xTaskResumeAll>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	f47f af7c 	bne.w	8003f36 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800403e:	4b0c      	ldr	r3, [pc, #48]	; (8004070 <xQueueGenericSend+0x1f8>)
 8004040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	f3bf 8f4f 	dsb	sy
 800404a:	f3bf 8f6f 	isb	sy
 800404e:	e772      	b.n	8003f36 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004050:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004052:	f000 fad7 	bl	8004604 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004056:	f000 fe1d 	bl	8004c94 <xTaskResumeAll>
 800405a:	e76c      	b.n	8003f36 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800405c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800405e:	f000 fad1 	bl	8004604 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004062:	f000 fe17 	bl	8004c94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004066:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004068:	4618      	mov	r0, r3
 800406a:	3738      	adds	r7, #56	; 0x38
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	e000ed04 	.word	0xe000ed04

08004074 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b090      	sub	sp, #64	; 0x40
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
 8004080:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10a      	bne.n	80040a2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800408c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004090:	f383 8811 	msr	BASEPRI, r3
 8004094:	f3bf 8f6f 	isb	sy
 8004098:	f3bf 8f4f 	dsb	sy
 800409c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800409e:	bf00      	nop
 80040a0:	e7fe      	b.n	80040a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d103      	bne.n	80040b0 <xQueueGenericSendFromISR+0x3c>
 80040a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <xQueueGenericSendFromISR+0x40>
 80040b0:	2301      	movs	r3, #1
 80040b2:	e000      	b.n	80040b6 <xQueueGenericSendFromISR+0x42>
 80040b4:	2300      	movs	r3, #0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10a      	bne.n	80040d0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80040ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040be:	f383 8811 	msr	BASEPRI, r3
 80040c2:	f3bf 8f6f 	isb	sy
 80040c6:	f3bf 8f4f 	dsb	sy
 80040ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80040cc:	bf00      	nop
 80040ce:	e7fe      	b.n	80040ce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d103      	bne.n	80040de <xQueueGenericSendFromISR+0x6a>
 80040d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d101      	bne.n	80040e2 <xQueueGenericSendFromISR+0x6e>
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <xQueueGenericSendFromISR+0x70>
 80040e2:	2300      	movs	r3, #0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10a      	bne.n	80040fe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80040e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ec:	f383 8811 	msr	BASEPRI, r3
 80040f0:	f3bf 8f6f 	isb	sy
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	623b      	str	r3, [r7, #32]
}
 80040fa:	bf00      	nop
 80040fc:	e7fe      	b.n	80040fc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80040fe:	f002 f89b 	bl	8006238 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004102:	f3ef 8211 	mrs	r2, BASEPRI
 8004106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	61fa      	str	r2, [r7, #28]
 8004118:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800411a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800411c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800411e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004126:	429a      	cmp	r2, r3
 8004128:	d302      	bcc.n	8004130 <xQueueGenericSendFromISR+0xbc>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b02      	cmp	r3, #2
 800412e:	d12f      	bne.n	8004190 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004132:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800413a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	68b9      	ldr	r1, [r7, #8]
 8004144:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004146:	f000 f9cd 	bl	80044e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800414a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800414e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004152:	d112      	bne.n	800417a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	2b00      	cmp	r3, #0
 800415a:	d016      	beq.n	800418a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800415c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415e:	3324      	adds	r3, #36	; 0x24
 8004160:	4618      	mov	r0, r3
 8004162:	f000 ffb3 	bl	80050cc <xTaskRemoveFromEventList>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00e      	beq.n	800418a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00b      	beq.n	800418a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	e007      	b.n	800418a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800417a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800417e:	3301      	adds	r3, #1
 8004180:	b2db      	uxtb	r3, r3
 8004182:	b25a      	sxtb	r2, r3
 8004184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800418a:	2301      	movs	r3, #1
 800418c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800418e:	e001      	b.n	8004194 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004190:	2300      	movs	r3, #0
 8004192:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004196:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800419e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80041a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3740      	adds	r7, #64	; 0x40
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
	...

080041ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b08c      	sub	sp, #48	; 0x30
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80041b8:	2300      	movs	r3, #0
 80041ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80041c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10a      	bne.n	80041dc <xQueueReceive+0x30>
	__asm volatile
 80041c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ca:	f383 8811 	msr	BASEPRI, r3
 80041ce:	f3bf 8f6f 	isb	sy
 80041d2:	f3bf 8f4f 	dsb	sy
 80041d6:	623b      	str	r3, [r7, #32]
}
 80041d8:	bf00      	nop
 80041da:	e7fe      	b.n	80041da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d103      	bne.n	80041ea <xQueueReceive+0x3e>
 80041e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <xQueueReceive+0x42>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <xQueueReceive+0x44>
 80041ee:	2300      	movs	r3, #0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10a      	bne.n	800420a <xQueueReceive+0x5e>
	__asm volatile
 80041f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	61fb      	str	r3, [r7, #28]
}
 8004206:	bf00      	nop
 8004208:	e7fe      	b.n	8004208 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800420a:	f001 f921 	bl	8005450 <xTaskGetSchedulerState>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d102      	bne.n	800421a <xQueueReceive+0x6e>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <xQueueReceive+0x72>
 800421a:	2301      	movs	r3, #1
 800421c:	e000      	b.n	8004220 <xQueueReceive+0x74>
 800421e:	2300      	movs	r3, #0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10a      	bne.n	800423a <xQueueReceive+0x8e>
	__asm volatile
 8004224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004228:	f383 8811 	msr	BASEPRI, r3
 800422c:	f3bf 8f6f 	isb	sy
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	61bb      	str	r3, [r7, #24]
}
 8004236:	bf00      	nop
 8004238:	e7fe      	b.n	8004238 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800423a:	f001 ff1b 	bl	8006074 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800423e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004242:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004246:	2b00      	cmp	r3, #0
 8004248:	d01f      	beq.n	800428a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800424a:	68b9      	ldr	r1, [r7, #8]
 800424c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800424e:	f000 f9b3 	bl	80045b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004254:	1e5a      	subs	r2, r3, #1
 8004256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004258:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800425a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00f      	beq.n	8004282 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004264:	3310      	adds	r3, #16
 8004266:	4618      	mov	r0, r3
 8004268:	f000 ff30 	bl	80050cc <xTaskRemoveFromEventList>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d007      	beq.n	8004282 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004272:	4b3d      	ldr	r3, [pc, #244]	; (8004368 <xQueueReceive+0x1bc>)
 8004274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004278:	601a      	str	r2, [r3, #0]
 800427a:	f3bf 8f4f 	dsb	sy
 800427e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004282:	f001 ff27 	bl	80060d4 <vPortExitCritical>
				return pdPASS;
 8004286:	2301      	movs	r3, #1
 8004288:	e069      	b.n	800435e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d103      	bne.n	8004298 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004290:	f001 ff20 	bl	80060d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004294:	2300      	movs	r3, #0
 8004296:	e062      	b.n	800435e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429a:	2b00      	cmp	r3, #0
 800429c:	d106      	bne.n	80042ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800429e:	f107 0310 	add.w	r3, r7, #16
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 ff76 	bl	8005194 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042a8:	2301      	movs	r3, #1
 80042aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042ac:	f001 ff12 	bl	80060d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042b0:	f000 fce2 	bl	8004c78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042b4:	f001 fede 	bl	8006074 <vPortEnterCritical>
 80042b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042be:	b25b      	sxtb	r3, r3
 80042c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c4:	d103      	bne.n	80042ce <xQueueReceive+0x122>
 80042c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042d4:	b25b      	sxtb	r3, r3
 80042d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042da:	d103      	bne.n	80042e4 <xQueueReceive+0x138>
 80042dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042e4:	f001 fef6 	bl	80060d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042e8:	1d3a      	adds	r2, r7, #4
 80042ea:	f107 0310 	add.w	r3, r7, #16
 80042ee:	4611      	mov	r1, r2
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 ff65 	bl	80051c0 <xTaskCheckForTimeOut>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d123      	bne.n	8004344 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042fe:	f000 f9d3 	bl	80046a8 <prvIsQueueEmpty>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d017      	beq.n	8004338 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430a:	3324      	adds	r3, #36	; 0x24
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	4611      	mov	r1, r2
 8004310:	4618      	mov	r0, r3
 8004312:	f000 fe8b 	bl	800502c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004318:	f000 f974 	bl	8004604 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800431c:	f000 fcba 	bl	8004c94 <xTaskResumeAll>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d189      	bne.n	800423a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004326:	4b10      	ldr	r3, [pc, #64]	; (8004368 <xQueueReceive+0x1bc>)
 8004328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	f3bf 8f4f 	dsb	sy
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	e780      	b.n	800423a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800433a:	f000 f963 	bl	8004604 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800433e:	f000 fca9 	bl	8004c94 <xTaskResumeAll>
 8004342:	e77a      	b.n	800423a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004346:	f000 f95d 	bl	8004604 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800434a:	f000 fca3 	bl	8004c94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800434e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004350:	f000 f9aa 	bl	80046a8 <prvIsQueueEmpty>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	f43f af6f 	beq.w	800423a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800435c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800435e:	4618      	mov	r0, r3
 8004360:	3730      	adds	r7, #48	; 0x30
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	e000ed04 	.word	0xe000ed04

0800436c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b08e      	sub	sp, #56	; 0x38
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800437c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10a      	bne.n	8004398 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004386:	f383 8811 	msr	BASEPRI, r3
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	623b      	str	r3, [r7, #32]
}
 8004394:	bf00      	nop
 8004396:	e7fe      	b.n	8004396 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d103      	bne.n	80043a6 <xQueueReceiveFromISR+0x3a>
 800439e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <xQueueReceiveFromISR+0x3e>
 80043a6:	2301      	movs	r3, #1
 80043a8:	e000      	b.n	80043ac <xQueueReceiveFromISR+0x40>
 80043aa:	2300      	movs	r3, #0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10a      	bne.n	80043c6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80043b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	f3bf 8f6f 	isb	sy
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	61fb      	str	r3, [r7, #28]
}
 80043c2:	bf00      	nop
 80043c4:	e7fe      	b.n	80043c4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043c6:	f001 ff37 	bl	8006238 <vPortValidateInterruptPriority>
	__asm volatile
 80043ca:	f3ef 8211 	mrs	r2, BASEPRI
 80043ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d2:	f383 8811 	msr	BASEPRI, r3
 80043d6:	f3bf 8f6f 	isb	sy
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	61ba      	str	r2, [r7, #24]
 80043e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80043e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80043e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d02f      	beq.n	8004452 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80043f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80043fc:	68b9      	ldr	r1, [r7, #8]
 80043fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004400:	f000 f8da 	bl	80045b8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004406:	1e5a      	subs	r2, r3, #1
 8004408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800440c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004414:	d112      	bne.n	800443c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d016      	beq.n	800444c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800441e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004420:	3310      	adds	r3, #16
 8004422:	4618      	mov	r0, r3
 8004424:	f000 fe52 	bl	80050cc <xTaskRemoveFromEventList>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00e      	beq.n	800444c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00b      	beq.n	800444c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	e007      	b.n	800444c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800443c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004440:	3301      	adds	r3, #1
 8004442:	b2db      	uxtb	r3, r3
 8004444:	b25a      	sxtb	r2, r3
 8004446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800444c:	2301      	movs	r3, #1
 800444e:	637b      	str	r3, [r7, #52]	; 0x34
 8004450:	e001      	b.n	8004456 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004452:	2300      	movs	r3, #0
 8004454:	637b      	str	r3, [r7, #52]	; 0x34
 8004456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004458:	613b      	str	r3, [r7, #16]
	__asm volatile
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	f383 8811 	msr	BASEPRI, r3
}
 8004460:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004464:	4618      	mov	r0, r3
 8004466:	3738      	adds	r7, #56	; 0x38
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10a      	bne.n	8004490 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800447a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447e:	f383 8811 	msr	BASEPRI, r3
 8004482:	f3bf 8f6f 	isb	sy
 8004486:	f3bf 8f4f 	dsb	sy
 800448a:	60bb      	str	r3, [r7, #8]
}
 800448c:	bf00      	nop
 800448e:	e7fe      	b.n	800448e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8004490:	f001 fdf0 	bl	8006074 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800449a:	f001 fe1b 	bl	80060d4 <vPortExitCritical>

	return uxReturn;
 800449e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80044a8:	b480      	push	{r7}
 80044aa:	b087      	sub	sp, #28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10a      	bne.n	80044d0 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80044ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	60fb      	str	r3, [r7, #12]
}
 80044cc:	bf00      	nop
 80044ce:	e7fe      	b.n	80044ce <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d4:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80044d6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80044d8:	4618      	mov	r0, r3
 80044da:	371c      	adds	r7, #28
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80044f0:	2300      	movs	r3, #0
 80044f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10d      	bne.n	800451e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d14d      	bne.n	80045a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	4618      	mov	r0, r3
 8004510:	f000 ffbc 	bl	800548c <xTaskPriorityDisinherit>
 8004514:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	609a      	str	r2, [r3, #8]
 800451c:	e043      	b.n	80045a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d119      	bne.n	8004558 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6858      	ldr	r0, [r3, #4]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	461a      	mov	r2, r3
 800452e:	68b9      	ldr	r1, [r7, #8]
 8004530:	f002 f8d2 	bl	80066d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453c:	441a      	add	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	429a      	cmp	r2, r3
 800454c:	d32b      	bcc.n	80045a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	605a      	str	r2, [r3, #4]
 8004556:	e026      	b.n	80045a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	68d8      	ldr	r0, [r3, #12]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	461a      	mov	r2, r3
 8004562:	68b9      	ldr	r1, [r7, #8]
 8004564:	f002 f8b8 	bl	80066d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	68da      	ldr	r2, [r3, #12]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	425b      	negs	r3, r3
 8004572:	441a      	add	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	68da      	ldr	r2, [r3, #12]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	429a      	cmp	r2, r3
 8004582:	d207      	bcs.n	8004594 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458c:	425b      	negs	r3, r3
 800458e:	441a      	add	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b02      	cmp	r3, #2
 8004598:	d105      	bne.n	80045a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d002      	beq.n	80045a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80045ae:	697b      	ldr	r3, [r7, #20]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3718      	adds	r7, #24
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d018      	beq.n	80045fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	441a      	add	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68da      	ldr	r2, [r3, #12]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d303      	bcc.n	80045ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68d9      	ldr	r1, [r3, #12]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f4:	461a      	mov	r2, r3
 80045f6:	6838      	ldr	r0, [r7, #0]
 80045f8:	f002 f86e 	bl	80066d8 <memcpy>
	}
}
 80045fc:	bf00      	nop
 80045fe:	3708      	adds	r7, #8
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800460c:	f001 fd32 	bl	8006074 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004616:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004618:	e011      	b.n	800463e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	2b00      	cmp	r3, #0
 8004620:	d012      	beq.n	8004648 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	3324      	adds	r3, #36	; 0x24
 8004626:	4618      	mov	r0, r3
 8004628:	f000 fd50 	bl	80050cc <xTaskRemoveFromEventList>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004632:	f000 fe27 	bl	8005284 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004636:	7bfb      	ldrb	r3, [r7, #15]
 8004638:	3b01      	subs	r3, #1
 800463a:	b2db      	uxtb	r3, r3
 800463c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800463e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004642:	2b00      	cmp	r3, #0
 8004644:	dce9      	bgt.n	800461a <prvUnlockQueue+0x16>
 8004646:	e000      	b.n	800464a <prvUnlockQueue+0x46>
					break;
 8004648:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	22ff      	movs	r2, #255	; 0xff
 800464e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004652:	f001 fd3f 	bl	80060d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004656:	f001 fd0d 	bl	8006074 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004660:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004662:	e011      	b.n	8004688 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d012      	beq.n	8004692 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3310      	adds	r3, #16
 8004670:	4618      	mov	r0, r3
 8004672:	f000 fd2b 	bl	80050cc <xTaskRemoveFromEventList>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800467c:	f000 fe02 	bl	8005284 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004680:	7bbb      	ldrb	r3, [r7, #14]
 8004682:	3b01      	subs	r3, #1
 8004684:	b2db      	uxtb	r3, r3
 8004686:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004688:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800468c:	2b00      	cmp	r3, #0
 800468e:	dce9      	bgt.n	8004664 <prvUnlockQueue+0x60>
 8004690:	e000      	b.n	8004694 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004692:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	22ff      	movs	r2, #255	; 0xff
 8004698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800469c:	f001 fd1a 	bl	80060d4 <vPortExitCritical>
}
 80046a0:	bf00      	nop
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046b0:	f001 fce0 	bl	8006074 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d102      	bne.n	80046c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80046bc:	2301      	movs	r3, #1
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	e001      	b.n	80046c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80046c2:	2300      	movs	r3, #0
 80046c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046c6:	f001 fd05 	bl	80060d4 <vPortExitCritical>

	return xReturn;
 80046ca:	68fb      	ldr	r3, [r7, #12]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046dc:	f001 fcca 	bl	8006074 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d102      	bne.n	80046f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80046ec:	2301      	movs	r3, #1
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	e001      	b.n	80046f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80046f2:	2300      	movs	r3, #0
 80046f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046f6:	f001 fced 	bl	80060d4 <vPortExitCritical>

	return xReturn;
 80046fa:	68fb      	ldr	r3, [r7, #12]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800470e:	2300      	movs	r3, #0
 8004710:	60fb      	str	r3, [r7, #12]
 8004712:	e014      	b.n	800473e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004714:	4a0f      	ldr	r2, [pc, #60]	; (8004754 <vQueueAddToRegistry+0x50>)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10b      	bne.n	8004738 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004720:	490c      	ldr	r1, [pc, #48]	; (8004754 <vQueueAddToRegistry+0x50>)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800472a:	4a0a      	ldr	r2, [pc, #40]	; (8004754 <vQueueAddToRegistry+0x50>)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	4413      	add	r3, r2
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004736:	e006      	b.n	8004746 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	3301      	adds	r3, #1
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2b07      	cmp	r3, #7
 8004742:	d9e7      	bls.n	8004714 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004744:	bf00      	nop
 8004746:	bf00      	nop
 8004748:	3714      	adds	r7, #20
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	200008fc 	.word	0x200008fc

08004758 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004768:	f001 fc84 	bl	8006074 <vPortEnterCritical>
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004772:	b25b      	sxtb	r3, r3
 8004774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004778:	d103      	bne.n	8004782 <vQueueWaitForMessageRestricted+0x2a>
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004788:	b25b      	sxtb	r3, r3
 800478a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478e:	d103      	bne.n	8004798 <vQueueWaitForMessageRestricted+0x40>
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004798:	f001 fc9c 	bl	80060d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d106      	bne.n	80047b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	3324      	adds	r3, #36	; 0x24
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	68b9      	ldr	r1, [r7, #8]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 fc61 	bl	8005074 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80047b2:	6978      	ldr	r0, [r7, #20]
 80047b4:	f7ff ff26 	bl	8004604 <prvUnlockQueue>
	}
 80047b8:	bf00      	nop
 80047ba:	3718      	adds	r7, #24
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b08e      	sub	sp, #56	; 0x38
 80047c4:	af04      	add	r7, sp, #16
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
 80047cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80047ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10a      	bne.n	80047ea <xTaskCreateStatic+0x2a>
	__asm volatile
 80047d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	623b      	str	r3, [r7, #32]
}
 80047e6:	bf00      	nop
 80047e8:	e7fe      	b.n	80047e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80047ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10a      	bne.n	8004806 <xTaskCreateStatic+0x46>
	__asm volatile
 80047f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	61fb      	str	r3, [r7, #28]
}
 8004802:	bf00      	nop
 8004804:	e7fe      	b.n	8004804 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004806:	23bc      	movs	r3, #188	; 0xbc
 8004808:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2bbc      	cmp	r3, #188	; 0xbc
 800480e:	d00a      	beq.n	8004826 <xTaskCreateStatic+0x66>
	__asm volatile
 8004810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	61bb      	str	r3, [r7, #24]
}
 8004822:	bf00      	nop
 8004824:	e7fe      	b.n	8004824 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004826:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482a:	2b00      	cmp	r3, #0
 800482c:	d01e      	beq.n	800486c <xTaskCreateStatic+0xac>
 800482e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004830:	2b00      	cmp	r3, #0
 8004832:	d01b      	beq.n	800486c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004836:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800483c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004840:	2202      	movs	r2, #2
 8004842:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004846:	2300      	movs	r3, #0
 8004848:	9303      	str	r3, [sp, #12]
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	9302      	str	r3, [sp, #8]
 800484e:	f107 0314 	add.w	r3, r7, #20
 8004852:	9301      	str	r3, [sp, #4]
 8004854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	68b9      	ldr	r1, [r7, #8]
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 f850 	bl	8004904 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004864:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004866:	f000 f8f3 	bl	8004a50 <prvAddNewTaskToReadyList>
 800486a:	e001      	b.n	8004870 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800486c:	2300      	movs	r3, #0
 800486e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004870:	697b      	ldr	r3, [r7, #20]
	}
 8004872:	4618      	mov	r0, r3
 8004874:	3728      	adds	r7, #40	; 0x28
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800487a:	b580      	push	{r7, lr}
 800487c:	b08c      	sub	sp, #48	; 0x30
 800487e:	af04      	add	r7, sp, #16
 8004880:	60f8      	str	r0, [r7, #12]
 8004882:	60b9      	str	r1, [r7, #8]
 8004884:	603b      	str	r3, [r7, #0]
 8004886:	4613      	mov	r3, r2
 8004888:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800488a:	88fb      	ldrh	r3, [r7, #6]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4618      	mov	r0, r3
 8004890:	f001 fd12 	bl	80062b8 <pvPortMalloc>
 8004894:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00e      	beq.n	80048ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800489c:	20bc      	movs	r0, #188	; 0xbc
 800489e:	f001 fd0b 	bl	80062b8 <pvPortMalloc>
 80048a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	631a      	str	r2, [r3, #48]	; 0x30
 80048b0:	e005      	b.n	80048be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80048b2:	6978      	ldr	r0, [r7, #20]
 80048b4:	f001 fdcc 	bl	8006450 <vPortFree>
 80048b8:	e001      	b.n	80048be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80048ba:	2300      	movs	r3, #0
 80048bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d017      	beq.n	80048f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80048cc:	88fa      	ldrh	r2, [r7, #6]
 80048ce:	2300      	movs	r3, #0
 80048d0:	9303      	str	r3, [sp, #12]
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	9302      	str	r3, [sp, #8]
 80048d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d8:	9301      	str	r3, [sp, #4]
 80048da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	68b9      	ldr	r1, [r7, #8]
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 f80e 	bl	8004904 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048e8:	69f8      	ldr	r0, [r7, #28]
 80048ea:	f000 f8b1 	bl	8004a50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80048ee:	2301      	movs	r3, #1
 80048f0:	61bb      	str	r3, [r7, #24]
 80048f2:	e002      	b.n	80048fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80048f4:	f04f 33ff 	mov.w	r3, #4294967295
 80048f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80048fa:	69bb      	ldr	r3, [r7, #24]
	}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3720      	adds	r7, #32
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b088      	sub	sp, #32
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
 8004910:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004914:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	461a      	mov	r2, r3
 800491c:	21a5      	movs	r1, #165	; 0xa5
 800491e:	f001 fee9 	bl	80066f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800492c:	3b01      	subs	r3, #1
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	f023 0307 	bic.w	r3, r3, #7
 800493a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	f003 0307 	and.w	r3, r3, #7
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00a      	beq.n	800495c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494a:	f383 8811 	msr	BASEPRI, r3
 800494e:	f3bf 8f6f 	isb	sy
 8004952:	f3bf 8f4f 	dsb	sy
 8004956:	617b      	str	r3, [r7, #20]
}
 8004958:	bf00      	nop
 800495a:	e7fe      	b.n	800495a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d01f      	beq.n	80049a2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004962:	2300      	movs	r3, #0
 8004964:	61fb      	str	r3, [r7, #28]
 8004966:	e012      	b.n	800498e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	4413      	add	r3, r2
 800496e:	7819      	ldrb	r1, [r3, #0]
 8004970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	4413      	add	r3, r2
 8004976:	3334      	adds	r3, #52	; 0x34
 8004978:	460a      	mov	r2, r1
 800497a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	4413      	add	r3, r2
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d006      	beq.n	8004996 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	3301      	adds	r3, #1
 800498c:	61fb      	str	r3, [r7, #28]
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	2b0f      	cmp	r3, #15
 8004992:	d9e9      	bls.n	8004968 <prvInitialiseNewTask+0x64>
 8004994:	e000      	b.n	8004998 <prvInitialiseNewTask+0x94>
			{
				break;
 8004996:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049a0:	e003      	b.n	80049aa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80049a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80049aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ac:	2b37      	cmp	r3, #55	; 0x37
 80049ae:	d901      	bls.n	80049b4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80049b0:	2337      	movs	r3, #55	; 0x37
 80049b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80049b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80049ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80049c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c2:	2200      	movs	r2, #0
 80049c4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80049c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c8:	3304      	adds	r3, #4
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7ff f882 	bl	8003ad4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80049d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d2:	3318      	adds	r3, #24
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7ff f87d 	bl	8003ad4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80049da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80049e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80049ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80049f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f2:	2200      	movs	r2, #0
 80049f4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80049f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a02:	3354      	adds	r3, #84	; 0x54
 8004a04:	2260      	movs	r2, #96	; 0x60
 8004a06:	2100      	movs	r1, #0
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f001 fe73 	bl	80066f4 <memset>
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a10:	4a0c      	ldr	r2, [pc, #48]	; (8004a44 <prvInitialiseNewTask+0x140>)
 8004a12:	659a      	str	r2, [r3, #88]	; 0x58
 8004a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a16:	4a0c      	ldr	r2, [pc, #48]	; (8004a48 <prvInitialiseNewTask+0x144>)
 8004a18:	65da      	str	r2, [r3, #92]	; 0x5c
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1c:	4a0b      	ldr	r2, [pc, #44]	; (8004a4c <prvInitialiseNewTask+0x148>)
 8004a1e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	68f9      	ldr	r1, [r7, #12]
 8004a24:	69b8      	ldr	r0, [r7, #24]
 8004a26:	f001 f9fb 	bl	8005e20 <pxPortInitialiseStack>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a3a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a3c:	bf00      	nop
 8004a3e:	3720      	adds	r7, #32
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	0800695c 	.word	0x0800695c
 8004a48:	0800697c 	.word	0x0800697c
 8004a4c:	0800693c 	.word	0x0800693c

08004a50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a58:	f001 fb0c 	bl	8006074 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a5c:	4b2d      	ldr	r3, [pc, #180]	; (8004b14 <prvAddNewTaskToReadyList+0xc4>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	3301      	adds	r3, #1
 8004a62:	4a2c      	ldr	r2, [pc, #176]	; (8004b14 <prvAddNewTaskToReadyList+0xc4>)
 8004a64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a66:	4b2c      	ldr	r3, [pc, #176]	; (8004b18 <prvAddNewTaskToReadyList+0xc8>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d109      	bne.n	8004a82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a6e:	4a2a      	ldr	r2, [pc, #168]	; (8004b18 <prvAddNewTaskToReadyList+0xc8>)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a74:	4b27      	ldr	r3, [pc, #156]	; (8004b14 <prvAddNewTaskToReadyList+0xc4>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d110      	bne.n	8004a9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a7c:	f000 fc26 	bl	80052cc <prvInitialiseTaskLists>
 8004a80:	e00d      	b.n	8004a9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a82:	4b26      	ldr	r3, [pc, #152]	; (8004b1c <prvAddNewTaskToReadyList+0xcc>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d109      	bne.n	8004a9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a8a:	4b23      	ldr	r3, [pc, #140]	; (8004b18 <prvAddNewTaskToReadyList+0xc8>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d802      	bhi.n	8004a9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a98:	4a1f      	ldr	r2, [pc, #124]	; (8004b18 <prvAddNewTaskToReadyList+0xc8>)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a9e:	4b20      	ldr	r3, [pc, #128]	; (8004b20 <prvAddNewTaskToReadyList+0xd0>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	4a1e      	ldr	r2, [pc, #120]	; (8004b20 <prvAddNewTaskToReadyList+0xd0>)
 8004aa6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004aa8:	4b1d      	ldr	r3, [pc, #116]	; (8004b20 <prvAddNewTaskToReadyList+0xd0>)
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab4:	4b1b      	ldr	r3, [pc, #108]	; (8004b24 <prvAddNewTaskToReadyList+0xd4>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d903      	bls.n	8004ac4 <prvAddNewTaskToReadyList+0x74>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac0:	4a18      	ldr	r2, [pc, #96]	; (8004b24 <prvAddNewTaskToReadyList+0xd4>)
 8004ac2:	6013      	str	r3, [r2, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac8:	4613      	mov	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4a15      	ldr	r2, [pc, #84]	; (8004b28 <prvAddNewTaskToReadyList+0xd8>)
 8004ad2:	441a      	add	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	3304      	adds	r3, #4
 8004ad8:	4619      	mov	r1, r3
 8004ada:	4610      	mov	r0, r2
 8004adc:	f7ff f807 	bl	8003aee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ae0:	f001 faf8 	bl	80060d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ae4:	4b0d      	ldr	r3, [pc, #52]	; (8004b1c <prvAddNewTaskToReadyList+0xcc>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00e      	beq.n	8004b0a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004aec:	4b0a      	ldr	r3, [pc, #40]	; (8004b18 <prvAddNewTaskToReadyList+0xc8>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d207      	bcs.n	8004b0a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004afa:	4b0c      	ldr	r3, [pc, #48]	; (8004b2c <prvAddNewTaskToReadyList+0xdc>)
 8004afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	f3bf 8f4f 	dsb	sy
 8004b06:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b0a:	bf00      	nop
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	20000e10 	.word	0x20000e10
 8004b18:	2000093c 	.word	0x2000093c
 8004b1c:	20000e1c 	.word	0x20000e1c
 8004b20:	20000e2c 	.word	0x20000e2c
 8004b24:	20000e18 	.word	0x20000e18
 8004b28:	20000940 	.word	0x20000940
 8004b2c:	e000ed04 	.word	0xe000ed04

08004b30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d017      	beq.n	8004b72 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b42:	4b13      	ldr	r3, [pc, #76]	; (8004b90 <vTaskDelay+0x60>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <vTaskDelay+0x30>
	__asm volatile
 8004b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4e:	f383 8811 	msr	BASEPRI, r3
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	60bb      	str	r3, [r7, #8]
}
 8004b5c:	bf00      	nop
 8004b5e:	e7fe      	b.n	8004b5e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004b60:	f000 f88a 	bl	8004c78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b64:	2100      	movs	r1, #0
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 fcfe 	bl	8005568 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b6c:	f000 f892 	bl	8004c94 <xTaskResumeAll>
 8004b70:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d107      	bne.n	8004b88 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004b78:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <vTaskDelay+0x64>)
 8004b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b88:	bf00      	nop
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	20000e38 	.word	0x20000e38
 8004b94:	e000ed04 	.word	0xe000ed04

08004b98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b08a      	sub	sp, #40	; 0x28
 8004b9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004ba6:	463a      	mov	r2, r7
 8004ba8:	1d39      	adds	r1, r7, #4
 8004baa:	f107 0308 	add.w	r3, r7, #8
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fe ff3c 	bl	8003a2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004bb4:	6839      	ldr	r1, [r7, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	9202      	str	r2, [sp, #8]
 8004bbc:	9301      	str	r3, [sp, #4]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	460a      	mov	r2, r1
 8004bc6:	4924      	ldr	r1, [pc, #144]	; (8004c58 <vTaskStartScheduler+0xc0>)
 8004bc8:	4824      	ldr	r0, [pc, #144]	; (8004c5c <vTaskStartScheduler+0xc4>)
 8004bca:	f7ff fdf9 	bl	80047c0 <xTaskCreateStatic>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	4a23      	ldr	r2, [pc, #140]	; (8004c60 <vTaskStartScheduler+0xc8>)
 8004bd2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004bd4:	4b22      	ldr	r3, [pc, #136]	; (8004c60 <vTaskStartScheduler+0xc8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d002      	beq.n	8004be2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	617b      	str	r3, [r7, #20]
 8004be0:	e001      	b.n	8004be6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004be2:	2300      	movs	r3, #0
 8004be4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d102      	bne.n	8004bf2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004bec:	f000 fd10 	bl	8005610 <xTimerCreateTimerTask>
 8004bf0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d11b      	bne.n	8004c30 <vTaskStartScheduler+0x98>
	__asm volatile
 8004bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfc:	f383 8811 	msr	BASEPRI, r3
 8004c00:	f3bf 8f6f 	isb	sy
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	613b      	str	r3, [r7, #16]
}
 8004c0a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c0c:	4b15      	ldr	r3, [pc, #84]	; (8004c64 <vTaskStartScheduler+0xcc>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3354      	adds	r3, #84	; 0x54
 8004c12:	4a15      	ldr	r2, [pc, #84]	; (8004c68 <vTaskStartScheduler+0xd0>)
 8004c14:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c16:	4b15      	ldr	r3, [pc, #84]	; (8004c6c <vTaskStartScheduler+0xd4>)
 8004c18:	f04f 32ff 	mov.w	r2, #4294967295
 8004c1c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c1e:	4b14      	ldr	r3, [pc, #80]	; (8004c70 <vTaskStartScheduler+0xd8>)
 8004c20:	2201      	movs	r2, #1
 8004c22:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c24:	4b13      	ldr	r3, [pc, #76]	; (8004c74 <vTaskStartScheduler+0xdc>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c2a:	f001 f981 	bl	8005f30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c2e:	e00e      	b.n	8004c4e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c36:	d10a      	bne.n	8004c4e <vTaskStartScheduler+0xb6>
	__asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	60fb      	str	r3, [r7, #12]
}
 8004c4a:	bf00      	nop
 8004c4c:	e7fe      	b.n	8004c4c <vTaskStartScheduler+0xb4>
}
 8004c4e:	bf00      	nop
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	080068c0 	.word	0x080068c0
 8004c5c:	0800529d 	.word	0x0800529d
 8004c60:	20000e34 	.word	0x20000e34
 8004c64:	2000093c 	.word	0x2000093c
 8004c68:	20000010 	.word	0x20000010
 8004c6c:	20000e30 	.word	0x20000e30
 8004c70:	20000e1c 	.word	0x20000e1c
 8004c74:	20000e14 	.word	0x20000e14

08004c78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004c7c:	4b04      	ldr	r3, [pc, #16]	; (8004c90 <vTaskSuspendAll+0x18>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	3301      	adds	r3, #1
 8004c82:	4a03      	ldr	r2, [pc, #12]	; (8004c90 <vTaskSuspendAll+0x18>)
 8004c84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004c86:	bf00      	nop
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	20000e38 	.word	0x20000e38

08004c94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ca2:	4b42      	ldr	r3, [pc, #264]	; (8004dac <xTaskResumeAll+0x118>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10a      	bne.n	8004cc0 <xTaskResumeAll+0x2c>
	__asm volatile
 8004caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cae:	f383 8811 	msr	BASEPRI, r3
 8004cb2:	f3bf 8f6f 	isb	sy
 8004cb6:	f3bf 8f4f 	dsb	sy
 8004cba:	603b      	str	r3, [r7, #0]
}
 8004cbc:	bf00      	nop
 8004cbe:	e7fe      	b.n	8004cbe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004cc0:	f001 f9d8 	bl	8006074 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004cc4:	4b39      	ldr	r3, [pc, #228]	; (8004dac <xTaskResumeAll+0x118>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	4a38      	ldr	r2, [pc, #224]	; (8004dac <xTaskResumeAll+0x118>)
 8004ccc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cce:	4b37      	ldr	r3, [pc, #220]	; (8004dac <xTaskResumeAll+0x118>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d162      	bne.n	8004d9c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004cd6:	4b36      	ldr	r3, [pc, #216]	; (8004db0 <xTaskResumeAll+0x11c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d05e      	beq.n	8004d9c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cde:	e02f      	b.n	8004d40 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ce0:	4b34      	ldr	r3, [pc, #208]	; (8004db4 <xTaskResumeAll+0x120>)
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	3318      	adds	r3, #24
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7fe ff5b 	bl	8003ba8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fe ff56 	bl	8003ba8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d00:	4b2d      	ldr	r3, [pc, #180]	; (8004db8 <xTaskResumeAll+0x124>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d903      	bls.n	8004d10 <xTaskResumeAll+0x7c>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0c:	4a2a      	ldr	r2, [pc, #168]	; (8004db8 <xTaskResumeAll+0x124>)
 8004d0e:	6013      	str	r3, [r2, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d14:	4613      	mov	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4a27      	ldr	r2, [pc, #156]	; (8004dbc <xTaskResumeAll+0x128>)
 8004d1e:	441a      	add	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	3304      	adds	r3, #4
 8004d24:	4619      	mov	r1, r3
 8004d26:	4610      	mov	r0, r2
 8004d28:	f7fe fee1 	bl	8003aee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d30:	4b23      	ldr	r3, [pc, #140]	; (8004dc0 <xTaskResumeAll+0x12c>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d302      	bcc.n	8004d40 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004d3a:	4b22      	ldr	r3, [pc, #136]	; (8004dc4 <xTaskResumeAll+0x130>)
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d40:	4b1c      	ldr	r3, [pc, #112]	; (8004db4 <xTaskResumeAll+0x120>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1cb      	bne.n	8004ce0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d4e:	f000 fb5f 	bl	8005410 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d52:	4b1d      	ldr	r3, [pc, #116]	; (8004dc8 <xTaskResumeAll+0x134>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d010      	beq.n	8004d80 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d5e:	f000 f847 	bl	8004df0 <xTaskIncrementTick>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004d68:	4b16      	ldr	r3, [pc, #88]	; (8004dc4 <xTaskResumeAll+0x130>)
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	3b01      	subs	r3, #1
 8004d72:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1f1      	bne.n	8004d5e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004d7a:	4b13      	ldr	r3, [pc, #76]	; (8004dc8 <xTaskResumeAll+0x134>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d80:	4b10      	ldr	r3, [pc, #64]	; (8004dc4 <xTaskResumeAll+0x130>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d009      	beq.n	8004d9c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d8c:	4b0f      	ldr	r3, [pc, #60]	; (8004dcc <xTaskResumeAll+0x138>)
 8004d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d9c:	f001 f99a 	bl	80060d4 <vPortExitCritical>

	return xAlreadyYielded;
 8004da0:	68bb      	ldr	r3, [r7, #8]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	20000e38 	.word	0x20000e38
 8004db0:	20000e10 	.word	0x20000e10
 8004db4:	20000dd0 	.word	0x20000dd0
 8004db8:	20000e18 	.word	0x20000e18
 8004dbc:	20000940 	.word	0x20000940
 8004dc0:	2000093c 	.word	0x2000093c
 8004dc4:	20000e24 	.word	0x20000e24
 8004dc8:	20000e20 	.word	0x20000e20
 8004dcc:	e000ed04 	.word	0xe000ed04

08004dd0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004dd6:	4b05      	ldr	r3, [pc, #20]	; (8004dec <xTaskGetTickCount+0x1c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004ddc:	687b      	ldr	r3, [r7, #4]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	20000e14 	.word	0x20000e14

08004df0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004df6:	2300      	movs	r3, #0
 8004df8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dfa:	4b4f      	ldr	r3, [pc, #316]	; (8004f38 <xTaskIncrementTick+0x148>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f040 808f 	bne.w	8004f22 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e04:	4b4d      	ldr	r3, [pc, #308]	; (8004f3c <xTaskIncrementTick+0x14c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e0c:	4a4b      	ldr	r2, [pc, #300]	; (8004f3c <xTaskIncrementTick+0x14c>)
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d120      	bne.n	8004e5a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e18:	4b49      	ldr	r3, [pc, #292]	; (8004f40 <xTaskIncrementTick+0x150>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <xTaskIncrementTick+0x48>
	__asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	603b      	str	r3, [r7, #0]
}
 8004e34:	bf00      	nop
 8004e36:	e7fe      	b.n	8004e36 <xTaskIncrementTick+0x46>
 8004e38:	4b41      	ldr	r3, [pc, #260]	; (8004f40 <xTaskIncrementTick+0x150>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	60fb      	str	r3, [r7, #12]
 8004e3e:	4b41      	ldr	r3, [pc, #260]	; (8004f44 <xTaskIncrementTick+0x154>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a3f      	ldr	r2, [pc, #252]	; (8004f40 <xTaskIncrementTick+0x150>)
 8004e44:	6013      	str	r3, [r2, #0]
 8004e46:	4a3f      	ldr	r2, [pc, #252]	; (8004f44 <xTaskIncrementTick+0x154>)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6013      	str	r3, [r2, #0]
 8004e4c:	4b3e      	ldr	r3, [pc, #248]	; (8004f48 <xTaskIncrementTick+0x158>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3301      	adds	r3, #1
 8004e52:	4a3d      	ldr	r2, [pc, #244]	; (8004f48 <xTaskIncrementTick+0x158>)
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	f000 fadb 	bl	8005410 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e5a:	4b3c      	ldr	r3, [pc, #240]	; (8004f4c <xTaskIncrementTick+0x15c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d349      	bcc.n	8004ef8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e64:	4b36      	ldr	r3, [pc, #216]	; (8004f40 <xTaskIncrementTick+0x150>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d104      	bne.n	8004e78 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e6e:	4b37      	ldr	r3, [pc, #220]	; (8004f4c <xTaskIncrementTick+0x15c>)
 8004e70:	f04f 32ff 	mov.w	r2, #4294967295
 8004e74:	601a      	str	r2, [r3, #0]
					break;
 8004e76:	e03f      	b.n	8004ef8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e78:	4b31      	ldr	r3, [pc, #196]	; (8004f40 <xTaskIncrementTick+0x150>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d203      	bcs.n	8004e98 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e90:	4a2e      	ldr	r2, [pc, #184]	; (8004f4c <xTaskIncrementTick+0x15c>)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004e96:	e02f      	b.n	8004ef8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fe fe83 	bl	8003ba8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d004      	beq.n	8004eb4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	3318      	adds	r3, #24
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7fe fe7a 	bl	8003ba8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb8:	4b25      	ldr	r3, [pc, #148]	; (8004f50 <xTaskIncrementTick+0x160>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d903      	bls.n	8004ec8 <xTaskIncrementTick+0xd8>
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec4:	4a22      	ldr	r2, [pc, #136]	; (8004f50 <xTaskIncrementTick+0x160>)
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ecc:	4613      	mov	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4a1f      	ldr	r2, [pc, #124]	; (8004f54 <xTaskIncrementTick+0x164>)
 8004ed6:	441a      	add	r2, r3
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	3304      	adds	r3, #4
 8004edc:	4619      	mov	r1, r3
 8004ede:	4610      	mov	r0, r2
 8004ee0:	f7fe fe05 	bl	8003aee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee8:	4b1b      	ldr	r3, [pc, #108]	; (8004f58 <xTaskIncrementTick+0x168>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d3b8      	bcc.n	8004e64 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ef6:	e7b5      	b.n	8004e64 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ef8:	4b17      	ldr	r3, [pc, #92]	; (8004f58 <xTaskIncrementTick+0x168>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004efe:	4915      	ldr	r1, [pc, #84]	; (8004f54 <xTaskIncrementTick+0x164>)
 8004f00:	4613      	mov	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	440b      	add	r3, r1
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d901      	bls.n	8004f14 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004f10:	2301      	movs	r3, #1
 8004f12:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004f14:	4b11      	ldr	r3, [pc, #68]	; (8004f5c <xTaskIncrementTick+0x16c>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d007      	beq.n	8004f2c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	e004      	b.n	8004f2c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004f22:	4b0f      	ldr	r3, [pc, #60]	; (8004f60 <xTaskIncrementTick+0x170>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	3301      	adds	r3, #1
 8004f28:	4a0d      	ldr	r2, [pc, #52]	; (8004f60 <xTaskIncrementTick+0x170>)
 8004f2a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004f2c:	697b      	ldr	r3, [r7, #20]
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	20000e38 	.word	0x20000e38
 8004f3c:	20000e14 	.word	0x20000e14
 8004f40:	20000dc8 	.word	0x20000dc8
 8004f44:	20000dcc 	.word	0x20000dcc
 8004f48:	20000e28 	.word	0x20000e28
 8004f4c:	20000e30 	.word	0x20000e30
 8004f50:	20000e18 	.word	0x20000e18
 8004f54:	20000940 	.word	0x20000940
 8004f58:	2000093c 	.word	0x2000093c
 8004f5c:	20000e24 	.word	0x20000e24
 8004f60:	20000e20 	.word	0x20000e20

08004f64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f6a:	4b2a      	ldr	r3, [pc, #168]	; (8005014 <vTaskSwitchContext+0xb0>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f72:	4b29      	ldr	r3, [pc, #164]	; (8005018 <vTaskSwitchContext+0xb4>)
 8004f74:	2201      	movs	r2, #1
 8004f76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f78:	e046      	b.n	8005008 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004f7a:	4b27      	ldr	r3, [pc, #156]	; (8005018 <vTaskSwitchContext+0xb4>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f80:	4b26      	ldr	r3, [pc, #152]	; (800501c <vTaskSwitchContext+0xb8>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	e010      	b.n	8004faa <vTaskSwitchContext+0x46>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10a      	bne.n	8004fa4 <vTaskSwitchContext+0x40>
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	607b      	str	r3, [r7, #4]
}
 8004fa0:	bf00      	nop
 8004fa2:	e7fe      	b.n	8004fa2 <vTaskSwitchContext+0x3e>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	491d      	ldr	r1, [pc, #116]	; (8005020 <vTaskSwitchContext+0xbc>)
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	440b      	add	r3, r1
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0e4      	beq.n	8004f88 <vTaskSwitchContext+0x24>
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4a15      	ldr	r2, [pc, #84]	; (8005020 <vTaskSwitchContext+0xbc>)
 8004fca:	4413      	add	r3, r2
 8004fcc:	60bb      	str	r3, [r7, #8]
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	605a      	str	r2, [r3, #4]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	3308      	adds	r3, #8
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d104      	bne.n	8004fee <vTaskSwitchContext+0x8a>
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	605a      	str	r2, [r3, #4]
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	4a0b      	ldr	r2, [pc, #44]	; (8005024 <vTaskSwitchContext+0xc0>)
 8004ff6:	6013      	str	r3, [r2, #0]
 8004ff8:	4a08      	ldr	r2, [pc, #32]	; (800501c <vTaskSwitchContext+0xb8>)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004ffe:	4b09      	ldr	r3, [pc, #36]	; (8005024 <vTaskSwitchContext+0xc0>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	3354      	adds	r3, #84	; 0x54
 8005004:	4a08      	ldr	r2, [pc, #32]	; (8005028 <vTaskSwitchContext+0xc4>)
 8005006:	6013      	str	r3, [r2, #0]
}
 8005008:	bf00      	nop
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	20000e38 	.word	0x20000e38
 8005018:	20000e24 	.word	0x20000e24
 800501c:	20000e18 	.word	0x20000e18
 8005020:	20000940 	.word	0x20000940
 8005024:	2000093c 	.word	0x2000093c
 8005028:	20000010 	.word	0x20000010

0800502c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d10a      	bne.n	8005052 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800503c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	60fb      	str	r3, [r7, #12]
}
 800504e:	bf00      	nop
 8005050:	e7fe      	b.n	8005050 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005052:	4b07      	ldr	r3, [pc, #28]	; (8005070 <vTaskPlaceOnEventList+0x44>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	3318      	adds	r3, #24
 8005058:	4619      	mov	r1, r3
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7fe fd6b 	bl	8003b36 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005060:	2101      	movs	r1, #1
 8005062:	6838      	ldr	r0, [r7, #0]
 8005064:	f000 fa80 	bl	8005568 <prvAddCurrentTaskToDelayedList>
}
 8005068:	bf00      	nop
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	2000093c 	.word	0x2000093c

08005074 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10a      	bne.n	800509c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508a:	f383 8811 	msr	BASEPRI, r3
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	f3bf 8f4f 	dsb	sy
 8005096:	617b      	str	r3, [r7, #20]
}
 8005098:	bf00      	nop
 800509a:	e7fe      	b.n	800509a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800509c:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3318      	adds	r3, #24
 80050a2:	4619      	mov	r1, r3
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f7fe fd22 	bl	8003aee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d002      	beq.n	80050b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80050b0:	f04f 33ff 	mov.w	r3, #4294967295
 80050b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80050b6:	6879      	ldr	r1, [r7, #4]
 80050b8:	68b8      	ldr	r0, [r7, #8]
 80050ba:	f000 fa55 	bl	8005568 <prvAddCurrentTaskToDelayedList>
	}
 80050be:	bf00      	nop
 80050c0:	3718      	adds	r7, #24
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	2000093c 	.word	0x2000093c

080050cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10a      	bne.n	80050f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80050e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e6:	f383 8811 	msr	BASEPRI, r3
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	60fb      	str	r3, [r7, #12]
}
 80050f4:	bf00      	nop
 80050f6:	e7fe      	b.n	80050f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	3318      	adds	r3, #24
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7fe fd53 	bl	8003ba8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005102:	4b1e      	ldr	r3, [pc, #120]	; (800517c <xTaskRemoveFromEventList+0xb0>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d11d      	bne.n	8005146 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	3304      	adds	r3, #4
 800510e:	4618      	mov	r0, r3
 8005110:	f7fe fd4a 	bl	8003ba8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005118:	4b19      	ldr	r3, [pc, #100]	; (8005180 <xTaskRemoveFromEventList+0xb4>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	429a      	cmp	r2, r3
 800511e:	d903      	bls.n	8005128 <xTaskRemoveFromEventList+0x5c>
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005124:	4a16      	ldr	r2, [pc, #88]	; (8005180 <xTaskRemoveFromEventList+0xb4>)
 8005126:	6013      	str	r3, [r2, #0]
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800512c:	4613      	mov	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4a13      	ldr	r2, [pc, #76]	; (8005184 <xTaskRemoveFromEventList+0xb8>)
 8005136:	441a      	add	r2, r3
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	3304      	adds	r3, #4
 800513c:	4619      	mov	r1, r3
 800513e:	4610      	mov	r0, r2
 8005140:	f7fe fcd5 	bl	8003aee <vListInsertEnd>
 8005144:	e005      	b.n	8005152 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	3318      	adds	r3, #24
 800514a:	4619      	mov	r1, r3
 800514c:	480e      	ldr	r0, [pc, #56]	; (8005188 <xTaskRemoveFromEventList+0xbc>)
 800514e:	f7fe fcce 	bl	8003aee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005156:	4b0d      	ldr	r3, [pc, #52]	; (800518c <xTaskRemoveFromEventList+0xc0>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	429a      	cmp	r2, r3
 800515e:	d905      	bls.n	800516c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005160:	2301      	movs	r3, #1
 8005162:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005164:	4b0a      	ldr	r3, [pc, #40]	; (8005190 <xTaskRemoveFromEventList+0xc4>)
 8005166:	2201      	movs	r2, #1
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	e001      	b.n	8005170 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800516c:	2300      	movs	r3, #0
 800516e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005170:	697b      	ldr	r3, [r7, #20]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3718      	adds	r7, #24
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	20000e38 	.word	0x20000e38
 8005180:	20000e18 	.word	0x20000e18
 8005184:	20000940 	.word	0x20000940
 8005188:	20000dd0 	.word	0x20000dd0
 800518c:	2000093c 	.word	0x2000093c
 8005190:	20000e24 	.word	0x20000e24

08005194 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800519c:	4b06      	ldr	r3, [pc, #24]	; (80051b8 <vTaskInternalSetTimeOutState+0x24>)
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80051a4:	4b05      	ldr	r3, [pc, #20]	; (80051bc <vTaskInternalSetTimeOutState+0x28>)
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	605a      	str	r2, [r3, #4]
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	20000e28 	.word	0x20000e28
 80051bc:	20000e14 	.word	0x20000e14

080051c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b088      	sub	sp, #32
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10a      	bne.n	80051e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80051d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	613b      	str	r3, [r7, #16]
}
 80051e2:	bf00      	nop
 80051e4:	e7fe      	b.n	80051e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10a      	bne.n	8005202 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80051ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f0:	f383 8811 	msr	BASEPRI, r3
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	60fb      	str	r3, [r7, #12]
}
 80051fe:	bf00      	nop
 8005200:	e7fe      	b.n	8005200 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005202:	f000 ff37 	bl	8006074 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005206:	4b1d      	ldr	r3, [pc, #116]	; (800527c <xTaskCheckForTimeOut+0xbc>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521e:	d102      	bne.n	8005226 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005220:	2300      	movs	r3, #0
 8005222:	61fb      	str	r3, [r7, #28]
 8005224:	e023      	b.n	800526e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	4b15      	ldr	r3, [pc, #84]	; (8005280 <xTaskCheckForTimeOut+0xc0>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	429a      	cmp	r2, r3
 8005230:	d007      	beq.n	8005242 <xTaskCheckForTimeOut+0x82>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	429a      	cmp	r2, r3
 800523a:	d302      	bcc.n	8005242 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800523c:	2301      	movs	r3, #1
 800523e:	61fb      	str	r3, [r7, #28]
 8005240:	e015      	b.n	800526e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	429a      	cmp	r2, r3
 800524a:	d20b      	bcs.n	8005264 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	1ad2      	subs	r2, r2, r3
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f7ff ff9b 	bl	8005194 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800525e:	2300      	movs	r3, #0
 8005260:	61fb      	str	r3, [r7, #28]
 8005262:	e004      	b.n	800526e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	2200      	movs	r2, #0
 8005268:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800526a:	2301      	movs	r3, #1
 800526c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800526e:	f000 ff31 	bl	80060d4 <vPortExitCritical>

	return xReturn;
 8005272:	69fb      	ldr	r3, [r7, #28]
}
 8005274:	4618      	mov	r0, r3
 8005276:	3720      	adds	r7, #32
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	20000e14 	.word	0x20000e14
 8005280:	20000e28 	.word	0x20000e28

08005284 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005288:	4b03      	ldr	r3, [pc, #12]	; (8005298 <vTaskMissedYield+0x14>)
 800528a:	2201      	movs	r2, #1
 800528c:	601a      	str	r2, [r3, #0]
}
 800528e:	bf00      	nop
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	20000e24 	.word	0x20000e24

0800529c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80052a4:	f000 f852 	bl	800534c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80052a8:	4b06      	ldr	r3, [pc, #24]	; (80052c4 <prvIdleTask+0x28>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d9f9      	bls.n	80052a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80052b0:	4b05      	ldr	r3, [pc, #20]	; (80052c8 <prvIdleTask+0x2c>)
 80052b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80052c0:	e7f0      	b.n	80052a4 <prvIdleTask+0x8>
 80052c2:	bf00      	nop
 80052c4:	20000940 	.word	0x20000940
 80052c8:	e000ed04 	.word	0xe000ed04

080052cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052d2:	2300      	movs	r3, #0
 80052d4:	607b      	str	r3, [r7, #4]
 80052d6:	e00c      	b.n	80052f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	4613      	mov	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4413      	add	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4a12      	ldr	r2, [pc, #72]	; (800532c <prvInitialiseTaskLists+0x60>)
 80052e4:	4413      	add	r3, r2
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fe fbd4 	bl	8003a94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3301      	adds	r3, #1
 80052f0:	607b      	str	r3, [r7, #4]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b37      	cmp	r3, #55	; 0x37
 80052f6:	d9ef      	bls.n	80052d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80052f8:	480d      	ldr	r0, [pc, #52]	; (8005330 <prvInitialiseTaskLists+0x64>)
 80052fa:	f7fe fbcb 	bl	8003a94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80052fe:	480d      	ldr	r0, [pc, #52]	; (8005334 <prvInitialiseTaskLists+0x68>)
 8005300:	f7fe fbc8 	bl	8003a94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005304:	480c      	ldr	r0, [pc, #48]	; (8005338 <prvInitialiseTaskLists+0x6c>)
 8005306:	f7fe fbc5 	bl	8003a94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800530a:	480c      	ldr	r0, [pc, #48]	; (800533c <prvInitialiseTaskLists+0x70>)
 800530c:	f7fe fbc2 	bl	8003a94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005310:	480b      	ldr	r0, [pc, #44]	; (8005340 <prvInitialiseTaskLists+0x74>)
 8005312:	f7fe fbbf 	bl	8003a94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005316:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <prvInitialiseTaskLists+0x78>)
 8005318:	4a05      	ldr	r2, [pc, #20]	; (8005330 <prvInitialiseTaskLists+0x64>)
 800531a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800531c:	4b0a      	ldr	r3, [pc, #40]	; (8005348 <prvInitialiseTaskLists+0x7c>)
 800531e:	4a05      	ldr	r2, [pc, #20]	; (8005334 <prvInitialiseTaskLists+0x68>)
 8005320:	601a      	str	r2, [r3, #0]
}
 8005322:	bf00      	nop
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	20000940 	.word	0x20000940
 8005330:	20000da0 	.word	0x20000da0
 8005334:	20000db4 	.word	0x20000db4
 8005338:	20000dd0 	.word	0x20000dd0
 800533c:	20000de4 	.word	0x20000de4
 8005340:	20000dfc 	.word	0x20000dfc
 8005344:	20000dc8 	.word	0x20000dc8
 8005348:	20000dcc 	.word	0x20000dcc

0800534c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005352:	e019      	b.n	8005388 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005354:	f000 fe8e 	bl	8006074 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005358:	4b10      	ldr	r3, [pc, #64]	; (800539c <prvCheckTasksWaitingTermination+0x50>)
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	3304      	adds	r3, #4
 8005364:	4618      	mov	r0, r3
 8005366:	f7fe fc1f 	bl	8003ba8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800536a:	4b0d      	ldr	r3, [pc, #52]	; (80053a0 <prvCheckTasksWaitingTermination+0x54>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	3b01      	subs	r3, #1
 8005370:	4a0b      	ldr	r2, [pc, #44]	; (80053a0 <prvCheckTasksWaitingTermination+0x54>)
 8005372:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005374:	4b0b      	ldr	r3, [pc, #44]	; (80053a4 <prvCheckTasksWaitingTermination+0x58>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	3b01      	subs	r3, #1
 800537a:	4a0a      	ldr	r2, [pc, #40]	; (80053a4 <prvCheckTasksWaitingTermination+0x58>)
 800537c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800537e:	f000 fea9 	bl	80060d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f810 	bl	80053a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005388:	4b06      	ldr	r3, [pc, #24]	; (80053a4 <prvCheckTasksWaitingTermination+0x58>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1e1      	bne.n	8005354 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005390:	bf00      	nop
 8005392:	bf00      	nop
 8005394:	3708      	adds	r7, #8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	20000de4 	.word	0x20000de4
 80053a0:	20000e10 	.word	0x20000e10
 80053a4:	20000df8 	.word	0x20000df8

080053a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	3354      	adds	r3, #84	; 0x54
 80053b4:	4618      	mov	r0, r3
 80053b6:	f001 f9b3 	bl	8006720 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d108      	bne.n	80053d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c8:	4618      	mov	r0, r3
 80053ca:	f001 f841 	bl	8006450 <vPortFree>
				vPortFree( pxTCB );
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f001 f83e 	bl	8006450 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80053d4:	e018      	b.n	8005408 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d103      	bne.n	80053e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f001 f835 	bl	8006450 <vPortFree>
	}
 80053e6:	e00f      	b.n	8005408 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d00a      	beq.n	8005408 <prvDeleteTCB+0x60>
	__asm volatile
 80053f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	60fb      	str	r3, [r7, #12]
}
 8005404:	bf00      	nop
 8005406:	e7fe      	b.n	8005406 <prvDeleteTCB+0x5e>
	}
 8005408:	bf00      	nop
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005416:	4b0c      	ldr	r3, [pc, #48]	; (8005448 <prvResetNextTaskUnblockTime+0x38>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d104      	bne.n	800542a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005420:	4b0a      	ldr	r3, [pc, #40]	; (800544c <prvResetNextTaskUnblockTime+0x3c>)
 8005422:	f04f 32ff 	mov.w	r2, #4294967295
 8005426:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005428:	e008      	b.n	800543c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800542a:	4b07      	ldr	r3, [pc, #28]	; (8005448 <prvResetNextTaskUnblockTime+0x38>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	4a04      	ldr	r2, [pc, #16]	; (800544c <prvResetNextTaskUnblockTime+0x3c>)
 800543a:	6013      	str	r3, [r2, #0]
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr
 8005448:	20000dc8 	.word	0x20000dc8
 800544c:	20000e30 	.word	0x20000e30

08005450 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005456:	4b0b      	ldr	r3, [pc, #44]	; (8005484 <xTaskGetSchedulerState+0x34>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d102      	bne.n	8005464 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800545e:	2301      	movs	r3, #1
 8005460:	607b      	str	r3, [r7, #4]
 8005462:	e008      	b.n	8005476 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005464:	4b08      	ldr	r3, [pc, #32]	; (8005488 <xTaskGetSchedulerState+0x38>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d102      	bne.n	8005472 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800546c:	2302      	movs	r3, #2
 800546e:	607b      	str	r3, [r7, #4]
 8005470:	e001      	b.n	8005476 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005472:	2300      	movs	r3, #0
 8005474:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005476:	687b      	ldr	r3, [r7, #4]
	}
 8005478:	4618      	mov	r0, r3
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	20000e1c 	.word	0x20000e1c
 8005488:	20000e38 	.word	0x20000e38

0800548c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005498:	2300      	movs	r3, #0
 800549a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d056      	beq.n	8005550 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80054a2:	4b2e      	ldr	r3, [pc, #184]	; (800555c <xTaskPriorityDisinherit+0xd0>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d00a      	beq.n	80054c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80054ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b0:	f383 8811 	msr	BASEPRI, r3
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	60fb      	str	r3, [r7, #12]
}
 80054be:	bf00      	nop
 80054c0:	e7fe      	b.n	80054c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10a      	bne.n	80054e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80054ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	60bb      	str	r3, [r7, #8]
}
 80054dc:	bf00      	nop
 80054de:	e7fe      	b.n	80054de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e4:	1e5a      	subs	r2, r3, #1
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d02c      	beq.n	8005550 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d128      	bne.n	8005550 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	3304      	adds	r3, #4
 8005502:	4618      	mov	r0, r3
 8005504:	f7fe fb50 	bl	8003ba8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005514:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005520:	4b0f      	ldr	r3, [pc, #60]	; (8005560 <xTaskPriorityDisinherit+0xd4>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	429a      	cmp	r2, r3
 8005526:	d903      	bls.n	8005530 <xTaskPriorityDisinherit+0xa4>
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552c:	4a0c      	ldr	r2, [pc, #48]	; (8005560 <xTaskPriorityDisinherit+0xd4>)
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005534:	4613      	mov	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4a09      	ldr	r2, [pc, #36]	; (8005564 <xTaskPriorityDisinherit+0xd8>)
 800553e:	441a      	add	r2, r3
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	3304      	adds	r3, #4
 8005544:	4619      	mov	r1, r3
 8005546:	4610      	mov	r0, r2
 8005548:	f7fe fad1 	bl	8003aee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800554c:	2301      	movs	r3, #1
 800554e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005550:	697b      	ldr	r3, [r7, #20]
	}
 8005552:	4618      	mov	r0, r3
 8005554:	3718      	adds	r7, #24
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	2000093c 	.word	0x2000093c
 8005560:	20000e18 	.word	0x20000e18
 8005564:	20000940 	.word	0x20000940

08005568 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005572:	4b21      	ldr	r3, [pc, #132]	; (80055f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005578:	4b20      	ldr	r3, [pc, #128]	; (80055fc <prvAddCurrentTaskToDelayedList+0x94>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	3304      	adds	r3, #4
 800557e:	4618      	mov	r0, r3
 8005580:	f7fe fb12 	bl	8003ba8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800558a:	d10a      	bne.n	80055a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d007      	beq.n	80055a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005592:	4b1a      	ldr	r3, [pc, #104]	; (80055fc <prvAddCurrentTaskToDelayedList+0x94>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	3304      	adds	r3, #4
 8005598:	4619      	mov	r1, r3
 800559a:	4819      	ldr	r0, [pc, #100]	; (8005600 <prvAddCurrentTaskToDelayedList+0x98>)
 800559c:	f7fe faa7 	bl	8003aee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80055a0:	e026      	b.n	80055f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4413      	add	r3, r2
 80055a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80055aa:	4b14      	ldr	r3, [pc, #80]	; (80055fc <prvAddCurrentTaskToDelayedList+0x94>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d209      	bcs.n	80055ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055ba:	4b12      	ldr	r3, [pc, #72]	; (8005604 <prvAddCurrentTaskToDelayedList+0x9c>)
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	4b0f      	ldr	r3, [pc, #60]	; (80055fc <prvAddCurrentTaskToDelayedList+0x94>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	3304      	adds	r3, #4
 80055c4:	4619      	mov	r1, r3
 80055c6:	4610      	mov	r0, r2
 80055c8:	f7fe fab5 	bl	8003b36 <vListInsert>
}
 80055cc:	e010      	b.n	80055f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055ce:	4b0e      	ldr	r3, [pc, #56]	; (8005608 <prvAddCurrentTaskToDelayedList+0xa0>)
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	4b0a      	ldr	r3, [pc, #40]	; (80055fc <prvAddCurrentTaskToDelayedList+0x94>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3304      	adds	r3, #4
 80055d8:	4619      	mov	r1, r3
 80055da:	4610      	mov	r0, r2
 80055dc:	f7fe faab 	bl	8003b36 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80055e0:	4b0a      	ldr	r3, [pc, #40]	; (800560c <prvAddCurrentTaskToDelayedList+0xa4>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d202      	bcs.n	80055f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80055ea:	4a08      	ldr	r2, [pc, #32]	; (800560c <prvAddCurrentTaskToDelayedList+0xa4>)
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	6013      	str	r3, [r2, #0]
}
 80055f0:	bf00      	nop
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	20000e14 	.word	0x20000e14
 80055fc:	2000093c 	.word	0x2000093c
 8005600:	20000dfc 	.word	0x20000dfc
 8005604:	20000dcc 	.word	0x20000dcc
 8005608:	20000dc8 	.word	0x20000dc8
 800560c:	20000e30 	.word	0x20000e30

08005610 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b08a      	sub	sp, #40	; 0x28
 8005614:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005616:	2300      	movs	r3, #0
 8005618:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800561a:	f000 fba1 	bl	8005d60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800561e:	4b1c      	ldr	r3, [pc, #112]	; (8005690 <xTimerCreateTimerTask+0x80>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d021      	beq.n	800566a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005626:	2300      	movs	r3, #0
 8005628:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800562a:	2300      	movs	r3, #0
 800562c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800562e:	1d3a      	adds	r2, r7, #4
 8005630:	f107 0108 	add.w	r1, r7, #8
 8005634:	f107 030c 	add.w	r3, r7, #12
 8005638:	4618      	mov	r0, r3
 800563a:	f7fe fa11 	bl	8003a60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800563e:	6879      	ldr	r1, [r7, #4]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	9202      	str	r2, [sp, #8]
 8005646:	9301      	str	r3, [sp, #4]
 8005648:	2302      	movs	r3, #2
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	2300      	movs	r3, #0
 800564e:	460a      	mov	r2, r1
 8005650:	4910      	ldr	r1, [pc, #64]	; (8005694 <xTimerCreateTimerTask+0x84>)
 8005652:	4811      	ldr	r0, [pc, #68]	; (8005698 <xTimerCreateTimerTask+0x88>)
 8005654:	f7ff f8b4 	bl	80047c0 <xTaskCreateStatic>
 8005658:	4603      	mov	r3, r0
 800565a:	4a10      	ldr	r2, [pc, #64]	; (800569c <xTimerCreateTimerTask+0x8c>)
 800565c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800565e:	4b0f      	ldr	r3, [pc, #60]	; (800569c <xTimerCreateTimerTask+0x8c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005666:	2301      	movs	r3, #1
 8005668:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10a      	bne.n	8005686 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	613b      	str	r3, [r7, #16]
}
 8005682:	bf00      	nop
 8005684:	e7fe      	b.n	8005684 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005686:	697b      	ldr	r3, [r7, #20]
}
 8005688:	4618      	mov	r0, r3
 800568a:	3718      	adds	r7, #24
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	20000e6c 	.word	0x20000e6c
 8005694:	080068c8 	.word	0x080068c8
 8005698:	08005909 	.word	0x08005909
 800569c:	20000e70 	.word	0x20000e70

080056a0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b088      	sub	sp, #32
 80056a4:	af02      	add	r7, sp, #8
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80056ae:	202c      	movs	r0, #44	; 0x2c
 80056b0:	f000 fe02 	bl	80062b8 <pvPortMalloc>
 80056b4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00d      	beq.n	80056d8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	9301      	str	r3, [sp, #4]
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	68b9      	ldr	r1, [r7, #8]
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f000 f843 	bl	800575e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80056d8:	697b      	ldr	r3, [r7, #20]
	}
 80056da:	4618      	mov	r0, r3
 80056dc:	3718      	adds	r7, #24
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b08a      	sub	sp, #40	; 0x28
 80056e6:	af02      	add	r7, sp, #8
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	607a      	str	r2, [r7, #4]
 80056ee:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80056f0:	232c      	movs	r3, #44	; 0x2c
 80056f2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	2b2c      	cmp	r3, #44	; 0x2c
 80056f8:	d00a      	beq.n	8005710 <xTimerCreateStatic+0x2e>
	__asm volatile
 80056fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fe:	f383 8811 	msr	BASEPRI, r3
 8005702:	f3bf 8f6f 	isb	sy
 8005706:	f3bf 8f4f 	dsb	sy
 800570a:	61bb      	str	r3, [r7, #24]
}
 800570c:	bf00      	nop
 800570e:	e7fe      	b.n	800570e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005710:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8005712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10a      	bne.n	800572e <xTimerCreateStatic+0x4c>
	__asm volatile
 8005718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	617b      	str	r3, [r7, #20]
}
 800572a:	bf00      	nop
 800572c:	e7fe      	b.n	800572c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800572e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005730:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00d      	beq.n	8005754 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	2202      	movs	r2, #2
 800573c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	9301      	str	r3, [sp, #4]
 8005744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	68b9      	ldr	r1, [r7, #8]
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 f805 	bl	800575e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005754:	69fb      	ldr	r3, [r7, #28]
	}
 8005756:	4618      	mov	r0, r3
 8005758:	3720      	adds	r7, #32
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b086      	sub	sp, #24
 8005762:	af00      	add	r7, sp, #0
 8005764:	60f8      	str	r0, [r7, #12]
 8005766:	60b9      	str	r1, [r7, #8]
 8005768:	607a      	str	r2, [r7, #4]
 800576a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10a      	bne.n	8005788 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8005772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005776:	f383 8811 	msr	BASEPRI, r3
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	617b      	str	r3, [r7, #20]
}
 8005784:	bf00      	nop
 8005786:	e7fe      	b.n	8005786 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578a:	2b00      	cmp	r3, #0
 800578c:	d01e      	beq.n	80057cc <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800578e:	f000 fae7 	bl	8005d60 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8005792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	6a3a      	ldr	r2, [r7, #32]
 80057a8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	3304      	adds	r3, #4
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7fe f990 	bl	8003ad4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d008      	beq.n	80057cc <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057c0:	f043 0304 	orr.w	r3, r3, #4
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80057cc:	bf00      	nop
 80057ce:	3718      	adds	r7, #24
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b08a      	sub	sp, #40	; 0x28
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
 80057e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80057e2:	2300      	movs	r3, #0
 80057e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10a      	bne.n	8005802 <xTimerGenericCommand+0x2e>
	__asm volatile
 80057ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f0:	f383 8811 	msr	BASEPRI, r3
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	f3bf 8f4f 	dsb	sy
 80057fc:	623b      	str	r3, [r7, #32]
}
 80057fe:	bf00      	nop
 8005800:	e7fe      	b.n	8005800 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005802:	4b1a      	ldr	r3, [pc, #104]	; (800586c <xTimerGenericCommand+0x98>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d02a      	beq.n	8005860 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	2b05      	cmp	r3, #5
 800581a:	dc18      	bgt.n	800584e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800581c:	f7ff fe18 	bl	8005450 <xTaskGetSchedulerState>
 8005820:	4603      	mov	r3, r0
 8005822:	2b02      	cmp	r3, #2
 8005824:	d109      	bne.n	800583a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005826:	4b11      	ldr	r3, [pc, #68]	; (800586c <xTimerGenericCommand+0x98>)
 8005828:	6818      	ldr	r0, [r3, #0]
 800582a:	f107 0110 	add.w	r1, r7, #16
 800582e:	2300      	movs	r3, #0
 8005830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005832:	f7fe fb21 	bl	8003e78 <xQueueGenericSend>
 8005836:	6278      	str	r0, [r7, #36]	; 0x24
 8005838:	e012      	b.n	8005860 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800583a:	4b0c      	ldr	r3, [pc, #48]	; (800586c <xTimerGenericCommand+0x98>)
 800583c:	6818      	ldr	r0, [r3, #0]
 800583e:	f107 0110 	add.w	r1, r7, #16
 8005842:	2300      	movs	r3, #0
 8005844:	2200      	movs	r2, #0
 8005846:	f7fe fb17 	bl	8003e78 <xQueueGenericSend>
 800584a:	6278      	str	r0, [r7, #36]	; 0x24
 800584c:	e008      	b.n	8005860 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800584e:	4b07      	ldr	r3, [pc, #28]	; (800586c <xTimerGenericCommand+0x98>)
 8005850:	6818      	ldr	r0, [r3, #0]
 8005852:	f107 0110 	add.w	r1, r7, #16
 8005856:	2300      	movs	r3, #0
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	f7fe fc0b 	bl	8004074 <xQueueGenericSendFromISR>
 800585e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005862:	4618      	mov	r0, r3
 8005864:	3728      	adds	r7, #40	; 0x28
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	20000e6c 	.word	0x20000e6c

08005870 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b088      	sub	sp, #32
 8005874:	af02      	add	r7, sp, #8
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800587a:	4b22      	ldr	r3, [pc, #136]	; (8005904 <prvProcessExpiredTimer+0x94>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	3304      	adds	r3, #4
 8005888:	4618      	mov	r0, r3
 800588a:	f7fe f98d 	bl	8003ba8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005894:	f003 0304 	and.w	r3, r3, #4
 8005898:	2b00      	cmp	r3, #0
 800589a:	d022      	beq.n	80058e2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	699a      	ldr	r2, [r3, #24]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	18d1      	adds	r1, r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	6978      	ldr	r0, [r7, #20]
 80058aa:	f000 f8d1 	bl	8005a50 <prvInsertTimerInActiveList>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d01f      	beq.n	80058f4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80058b4:	2300      	movs	r3, #0
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	2300      	movs	r3, #0
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	2100      	movs	r1, #0
 80058be:	6978      	ldr	r0, [r7, #20]
 80058c0:	f7ff ff88 	bl	80057d4 <xTimerGenericCommand>
 80058c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d113      	bne.n	80058f4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80058cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d0:	f383 8811 	msr	BASEPRI, r3
 80058d4:	f3bf 8f6f 	isb	sy
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	60fb      	str	r3, [r7, #12]
}
 80058de:	bf00      	nop
 80058e0:	e7fe      	b.n	80058e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058e8:	f023 0301 	bic.w	r3, r3, #1
 80058ec:	b2da      	uxtb	r2, r3
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	6978      	ldr	r0, [r7, #20]
 80058fa:	4798      	blx	r3
}
 80058fc:	bf00      	nop
 80058fe:	3718      	adds	r7, #24
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	20000e64 	.word	0x20000e64

08005908 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005910:	f107 0308 	add.w	r3, r7, #8
 8005914:	4618      	mov	r0, r3
 8005916:	f000 f857 	bl	80059c8 <prvGetNextExpireTime>
 800591a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	4619      	mov	r1, r3
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f000 f803 	bl	800592c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005926:	f000 f8d5 	bl	8005ad4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800592a:	e7f1      	b.n	8005910 <prvTimerTask+0x8>

0800592c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005936:	f7ff f99f 	bl	8004c78 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800593a:	f107 0308 	add.w	r3, r7, #8
 800593e:	4618      	mov	r0, r3
 8005940:	f000 f866 	bl	8005a10 <prvSampleTimeNow>
 8005944:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d130      	bne.n	80059ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10a      	bne.n	8005968 <prvProcessTimerOrBlockTask+0x3c>
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	429a      	cmp	r2, r3
 8005958:	d806      	bhi.n	8005968 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800595a:	f7ff f99b 	bl	8004c94 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800595e:	68f9      	ldr	r1, [r7, #12]
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f7ff ff85 	bl	8005870 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005966:	e024      	b.n	80059b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d008      	beq.n	8005980 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800596e:	4b13      	ldr	r3, [pc, #76]	; (80059bc <prvProcessTimerOrBlockTask+0x90>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <prvProcessTimerOrBlockTask+0x50>
 8005978:	2301      	movs	r3, #1
 800597a:	e000      	b.n	800597e <prvProcessTimerOrBlockTask+0x52>
 800597c:	2300      	movs	r3, #0
 800597e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005980:	4b0f      	ldr	r3, [pc, #60]	; (80059c0 <prvProcessTimerOrBlockTask+0x94>)
 8005982:	6818      	ldr	r0, [r3, #0]
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	4619      	mov	r1, r3
 800598e:	f7fe fee3 	bl	8004758 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005992:	f7ff f97f 	bl	8004c94 <xTaskResumeAll>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10a      	bne.n	80059b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800599c:	4b09      	ldr	r3, [pc, #36]	; (80059c4 <prvProcessTimerOrBlockTask+0x98>)
 800599e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	f3bf 8f6f 	isb	sy
}
 80059ac:	e001      	b.n	80059b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80059ae:	f7ff f971 	bl	8004c94 <xTaskResumeAll>
}
 80059b2:	bf00      	nop
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	20000e68 	.word	0x20000e68
 80059c0:	20000e6c 	.word	0x20000e6c
 80059c4:	e000ed04 	.word	0xe000ed04

080059c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80059d0:	4b0e      	ldr	r3, [pc, #56]	; (8005a0c <prvGetNextExpireTime+0x44>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <prvGetNextExpireTime+0x16>
 80059da:	2201      	movs	r2, #1
 80059dc:	e000      	b.n	80059e0 <prvGetNextExpireTime+0x18>
 80059de:	2200      	movs	r2, #0
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d105      	bne.n	80059f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059ec:	4b07      	ldr	r3, [pc, #28]	; (8005a0c <prvGetNextExpireTime+0x44>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	60fb      	str	r3, [r7, #12]
 80059f6:	e001      	b.n	80059fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80059f8:	2300      	movs	r3, #0
 80059fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80059fc:	68fb      	ldr	r3, [r7, #12]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3714      	adds	r7, #20
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	20000e64 	.word	0x20000e64

08005a10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005a18:	f7ff f9da 	bl	8004dd0 <xTaskGetTickCount>
 8005a1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005a1e:	4b0b      	ldr	r3, [pc, #44]	; (8005a4c <prvSampleTimeNow+0x3c>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d205      	bcs.n	8005a34 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005a28:	f000 f936 	bl	8005c98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	601a      	str	r2, [r3, #0]
 8005a32:	e002      	b.n	8005a3a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005a3a:	4a04      	ldr	r2, [pc, #16]	; (8005a4c <prvSampleTimeNow+0x3c>)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005a40:	68fb      	ldr	r3, [r7, #12]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	20000e74 	.word	0x20000e74

08005a50 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
 8005a5c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d812      	bhi.n	8005a9c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	1ad2      	subs	r2, r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d302      	bcc.n	8005a8a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005a84:	2301      	movs	r3, #1
 8005a86:	617b      	str	r3, [r7, #20]
 8005a88:	e01b      	b.n	8005ac2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005a8a:	4b10      	ldr	r3, [pc, #64]	; (8005acc <prvInsertTimerInActiveList+0x7c>)
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	3304      	adds	r3, #4
 8005a92:	4619      	mov	r1, r3
 8005a94:	4610      	mov	r0, r2
 8005a96:	f7fe f84e 	bl	8003b36 <vListInsert>
 8005a9a:	e012      	b.n	8005ac2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d206      	bcs.n	8005ab2 <prvInsertTimerInActiveList+0x62>
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d302      	bcc.n	8005ab2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005aac:	2301      	movs	r3, #1
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	e007      	b.n	8005ac2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ab2:	4b07      	ldr	r3, [pc, #28]	; (8005ad0 <prvInsertTimerInActiveList+0x80>)
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	3304      	adds	r3, #4
 8005aba:	4619      	mov	r1, r3
 8005abc:	4610      	mov	r0, r2
 8005abe:	f7fe f83a 	bl	8003b36 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005ac2:	697b      	ldr	r3, [r7, #20]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3718      	adds	r7, #24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	20000e68 	.word	0x20000e68
 8005ad0:	20000e64 	.word	0x20000e64

08005ad4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b08e      	sub	sp, #56	; 0x38
 8005ad8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ada:	e0ca      	b.n	8005c72 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	da18      	bge.n	8005b14 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005ae2:	1d3b      	adds	r3, r7, #4
 8005ae4:	3304      	adds	r3, #4
 8005ae6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10a      	bne.n	8005b04 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af2:	f383 8811 	msr	BASEPRI, r3
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	61fb      	str	r3, [r7, #28]
}
 8005b00:	bf00      	nop
 8005b02:	e7fe      	b.n	8005b02 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b0a:	6850      	ldr	r0, [r2, #4]
 8005b0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b0e:	6892      	ldr	r2, [r2, #8]
 8005b10:	4611      	mov	r1, r2
 8005b12:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f2c0 80aa 	blt.w	8005c70 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d004      	beq.n	8005b32 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7fe f83b 	bl	8003ba8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b32:	463b      	mov	r3, r7
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7ff ff6b 	bl	8005a10 <prvSampleTimeNow>
 8005b3a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b09      	cmp	r3, #9
 8005b40:	f200 8097 	bhi.w	8005c72 <prvProcessReceivedCommands+0x19e>
 8005b44:	a201      	add	r2, pc, #4	; (adr r2, 8005b4c <prvProcessReceivedCommands+0x78>)
 8005b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4a:	bf00      	nop
 8005b4c:	08005b75 	.word	0x08005b75
 8005b50:	08005b75 	.word	0x08005b75
 8005b54:	08005b75 	.word	0x08005b75
 8005b58:	08005be9 	.word	0x08005be9
 8005b5c:	08005bfd 	.word	0x08005bfd
 8005b60:	08005c47 	.word	0x08005c47
 8005b64:	08005b75 	.word	0x08005b75
 8005b68:	08005b75 	.word	0x08005b75
 8005b6c:	08005be9 	.word	0x08005be9
 8005b70:	08005bfd 	.word	0x08005bfd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b7a:	f043 0301 	orr.w	r3, r3, #1
 8005b7e:	b2da      	uxtb	r2, r3
 8005b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	18d1      	adds	r1, r2, r3
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b94:	f7ff ff5c 	bl	8005a50 <prvInsertTimerInActiveList>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d069      	beq.n	8005c72 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ba4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bac:	f003 0304 	and.w	r3, r3, #4
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d05e      	beq.n	8005c72 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	441a      	add	r2, r3
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bc6:	f7ff fe05 	bl	80057d4 <xTimerGenericCommand>
 8005bca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d14f      	bne.n	8005c72 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd6:	f383 8811 	msr	BASEPRI, r3
 8005bda:	f3bf 8f6f 	isb	sy
 8005bde:	f3bf 8f4f 	dsb	sy
 8005be2:	61bb      	str	r3, [r7, #24]
}
 8005be4:	bf00      	nop
 8005be6:	e7fe      	b.n	8005be6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bee:	f023 0301 	bic.w	r3, r3, #1
 8005bf2:	b2da      	uxtb	r2, r3
 8005bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005bfa:	e03a      	b.n	8005c72 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c02:	f043 0301 	orr.w	r3, r3, #1
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c12:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10a      	bne.n	8005c32 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c20:	f383 8811 	msr	BASEPRI, r3
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	f3bf 8f4f 	dsb	sy
 8005c2c:	617b      	str	r3, [r7, #20]
}
 8005c2e:	bf00      	nop
 8005c30:	e7fe      	b.n	8005c30 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c34:	699a      	ldr	r2, [r3, #24]
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	18d1      	adds	r1, r2, r3
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c40:	f7ff ff06 	bl	8005a50 <prvInsertTimerInActiveList>
					break;
 8005c44:	e015      	b.n	8005c72 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d103      	bne.n	8005c5c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005c54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c56:	f000 fbfb 	bl	8006450 <vPortFree>
 8005c5a:	e00a      	b.n	8005c72 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c62:	f023 0301 	bic.w	r3, r3, #1
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005c6e:	e000      	b.n	8005c72 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005c70:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c72:	4b08      	ldr	r3, [pc, #32]	; (8005c94 <prvProcessReceivedCommands+0x1c0>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	1d39      	adds	r1, r7, #4
 8005c78:	2200      	movs	r2, #0
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7fe fa96 	bl	80041ac <xQueueReceive>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f47f af2a 	bne.w	8005adc <prvProcessReceivedCommands+0x8>
	}
}
 8005c88:	bf00      	nop
 8005c8a:	bf00      	nop
 8005c8c:	3730      	adds	r7, #48	; 0x30
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	20000e6c 	.word	0x20000e6c

08005c98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b088      	sub	sp, #32
 8005c9c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c9e:	e048      	b.n	8005d32 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ca0:	4b2d      	ldr	r3, [pc, #180]	; (8005d58 <prvSwitchTimerLists+0xc0>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005caa:	4b2b      	ldr	r3, [pc, #172]	; (8005d58 <prvSwitchTimerLists+0xc0>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	3304      	adds	r3, #4
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7fd ff75 	bl	8003ba8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ccc:	f003 0304 	and.w	r3, r3, #4
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d02e      	beq.n	8005d32 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	4413      	add	r3, r2
 8005cdc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d90e      	bls.n	8005d04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005cf2:	4b19      	ldr	r3, [pc, #100]	; (8005d58 <prvSwitchTimerLists+0xc0>)
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	3304      	adds	r3, #4
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	4610      	mov	r0, r2
 8005cfe:	f7fd ff1a 	bl	8003b36 <vListInsert>
 8005d02:	e016      	b.n	8005d32 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d04:	2300      	movs	r3, #0
 8005d06:	9300      	str	r3, [sp, #0]
 8005d08:	2300      	movs	r3, #0
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f7ff fd60 	bl	80057d4 <xTimerGenericCommand>
 8005d14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d10a      	bne.n	8005d32 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d20:	f383 8811 	msr	BASEPRI, r3
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	f3bf 8f4f 	dsb	sy
 8005d2c:	603b      	str	r3, [r7, #0]
}
 8005d2e:	bf00      	nop
 8005d30:	e7fe      	b.n	8005d30 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d32:	4b09      	ldr	r3, [pc, #36]	; (8005d58 <prvSwitchTimerLists+0xc0>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1b1      	bne.n	8005ca0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005d3c:	4b06      	ldr	r3, [pc, #24]	; (8005d58 <prvSwitchTimerLists+0xc0>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005d42:	4b06      	ldr	r3, [pc, #24]	; (8005d5c <prvSwitchTimerLists+0xc4>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a04      	ldr	r2, [pc, #16]	; (8005d58 <prvSwitchTimerLists+0xc0>)
 8005d48:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005d4a:	4a04      	ldr	r2, [pc, #16]	; (8005d5c <prvSwitchTimerLists+0xc4>)
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	6013      	str	r3, [r2, #0]
}
 8005d50:	bf00      	nop
 8005d52:	3718      	adds	r7, #24
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	20000e64 	.word	0x20000e64
 8005d5c:	20000e68 	.word	0x20000e68

08005d60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005d66:	f000 f985 	bl	8006074 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005d6a:	4b15      	ldr	r3, [pc, #84]	; (8005dc0 <prvCheckForValidListAndQueue+0x60>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d120      	bne.n	8005db4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005d72:	4814      	ldr	r0, [pc, #80]	; (8005dc4 <prvCheckForValidListAndQueue+0x64>)
 8005d74:	f7fd fe8e 	bl	8003a94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005d78:	4813      	ldr	r0, [pc, #76]	; (8005dc8 <prvCheckForValidListAndQueue+0x68>)
 8005d7a:	f7fd fe8b 	bl	8003a94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005d7e:	4b13      	ldr	r3, [pc, #76]	; (8005dcc <prvCheckForValidListAndQueue+0x6c>)
 8005d80:	4a10      	ldr	r2, [pc, #64]	; (8005dc4 <prvCheckForValidListAndQueue+0x64>)
 8005d82:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005d84:	4b12      	ldr	r3, [pc, #72]	; (8005dd0 <prvCheckForValidListAndQueue+0x70>)
 8005d86:	4a10      	ldr	r2, [pc, #64]	; (8005dc8 <prvCheckForValidListAndQueue+0x68>)
 8005d88:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	9300      	str	r3, [sp, #0]
 8005d8e:	4b11      	ldr	r3, [pc, #68]	; (8005dd4 <prvCheckForValidListAndQueue+0x74>)
 8005d90:	4a11      	ldr	r2, [pc, #68]	; (8005dd8 <prvCheckForValidListAndQueue+0x78>)
 8005d92:	2110      	movs	r1, #16
 8005d94:	200a      	movs	r0, #10
 8005d96:	f7fd ff99 	bl	8003ccc <xQueueGenericCreateStatic>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	4a08      	ldr	r2, [pc, #32]	; (8005dc0 <prvCheckForValidListAndQueue+0x60>)
 8005d9e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005da0:	4b07      	ldr	r3, [pc, #28]	; (8005dc0 <prvCheckForValidListAndQueue+0x60>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d005      	beq.n	8005db4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005da8:	4b05      	ldr	r3, [pc, #20]	; (8005dc0 <prvCheckForValidListAndQueue+0x60>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	490b      	ldr	r1, [pc, #44]	; (8005ddc <prvCheckForValidListAndQueue+0x7c>)
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7fe fca8 	bl	8004704 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005db4:	f000 f98e 	bl	80060d4 <vPortExitCritical>
}
 8005db8:	bf00      	nop
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	20000e6c 	.word	0x20000e6c
 8005dc4:	20000e3c 	.word	0x20000e3c
 8005dc8:	20000e50 	.word	0x20000e50
 8005dcc:	20000e64 	.word	0x20000e64
 8005dd0:	20000e68 	.word	0x20000e68
 8005dd4:	20000f18 	.word	0x20000f18
 8005dd8:	20000e78 	.word	0x20000e78
 8005ddc:	080068d0 	.word	0x080068d0

08005de0 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10a      	bne.n	8005e08 <pvTimerGetTimerID+0x28>
	__asm volatile
 8005df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df6:	f383 8811 	msr	BASEPRI, r3
 8005dfa:	f3bf 8f6f 	isb	sy
 8005dfe:	f3bf 8f4f 	dsb	sy
 8005e02:	60fb      	str	r3, [r7, #12]
}
 8005e04:	bf00      	nop
 8005e06:	e7fe      	b.n	8005e06 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8005e08:	f000 f934 	bl	8006074 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	69db      	ldr	r3, [r3, #28]
 8005e10:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8005e12:	f000 f95f 	bl	80060d4 <vPortExitCritical>

	return pvReturn;
 8005e16:	693b      	ldr	r3, [r7, #16]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3718      	adds	r7, #24
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	3b04      	subs	r3, #4
 8005e30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	3b04      	subs	r3, #4
 8005e3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	f023 0201 	bic.w	r2, r3, #1
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	3b04      	subs	r3, #4
 8005e4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e50:	4a0c      	ldr	r2, [pc, #48]	; (8005e84 <pxPortInitialiseStack+0x64>)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	3b14      	subs	r3, #20
 8005e5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	3b04      	subs	r3, #4
 8005e66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f06f 0202 	mvn.w	r2, #2
 8005e6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	3b20      	subs	r3, #32
 8005e74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e76:	68fb      	ldr	r3, [r7, #12]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	08005e89 	.word	0x08005e89

08005e88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e92:	4b12      	ldr	r3, [pc, #72]	; (8005edc <prvTaskExitError+0x54>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9a:	d00a      	beq.n	8005eb2 <prvTaskExitError+0x2a>
	__asm volatile
 8005e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea0:	f383 8811 	msr	BASEPRI, r3
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	60fb      	str	r3, [r7, #12]
}
 8005eae:	bf00      	nop
 8005eb0:	e7fe      	b.n	8005eb0 <prvTaskExitError+0x28>
	__asm volatile
 8005eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb6:	f383 8811 	msr	BASEPRI, r3
 8005eba:	f3bf 8f6f 	isb	sy
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	60bb      	str	r3, [r7, #8]
}
 8005ec4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ec6:	bf00      	nop
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d0fc      	beq.n	8005ec8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ece:	bf00      	nop
 8005ed0:	bf00      	nop
 8005ed2:	3714      	adds	r7, #20
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	2000000c 	.word	0x2000000c

08005ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ee0:	4b07      	ldr	r3, [pc, #28]	; (8005f00 <pxCurrentTCBConst2>)
 8005ee2:	6819      	ldr	r1, [r3, #0]
 8005ee4:	6808      	ldr	r0, [r1, #0]
 8005ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eea:	f380 8809 	msr	PSP, r0
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f04f 0000 	mov.w	r0, #0
 8005ef6:	f380 8811 	msr	BASEPRI, r0
 8005efa:	4770      	bx	lr
 8005efc:	f3af 8000 	nop.w

08005f00 <pxCurrentTCBConst2>:
 8005f00:	2000093c 	.word	0x2000093c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f04:	bf00      	nop
 8005f06:	bf00      	nop

08005f08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f08:	4808      	ldr	r0, [pc, #32]	; (8005f2c <prvPortStartFirstTask+0x24>)
 8005f0a:	6800      	ldr	r0, [r0, #0]
 8005f0c:	6800      	ldr	r0, [r0, #0]
 8005f0e:	f380 8808 	msr	MSP, r0
 8005f12:	f04f 0000 	mov.w	r0, #0
 8005f16:	f380 8814 	msr	CONTROL, r0
 8005f1a:	b662      	cpsie	i
 8005f1c:	b661      	cpsie	f
 8005f1e:	f3bf 8f4f 	dsb	sy
 8005f22:	f3bf 8f6f 	isb	sy
 8005f26:	df00      	svc	0
 8005f28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f2a:	bf00      	nop
 8005f2c:	e000ed08 	.word	0xe000ed08

08005f30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f36:	4b46      	ldr	r3, [pc, #280]	; (8006050 <xPortStartScheduler+0x120>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a46      	ldr	r2, [pc, #280]	; (8006054 <xPortStartScheduler+0x124>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d10a      	bne.n	8005f56 <xPortStartScheduler+0x26>
	__asm volatile
 8005f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	613b      	str	r3, [r7, #16]
}
 8005f52:	bf00      	nop
 8005f54:	e7fe      	b.n	8005f54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005f56:	4b3e      	ldr	r3, [pc, #248]	; (8006050 <xPortStartScheduler+0x120>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a3f      	ldr	r2, [pc, #252]	; (8006058 <xPortStartScheduler+0x128>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d10a      	bne.n	8005f76 <xPortStartScheduler+0x46>
	__asm volatile
 8005f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f64:	f383 8811 	msr	BASEPRI, r3
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	60fb      	str	r3, [r7, #12]
}
 8005f72:	bf00      	nop
 8005f74:	e7fe      	b.n	8005f74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f76:	4b39      	ldr	r3, [pc, #228]	; (800605c <xPortStartScheduler+0x12c>)
 8005f78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	22ff      	movs	r2, #255	; 0xff
 8005f86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f90:	78fb      	ldrb	r3, [r7, #3]
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	4b31      	ldr	r3, [pc, #196]	; (8006060 <xPortStartScheduler+0x130>)
 8005f9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f9e:	4b31      	ldr	r3, [pc, #196]	; (8006064 <xPortStartScheduler+0x134>)
 8005fa0:	2207      	movs	r2, #7
 8005fa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fa4:	e009      	b.n	8005fba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005fa6:	4b2f      	ldr	r3, [pc, #188]	; (8006064 <xPortStartScheduler+0x134>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	3b01      	subs	r3, #1
 8005fac:	4a2d      	ldr	r2, [pc, #180]	; (8006064 <xPortStartScheduler+0x134>)
 8005fae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005fb0:	78fb      	ldrb	r3, [r7, #3]
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	005b      	lsls	r3, r3, #1
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fba:	78fb      	ldrb	r3, [r7, #3]
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc2:	2b80      	cmp	r3, #128	; 0x80
 8005fc4:	d0ef      	beq.n	8005fa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005fc6:	4b27      	ldr	r3, [pc, #156]	; (8006064 <xPortStartScheduler+0x134>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f1c3 0307 	rsb	r3, r3, #7
 8005fce:	2b04      	cmp	r3, #4
 8005fd0:	d00a      	beq.n	8005fe8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	60bb      	str	r3, [r7, #8]
}
 8005fe4:	bf00      	nop
 8005fe6:	e7fe      	b.n	8005fe6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005fe8:	4b1e      	ldr	r3, [pc, #120]	; (8006064 <xPortStartScheduler+0x134>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	021b      	lsls	r3, r3, #8
 8005fee:	4a1d      	ldr	r2, [pc, #116]	; (8006064 <xPortStartScheduler+0x134>)
 8005ff0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ff2:	4b1c      	ldr	r3, [pc, #112]	; (8006064 <xPortStartScheduler+0x134>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ffa:	4a1a      	ldr	r2, [pc, #104]	; (8006064 <xPortStartScheduler+0x134>)
 8005ffc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	b2da      	uxtb	r2, r3
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006006:	4b18      	ldr	r3, [pc, #96]	; (8006068 <xPortStartScheduler+0x138>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a17      	ldr	r2, [pc, #92]	; (8006068 <xPortStartScheduler+0x138>)
 800600c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006010:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006012:	4b15      	ldr	r3, [pc, #84]	; (8006068 <xPortStartScheduler+0x138>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a14      	ldr	r2, [pc, #80]	; (8006068 <xPortStartScheduler+0x138>)
 8006018:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800601c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800601e:	f000 f8dd 	bl	80061dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006022:	4b12      	ldr	r3, [pc, #72]	; (800606c <xPortStartScheduler+0x13c>)
 8006024:	2200      	movs	r2, #0
 8006026:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006028:	f000 f8fc 	bl	8006224 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800602c:	4b10      	ldr	r3, [pc, #64]	; (8006070 <xPortStartScheduler+0x140>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a0f      	ldr	r2, [pc, #60]	; (8006070 <xPortStartScheduler+0x140>)
 8006032:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006036:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006038:	f7ff ff66 	bl	8005f08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800603c:	f7fe ff92 	bl	8004f64 <vTaskSwitchContext>
	prvTaskExitError();
 8006040:	f7ff ff22 	bl	8005e88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3718      	adds	r7, #24
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	e000ed00 	.word	0xe000ed00
 8006054:	410fc271 	.word	0x410fc271
 8006058:	410fc270 	.word	0x410fc270
 800605c:	e000e400 	.word	0xe000e400
 8006060:	20000f68 	.word	0x20000f68
 8006064:	20000f6c 	.word	0x20000f6c
 8006068:	e000ed20 	.word	0xe000ed20
 800606c:	2000000c 	.word	0x2000000c
 8006070:	e000ef34 	.word	0xe000ef34

08006074 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
	__asm volatile
 800607a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607e:	f383 8811 	msr	BASEPRI, r3
 8006082:	f3bf 8f6f 	isb	sy
 8006086:	f3bf 8f4f 	dsb	sy
 800608a:	607b      	str	r3, [r7, #4]
}
 800608c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800608e:	4b0f      	ldr	r3, [pc, #60]	; (80060cc <vPortEnterCritical+0x58>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	3301      	adds	r3, #1
 8006094:	4a0d      	ldr	r2, [pc, #52]	; (80060cc <vPortEnterCritical+0x58>)
 8006096:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006098:	4b0c      	ldr	r3, [pc, #48]	; (80060cc <vPortEnterCritical+0x58>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d10f      	bne.n	80060c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80060a0:	4b0b      	ldr	r3, [pc, #44]	; (80060d0 <vPortEnterCritical+0x5c>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00a      	beq.n	80060c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80060aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ae:	f383 8811 	msr	BASEPRI, r3
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	f3bf 8f4f 	dsb	sy
 80060ba:	603b      	str	r3, [r7, #0]
}
 80060bc:	bf00      	nop
 80060be:	e7fe      	b.n	80060be <vPortEnterCritical+0x4a>
	}
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr
 80060cc:	2000000c 	.word	0x2000000c
 80060d0:	e000ed04 	.word	0xe000ed04

080060d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80060da:	4b12      	ldr	r3, [pc, #72]	; (8006124 <vPortExitCritical+0x50>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10a      	bne.n	80060f8 <vPortExitCritical+0x24>
	__asm volatile
 80060e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e6:	f383 8811 	msr	BASEPRI, r3
 80060ea:	f3bf 8f6f 	isb	sy
 80060ee:	f3bf 8f4f 	dsb	sy
 80060f2:	607b      	str	r3, [r7, #4]
}
 80060f4:	bf00      	nop
 80060f6:	e7fe      	b.n	80060f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80060f8:	4b0a      	ldr	r3, [pc, #40]	; (8006124 <vPortExitCritical+0x50>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	3b01      	subs	r3, #1
 80060fe:	4a09      	ldr	r2, [pc, #36]	; (8006124 <vPortExitCritical+0x50>)
 8006100:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006102:	4b08      	ldr	r3, [pc, #32]	; (8006124 <vPortExitCritical+0x50>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d105      	bne.n	8006116 <vPortExitCritical+0x42>
 800610a:	2300      	movs	r3, #0
 800610c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	f383 8811 	msr	BASEPRI, r3
}
 8006114:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006116:	bf00      	nop
 8006118:	370c      	adds	r7, #12
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	2000000c 	.word	0x2000000c
	...

08006130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006130:	f3ef 8009 	mrs	r0, PSP
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	4b15      	ldr	r3, [pc, #84]	; (8006190 <pxCurrentTCBConst>)
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	f01e 0f10 	tst.w	lr, #16
 8006140:	bf08      	it	eq
 8006142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800614a:	6010      	str	r0, [r2, #0]
 800614c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006150:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006154:	f380 8811 	msr	BASEPRI, r0
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	f7fe ff00 	bl	8004f64 <vTaskSwitchContext>
 8006164:	f04f 0000 	mov.w	r0, #0
 8006168:	f380 8811 	msr	BASEPRI, r0
 800616c:	bc09      	pop	{r0, r3}
 800616e:	6819      	ldr	r1, [r3, #0]
 8006170:	6808      	ldr	r0, [r1, #0]
 8006172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006176:	f01e 0f10 	tst.w	lr, #16
 800617a:	bf08      	it	eq
 800617c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006180:	f380 8809 	msr	PSP, r0
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	f3af 8000 	nop.w

08006190 <pxCurrentTCBConst>:
 8006190:	2000093c 	.word	0x2000093c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006194:	bf00      	nop
 8006196:	bf00      	nop

08006198 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
	__asm volatile
 800619e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	607b      	str	r3, [r7, #4]
}
 80061b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80061b2:	f7fe fe1d 	bl	8004df0 <xTaskIncrementTick>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d003      	beq.n	80061c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80061bc:	4b06      	ldr	r3, [pc, #24]	; (80061d8 <xPortSysTickHandler+0x40>)
 80061be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061c2:	601a      	str	r2, [r3, #0]
 80061c4:	2300      	movs	r3, #0
 80061c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	f383 8811 	msr	BASEPRI, r3
}
 80061ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80061d0:	bf00      	nop
 80061d2:	3708      	adds	r7, #8
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	e000ed04 	.word	0xe000ed04

080061dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80061dc:	b480      	push	{r7}
 80061de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80061e0:	4b0b      	ldr	r3, [pc, #44]	; (8006210 <vPortSetupTimerInterrupt+0x34>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80061e6:	4b0b      	ldr	r3, [pc, #44]	; (8006214 <vPortSetupTimerInterrupt+0x38>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80061ec:	4b0a      	ldr	r3, [pc, #40]	; (8006218 <vPortSetupTimerInterrupt+0x3c>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a0a      	ldr	r2, [pc, #40]	; (800621c <vPortSetupTimerInterrupt+0x40>)
 80061f2:	fba2 2303 	umull	r2, r3, r2, r3
 80061f6:	099b      	lsrs	r3, r3, #6
 80061f8:	4a09      	ldr	r2, [pc, #36]	; (8006220 <vPortSetupTimerInterrupt+0x44>)
 80061fa:	3b01      	subs	r3, #1
 80061fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80061fe:	4b04      	ldr	r3, [pc, #16]	; (8006210 <vPortSetupTimerInterrupt+0x34>)
 8006200:	2207      	movs	r2, #7
 8006202:	601a      	str	r2, [r3, #0]
}
 8006204:	bf00      	nop
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	e000e010 	.word	0xe000e010
 8006214:	e000e018 	.word	0xe000e018
 8006218:	20000000 	.word	0x20000000
 800621c:	10624dd3 	.word	0x10624dd3
 8006220:	e000e014 	.word	0xe000e014

08006224 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006224:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006234 <vPortEnableVFP+0x10>
 8006228:	6801      	ldr	r1, [r0, #0]
 800622a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800622e:	6001      	str	r1, [r0, #0]
 8006230:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006232:	bf00      	nop
 8006234:	e000ed88 	.word	0xe000ed88

08006238 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800623e:	f3ef 8305 	mrs	r3, IPSR
 8006242:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2b0f      	cmp	r3, #15
 8006248:	d914      	bls.n	8006274 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800624a:	4a17      	ldr	r2, [pc, #92]	; (80062a8 <vPortValidateInterruptPriority+0x70>)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	4413      	add	r3, r2
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006254:	4b15      	ldr	r3, [pc, #84]	; (80062ac <vPortValidateInterruptPriority+0x74>)
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	7afa      	ldrb	r2, [r7, #11]
 800625a:	429a      	cmp	r2, r3
 800625c:	d20a      	bcs.n	8006274 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800625e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	607b      	str	r3, [r7, #4]
}
 8006270:	bf00      	nop
 8006272:	e7fe      	b.n	8006272 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006274:	4b0e      	ldr	r3, [pc, #56]	; (80062b0 <vPortValidateInterruptPriority+0x78>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800627c:	4b0d      	ldr	r3, [pc, #52]	; (80062b4 <vPortValidateInterruptPriority+0x7c>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	429a      	cmp	r2, r3
 8006282:	d90a      	bls.n	800629a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006288:	f383 8811 	msr	BASEPRI, r3
 800628c:	f3bf 8f6f 	isb	sy
 8006290:	f3bf 8f4f 	dsb	sy
 8006294:	603b      	str	r3, [r7, #0]
}
 8006296:	bf00      	nop
 8006298:	e7fe      	b.n	8006298 <vPortValidateInterruptPriority+0x60>
	}
 800629a:	bf00      	nop
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	e000e3f0 	.word	0xe000e3f0
 80062ac:	20000f68 	.word	0x20000f68
 80062b0:	e000ed0c 	.word	0xe000ed0c
 80062b4:	20000f6c 	.word	0x20000f6c

080062b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b08a      	sub	sp, #40	; 0x28
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80062c0:	2300      	movs	r3, #0
 80062c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80062c4:	f7fe fcd8 	bl	8004c78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80062c8:	4b5b      	ldr	r3, [pc, #364]	; (8006438 <pvPortMalloc+0x180>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80062d0:	f000 f920 	bl	8006514 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80062d4:	4b59      	ldr	r3, [pc, #356]	; (800643c <pvPortMalloc+0x184>)
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4013      	ands	r3, r2
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f040 8093 	bne.w	8006408 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d01d      	beq.n	8006324 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80062e8:	2208      	movs	r2, #8
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4413      	add	r3, r2
 80062ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f003 0307 	and.w	r3, r3, #7
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d014      	beq.n	8006324 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f023 0307 	bic.w	r3, r3, #7
 8006300:	3308      	adds	r3, #8
 8006302:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f003 0307 	and.w	r3, r3, #7
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00a      	beq.n	8006324 <pvPortMalloc+0x6c>
	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	617b      	str	r3, [r7, #20]
}
 8006320:	bf00      	nop
 8006322:	e7fe      	b.n	8006322 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d06e      	beq.n	8006408 <pvPortMalloc+0x150>
 800632a:	4b45      	ldr	r3, [pc, #276]	; (8006440 <pvPortMalloc+0x188>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	429a      	cmp	r2, r3
 8006332:	d869      	bhi.n	8006408 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006334:	4b43      	ldr	r3, [pc, #268]	; (8006444 <pvPortMalloc+0x18c>)
 8006336:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006338:	4b42      	ldr	r3, [pc, #264]	; (8006444 <pvPortMalloc+0x18c>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800633e:	e004      	b.n	800634a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006342:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	429a      	cmp	r2, r3
 8006352:	d903      	bls.n	800635c <pvPortMalloc+0xa4>
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1f1      	bne.n	8006340 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800635c:	4b36      	ldr	r3, [pc, #216]	; (8006438 <pvPortMalloc+0x180>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006362:	429a      	cmp	r2, r3
 8006364:	d050      	beq.n	8006408 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006366:	6a3b      	ldr	r3, [r7, #32]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2208      	movs	r2, #8
 800636c:	4413      	add	r3, r2
 800636e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	6a3b      	ldr	r3, [r7, #32]
 8006376:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	1ad2      	subs	r2, r2, r3
 8006380:	2308      	movs	r3, #8
 8006382:	005b      	lsls	r3, r3, #1
 8006384:	429a      	cmp	r2, r3
 8006386:	d91f      	bls.n	80063c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4413      	add	r3, r2
 800638e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	f003 0307 	and.w	r3, r3, #7
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00a      	beq.n	80063b0 <pvPortMalloc+0xf8>
	__asm volatile
 800639a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639e:	f383 8811 	msr	BASEPRI, r3
 80063a2:	f3bf 8f6f 	isb	sy
 80063a6:	f3bf 8f4f 	dsb	sy
 80063aa:	613b      	str	r3, [r7, #16]
}
 80063ac:	bf00      	nop
 80063ae:	e7fe      	b.n	80063ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	1ad2      	subs	r2, r2, r3
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80063c2:	69b8      	ldr	r0, [r7, #24]
 80063c4:	f000 f908 	bl	80065d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80063c8:	4b1d      	ldr	r3, [pc, #116]	; (8006440 <pvPortMalloc+0x188>)
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	4a1b      	ldr	r2, [pc, #108]	; (8006440 <pvPortMalloc+0x188>)
 80063d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80063d6:	4b1a      	ldr	r3, [pc, #104]	; (8006440 <pvPortMalloc+0x188>)
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	4b1b      	ldr	r3, [pc, #108]	; (8006448 <pvPortMalloc+0x190>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d203      	bcs.n	80063ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80063e2:	4b17      	ldr	r3, [pc, #92]	; (8006440 <pvPortMalloc+0x188>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a18      	ldr	r2, [pc, #96]	; (8006448 <pvPortMalloc+0x190>)
 80063e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	4b13      	ldr	r3, [pc, #76]	; (800643c <pvPortMalloc+0x184>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	431a      	orrs	r2, r3
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fa:	2200      	movs	r2, #0
 80063fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80063fe:	4b13      	ldr	r3, [pc, #76]	; (800644c <pvPortMalloc+0x194>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	3301      	adds	r3, #1
 8006404:	4a11      	ldr	r2, [pc, #68]	; (800644c <pvPortMalloc+0x194>)
 8006406:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006408:	f7fe fc44 	bl	8004c94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	f003 0307 	and.w	r3, r3, #7
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00a      	beq.n	800642c <pvPortMalloc+0x174>
	__asm volatile
 8006416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641a:	f383 8811 	msr	BASEPRI, r3
 800641e:	f3bf 8f6f 	isb	sy
 8006422:	f3bf 8f4f 	dsb	sy
 8006426:	60fb      	str	r3, [r7, #12]
}
 8006428:	bf00      	nop
 800642a:	e7fe      	b.n	800642a <pvPortMalloc+0x172>
	return pvReturn;
 800642c:	69fb      	ldr	r3, [r7, #28]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3728      	adds	r7, #40	; 0x28
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	20004b78 	.word	0x20004b78
 800643c:	20004b8c 	.word	0x20004b8c
 8006440:	20004b7c 	.word	0x20004b7c
 8006444:	20004b70 	.word	0x20004b70
 8006448:	20004b80 	.word	0x20004b80
 800644c:	20004b84 	.word	0x20004b84

08006450 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d04d      	beq.n	80064fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006462:	2308      	movs	r3, #8
 8006464:	425b      	negs	r3, r3
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	4413      	add	r3, r2
 800646a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	4b24      	ldr	r3, [pc, #144]	; (8006508 <vPortFree+0xb8>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4013      	ands	r3, r2
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10a      	bne.n	8006494 <vPortFree+0x44>
	__asm volatile
 800647e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006482:	f383 8811 	msr	BASEPRI, r3
 8006486:	f3bf 8f6f 	isb	sy
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	60fb      	str	r3, [r7, #12]
}
 8006490:	bf00      	nop
 8006492:	e7fe      	b.n	8006492 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00a      	beq.n	80064b2 <vPortFree+0x62>
	__asm volatile
 800649c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a0:	f383 8811 	msr	BASEPRI, r3
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	60bb      	str	r3, [r7, #8]
}
 80064ae:	bf00      	nop
 80064b0:	e7fe      	b.n	80064b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	685a      	ldr	r2, [r3, #4]
 80064b6:	4b14      	ldr	r3, [pc, #80]	; (8006508 <vPortFree+0xb8>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4013      	ands	r3, r2
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d01e      	beq.n	80064fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d11a      	bne.n	80064fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	4b0e      	ldr	r3, [pc, #56]	; (8006508 <vPortFree+0xb8>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	43db      	mvns	r3, r3
 80064d2:	401a      	ands	r2, r3
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80064d8:	f7fe fbce 	bl	8004c78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	685a      	ldr	r2, [r3, #4]
 80064e0:	4b0a      	ldr	r3, [pc, #40]	; (800650c <vPortFree+0xbc>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4413      	add	r3, r2
 80064e6:	4a09      	ldr	r2, [pc, #36]	; (800650c <vPortFree+0xbc>)
 80064e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80064ea:	6938      	ldr	r0, [r7, #16]
 80064ec:	f000 f874 	bl	80065d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80064f0:	4b07      	ldr	r3, [pc, #28]	; (8006510 <vPortFree+0xc0>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3301      	adds	r3, #1
 80064f6:	4a06      	ldr	r2, [pc, #24]	; (8006510 <vPortFree+0xc0>)
 80064f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80064fa:	f7fe fbcb 	bl	8004c94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80064fe:	bf00      	nop
 8006500:	3718      	adds	r7, #24
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	20004b8c 	.word	0x20004b8c
 800650c:	20004b7c 	.word	0x20004b7c
 8006510:	20004b88 	.word	0x20004b88

08006514 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800651a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800651e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006520:	4b27      	ldr	r3, [pc, #156]	; (80065c0 <prvHeapInit+0xac>)
 8006522:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f003 0307 	and.w	r3, r3, #7
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00c      	beq.n	8006548 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	3307      	adds	r3, #7
 8006532:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f023 0307 	bic.w	r3, r3, #7
 800653a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	4a1f      	ldr	r2, [pc, #124]	; (80065c0 <prvHeapInit+0xac>)
 8006544:	4413      	add	r3, r2
 8006546:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800654c:	4a1d      	ldr	r2, [pc, #116]	; (80065c4 <prvHeapInit+0xb0>)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006552:	4b1c      	ldr	r3, [pc, #112]	; (80065c4 <prvHeapInit+0xb0>)
 8006554:	2200      	movs	r2, #0
 8006556:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	4413      	add	r3, r2
 800655e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006560:	2208      	movs	r2, #8
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	1a9b      	subs	r3, r3, r2
 8006566:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f023 0307 	bic.w	r3, r3, #7
 800656e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	4a15      	ldr	r2, [pc, #84]	; (80065c8 <prvHeapInit+0xb4>)
 8006574:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006576:	4b14      	ldr	r3, [pc, #80]	; (80065c8 <prvHeapInit+0xb4>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2200      	movs	r2, #0
 800657c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800657e:	4b12      	ldr	r3, [pc, #72]	; (80065c8 <prvHeapInit+0xb4>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2200      	movs	r2, #0
 8006584:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	1ad2      	subs	r2, r2, r3
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006594:	4b0c      	ldr	r3, [pc, #48]	; (80065c8 <prvHeapInit+0xb4>)
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	4a0a      	ldr	r2, [pc, #40]	; (80065cc <prvHeapInit+0xb8>)
 80065a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	4a09      	ldr	r2, [pc, #36]	; (80065d0 <prvHeapInit+0xbc>)
 80065aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80065ac:	4b09      	ldr	r3, [pc, #36]	; (80065d4 <prvHeapInit+0xc0>)
 80065ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80065b2:	601a      	str	r2, [r3, #0]
}
 80065b4:	bf00      	nop
 80065b6:	3714      	adds	r7, #20
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr
 80065c0:	20000f70 	.word	0x20000f70
 80065c4:	20004b70 	.word	0x20004b70
 80065c8:	20004b78 	.word	0x20004b78
 80065cc:	20004b80 	.word	0x20004b80
 80065d0:	20004b7c 	.word	0x20004b7c
 80065d4:	20004b8c 	.word	0x20004b8c

080065d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80065e0:	4b28      	ldr	r3, [pc, #160]	; (8006684 <prvInsertBlockIntoFreeList+0xac>)
 80065e2:	60fb      	str	r3, [r7, #12]
 80065e4:	e002      	b.n	80065ec <prvInsertBlockIntoFreeList+0x14>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	60fb      	str	r3, [r7, #12]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d8f7      	bhi.n	80065e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	4413      	add	r3, r2
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	429a      	cmp	r2, r3
 8006606:	d108      	bne.n	800661a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	685a      	ldr	r2, [r3, #4]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	441a      	add	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	441a      	add	r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	429a      	cmp	r2, r3
 800662c:	d118      	bne.n	8006660 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	4b15      	ldr	r3, [pc, #84]	; (8006688 <prvInsertBlockIntoFreeList+0xb0>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	429a      	cmp	r2, r3
 8006638:	d00d      	beq.n	8006656 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685a      	ldr	r2, [r3, #4]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	441a      	add	r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	601a      	str	r2, [r3, #0]
 8006654:	e008      	b.n	8006668 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006656:	4b0c      	ldr	r3, [pc, #48]	; (8006688 <prvInsertBlockIntoFreeList+0xb0>)
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	601a      	str	r2, [r3, #0]
 800665e:	e003      	b.n	8006668 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	429a      	cmp	r2, r3
 800666e:	d002      	beq.n	8006676 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006676:	bf00      	nop
 8006678:	3714      	adds	r7, #20
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	20004b70 	.word	0x20004b70
 8006688:	20004b78 	.word	0x20004b78

0800668c <__libc_init_array>:
 800668c:	b570      	push	{r4, r5, r6, lr}
 800668e:	4d0d      	ldr	r5, [pc, #52]	; (80066c4 <__libc_init_array+0x38>)
 8006690:	4c0d      	ldr	r4, [pc, #52]	; (80066c8 <__libc_init_array+0x3c>)
 8006692:	1b64      	subs	r4, r4, r5
 8006694:	10a4      	asrs	r4, r4, #2
 8006696:	2600      	movs	r6, #0
 8006698:	42a6      	cmp	r6, r4
 800669a:	d109      	bne.n	80066b0 <__libc_init_array+0x24>
 800669c:	4d0b      	ldr	r5, [pc, #44]	; (80066cc <__libc_init_array+0x40>)
 800669e:	4c0c      	ldr	r4, [pc, #48]	; (80066d0 <__libc_init_array+0x44>)
 80066a0:	f000 f8f2 	bl	8006888 <_init>
 80066a4:	1b64      	subs	r4, r4, r5
 80066a6:	10a4      	asrs	r4, r4, #2
 80066a8:	2600      	movs	r6, #0
 80066aa:	42a6      	cmp	r6, r4
 80066ac:	d105      	bne.n	80066ba <__libc_init_array+0x2e>
 80066ae:	bd70      	pop	{r4, r5, r6, pc}
 80066b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80066b4:	4798      	blx	r3
 80066b6:	3601      	adds	r6, #1
 80066b8:	e7ee      	b.n	8006698 <__libc_init_array+0xc>
 80066ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80066be:	4798      	blx	r3
 80066c0:	3601      	adds	r6, #1
 80066c2:	e7f2      	b.n	80066aa <__libc_init_array+0x1e>
 80066c4:	080069a4 	.word	0x080069a4
 80066c8:	080069a4 	.word	0x080069a4
 80066cc:	080069a4 	.word	0x080069a4
 80066d0:	080069a8 	.word	0x080069a8

080066d4 <__retarget_lock_acquire_recursive>:
 80066d4:	4770      	bx	lr

080066d6 <__retarget_lock_release_recursive>:
 80066d6:	4770      	bx	lr

080066d8 <memcpy>:
 80066d8:	440a      	add	r2, r1
 80066da:	4291      	cmp	r1, r2
 80066dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80066e0:	d100      	bne.n	80066e4 <memcpy+0xc>
 80066e2:	4770      	bx	lr
 80066e4:	b510      	push	{r4, lr}
 80066e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066ee:	4291      	cmp	r1, r2
 80066f0:	d1f9      	bne.n	80066e6 <memcpy+0xe>
 80066f2:	bd10      	pop	{r4, pc}

080066f4 <memset>:
 80066f4:	4402      	add	r2, r0
 80066f6:	4603      	mov	r3, r0
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d100      	bne.n	80066fe <memset+0xa>
 80066fc:	4770      	bx	lr
 80066fe:	f803 1b01 	strb.w	r1, [r3], #1
 8006702:	e7f9      	b.n	80066f8 <memset+0x4>

08006704 <cleanup_glue>:
 8006704:	b538      	push	{r3, r4, r5, lr}
 8006706:	460c      	mov	r4, r1
 8006708:	6809      	ldr	r1, [r1, #0]
 800670a:	4605      	mov	r5, r0
 800670c:	b109      	cbz	r1, 8006712 <cleanup_glue+0xe>
 800670e:	f7ff fff9 	bl	8006704 <cleanup_glue>
 8006712:	4621      	mov	r1, r4
 8006714:	4628      	mov	r0, r5
 8006716:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800671a:	f000 b869 	b.w	80067f0 <_free_r>
	...

08006720 <_reclaim_reent>:
 8006720:	4b2c      	ldr	r3, [pc, #176]	; (80067d4 <_reclaim_reent+0xb4>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4283      	cmp	r3, r0
 8006726:	b570      	push	{r4, r5, r6, lr}
 8006728:	4604      	mov	r4, r0
 800672a:	d051      	beq.n	80067d0 <_reclaim_reent+0xb0>
 800672c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800672e:	b143      	cbz	r3, 8006742 <_reclaim_reent+0x22>
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d14a      	bne.n	80067cc <_reclaim_reent+0xac>
 8006736:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006738:	6819      	ldr	r1, [r3, #0]
 800673a:	b111      	cbz	r1, 8006742 <_reclaim_reent+0x22>
 800673c:	4620      	mov	r0, r4
 800673e:	f000 f857 	bl	80067f0 <_free_r>
 8006742:	6961      	ldr	r1, [r4, #20]
 8006744:	b111      	cbz	r1, 800674c <_reclaim_reent+0x2c>
 8006746:	4620      	mov	r0, r4
 8006748:	f000 f852 	bl	80067f0 <_free_r>
 800674c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800674e:	b111      	cbz	r1, 8006756 <_reclaim_reent+0x36>
 8006750:	4620      	mov	r0, r4
 8006752:	f000 f84d 	bl	80067f0 <_free_r>
 8006756:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006758:	b111      	cbz	r1, 8006760 <_reclaim_reent+0x40>
 800675a:	4620      	mov	r0, r4
 800675c:	f000 f848 	bl	80067f0 <_free_r>
 8006760:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006762:	b111      	cbz	r1, 800676a <_reclaim_reent+0x4a>
 8006764:	4620      	mov	r0, r4
 8006766:	f000 f843 	bl	80067f0 <_free_r>
 800676a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800676c:	b111      	cbz	r1, 8006774 <_reclaim_reent+0x54>
 800676e:	4620      	mov	r0, r4
 8006770:	f000 f83e 	bl	80067f0 <_free_r>
 8006774:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006776:	b111      	cbz	r1, 800677e <_reclaim_reent+0x5e>
 8006778:	4620      	mov	r0, r4
 800677a:	f000 f839 	bl	80067f0 <_free_r>
 800677e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006780:	b111      	cbz	r1, 8006788 <_reclaim_reent+0x68>
 8006782:	4620      	mov	r0, r4
 8006784:	f000 f834 	bl	80067f0 <_free_r>
 8006788:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800678a:	b111      	cbz	r1, 8006792 <_reclaim_reent+0x72>
 800678c:	4620      	mov	r0, r4
 800678e:	f000 f82f 	bl	80067f0 <_free_r>
 8006792:	69a3      	ldr	r3, [r4, #24]
 8006794:	b1e3      	cbz	r3, 80067d0 <_reclaim_reent+0xb0>
 8006796:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006798:	4620      	mov	r0, r4
 800679a:	4798      	blx	r3
 800679c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800679e:	b1b9      	cbz	r1, 80067d0 <_reclaim_reent+0xb0>
 80067a0:	4620      	mov	r0, r4
 80067a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80067a6:	f7ff bfad 	b.w	8006704 <cleanup_glue>
 80067aa:	5949      	ldr	r1, [r1, r5]
 80067ac:	b941      	cbnz	r1, 80067c0 <_reclaim_reent+0xa0>
 80067ae:	3504      	adds	r5, #4
 80067b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067b2:	2d80      	cmp	r5, #128	; 0x80
 80067b4:	68d9      	ldr	r1, [r3, #12]
 80067b6:	d1f8      	bne.n	80067aa <_reclaim_reent+0x8a>
 80067b8:	4620      	mov	r0, r4
 80067ba:	f000 f819 	bl	80067f0 <_free_r>
 80067be:	e7ba      	b.n	8006736 <_reclaim_reent+0x16>
 80067c0:	680e      	ldr	r6, [r1, #0]
 80067c2:	4620      	mov	r0, r4
 80067c4:	f000 f814 	bl	80067f0 <_free_r>
 80067c8:	4631      	mov	r1, r6
 80067ca:	e7ef      	b.n	80067ac <_reclaim_reent+0x8c>
 80067cc:	2500      	movs	r5, #0
 80067ce:	e7ef      	b.n	80067b0 <_reclaim_reent+0x90>
 80067d0:	bd70      	pop	{r4, r5, r6, pc}
 80067d2:	bf00      	nop
 80067d4:	20000010 	.word	0x20000010

080067d8 <__malloc_lock>:
 80067d8:	4801      	ldr	r0, [pc, #4]	; (80067e0 <__malloc_lock+0x8>)
 80067da:	f7ff bf7b 	b.w	80066d4 <__retarget_lock_acquire_recursive>
 80067de:	bf00      	nop
 80067e0:	20004b90 	.word	0x20004b90

080067e4 <__malloc_unlock>:
 80067e4:	4801      	ldr	r0, [pc, #4]	; (80067ec <__malloc_unlock+0x8>)
 80067e6:	f7ff bf76 	b.w	80066d6 <__retarget_lock_release_recursive>
 80067ea:	bf00      	nop
 80067ec:	20004b90 	.word	0x20004b90

080067f0 <_free_r>:
 80067f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067f2:	2900      	cmp	r1, #0
 80067f4:	d044      	beq.n	8006880 <_free_r+0x90>
 80067f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067fa:	9001      	str	r0, [sp, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f1a1 0404 	sub.w	r4, r1, #4
 8006802:	bfb8      	it	lt
 8006804:	18e4      	addlt	r4, r4, r3
 8006806:	f7ff ffe7 	bl	80067d8 <__malloc_lock>
 800680a:	4a1e      	ldr	r2, [pc, #120]	; (8006884 <_free_r+0x94>)
 800680c:	9801      	ldr	r0, [sp, #4]
 800680e:	6813      	ldr	r3, [r2, #0]
 8006810:	b933      	cbnz	r3, 8006820 <_free_r+0x30>
 8006812:	6063      	str	r3, [r4, #4]
 8006814:	6014      	str	r4, [r2, #0]
 8006816:	b003      	add	sp, #12
 8006818:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800681c:	f7ff bfe2 	b.w	80067e4 <__malloc_unlock>
 8006820:	42a3      	cmp	r3, r4
 8006822:	d908      	bls.n	8006836 <_free_r+0x46>
 8006824:	6825      	ldr	r5, [r4, #0]
 8006826:	1961      	adds	r1, r4, r5
 8006828:	428b      	cmp	r3, r1
 800682a:	bf01      	itttt	eq
 800682c:	6819      	ldreq	r1, [r3, #0]
 800682e:	685b      	ldreq	r3, [r3, #4]
 8006830:	1949      	addeq	r1, r1, r5
 8006832:	6021      	streq	r1, [r4, #0]
 8006834:	e7ed      	b.n	8006812 <_free_r+0x22>
 8006836:	461a      	mov	r2, r3
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	b10b      	cbz	r3, 8006840 <_free_r+0x50>
 800683c:	42a3      	cmp	r3, r4
 800683e:	d9fa      	bls.n	8006836 <_free_r+0x46>
 8006840:	6811      	ldr	r1, [r2, #0]
 8006842:	1855      	adds	r5, r2, r1
 8006844:	42a5      	cmp	r5, r4
 8006846:	d10b      	bne.n	8006860 <_free_r+0x70>
 8006848:	6824      	ldr	r4, [r4, #0]
 800684a:	4421      	add	r1, r4
 800684c:	1854      	adds	r4, r2, r1
 800684e:	42a3      	cmp	r3, r4
 8006850:	6011      	str	r1, [r2, #0]
 8006852:	d1e0      	bne.n	8006816 <_free_r+0x26>
 8006854:	681c      	ldr	r4, [r3, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	6053      	str	r3, [r2, #4]
 800685a:	4421      	add	r1, r4
 800685c:	6011      	str	r1, [r2, #0]
 800685e:	e7da      	b.n	8006816 <_free_r+0x26>
 8006860:	d902      	bls.n	8006868 <_free_r+0x78>
 8006862:	230c      	movs	r3, #12
 8006864:	6003      	str	r3, [r0, #0]
 8006866:	e7d6      	b.n	8006816 <_free_r+0x26>
 8006868:	6825      	ldr	r5, [r4, #0]
 800686a:	1961      	adds	r1, r4, r5
 800686c:	428b      	cmp	r3, r1
 800686e:	bf04      	itt	eq
 8006870:	6819      	ldreq	r1, [r3, #0]
 8006872:	685b      	ldreq	r3, [r3, #4]
 8006874:	6063      	str	r3, [r4, #4]
 8006876:	bf04      	itt	eq
 8006878:	1949      	addeq	r1, r1, r5
 800687a:	6021      	streq	r1, [r4, #0]
 800687c:	6054      	str	r4, [r2, #4]
 800687e:	e7ca      	b.n	8006816 <_free_r+0x26>
 8006880:	b003      	add	sp, #12
 8006882:	bd30      	pop	{r4, r5, pc}
 8006884:	20004b94 	.word	0x20004b94

08006888 <_init>:
 8006888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800688a:	bf00      	nop
 800688c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800688e:	bc08      	pop	{r3}
 8006890:	469e      	mov	lr, r3
 8006892:	4770      	bx	lr

08006894 <_fini>:
 8006894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006896:	bf00      	nop
 8006898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800689a:	bc08      	pop	{r3}
 800689c:	469e      	mov	lr, r3
 800689e:	4770      	bx	lr
